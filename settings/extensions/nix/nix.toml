# 
# how to add packages?
# 
    # you can search for them here: https://search.nixos.org/packages
    #
    # if you find a package like: nixpkg.python38Packages.setuptools
    # then add a section like this:
    #    [[packages]]
    #    load = [ "python38Packages", "setuptools",]
    # 
    # if you need a specific version 
    # search for the package (e.g. "setuptools") on here: https://lazamar.co.uk/nix-versions/
    # each version will have a long hash like "c92ca95afb5043bc6faa0d526460584eccff2277" 
    # (which is a commit on the nixpkg repo)
    # once you copy the hash, you can add the package below like
    # 
    #    [[packages]]
    #    load = [ "python38Packages", "setuptools",]
    #   

# 
# Complex packages
# 
    # things such as platform-specific packages,
    # loading from a git repository,
    # or if you find an online solution that involves native build inputs
    # you can use the following advanced format
    # 
    #    [[packages]]
    #    load = [ "nixGLNvidia",]
    #    onlyIf = [ [ "stdenv", "isLinux",],] # for MacOS use: onlyIf = [ [ "stdenv", "isDarwin",],]
    #    # see https://discourse.nixos.org/t/opencv-with-cuda-in-nix-shell/7358/5
    #    from = { fetchGit = { url = "https://github.com/guibou/nixGL", rev = "7d6bc1b21316bab6cf4a6520c2639a11c25a220e" }, }
    # 
    # in general when looking at online forms, look at the shell.nix file
    # specifically look at the `# create a shell` and `main.packages.mkShell` part
    # and know that seeing `pkgs` online translates to `main.packages` inside the shell.nix file


# [[ you can add tools for your project right here or at the bottom ]]

# 
# Node.js
# 
# uncomment one of groups to pick your version
[[packages]]
load = [ "nodejs",] 

# 
# Python (because node-gyp depends on python)
# 
[[packages]]
load = [ "python38",]

[[packages]]
load = [ "python38Packages", "setuptools",]

[[packages]]
load = [ "python38Packages", "pip",]

[[packages]]
load = [ "python38Packages", "virtualenv",]

[[packages]]
load = [ "python38Packages", "wheel",]

[[packages]]
load = [ "python2",]

[[packages]]
load = [ "cmake",]

[[packages]]
load = [ "pkg-config",]

[[packages]]
load = [ "libffi",]



# 
# 
# 
# Need-to-build-from-source tools
#
# 
# 
# Note: most projects need these, 
# and if you need them for one project nix has a shared-memory across projects
# comment these out in a situation such as deploying a project to a minimal server

# 
# Linux
# 
[[packages]]
load = [ "pkgconfig",]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isLinux",],]

[[packages]]
load = [ "libconfig",]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isLinux",],]

[[packages]]
load = [ "cmake",]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isLinux",],]

# 
# Mac
# 
[[packages]]
load = [ "xcbuild",]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isDarwin",],]

[[packages]]
load = [ "xcodebuild",]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isDarwin",],]

[[packages]]
load = [ "darwin", "libobjc", ]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isDarwin",],]

[[packages]]
load = [ "darwin", "apple_sdk", "frameworks", "CoreServices" ]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isDarwin",],]

[[packages]]
load = [ "darwin", "apple_sdk", "frameworks", "CoreFoundation" ]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isDarwin",],]

[[packages]]
load = [ "darwin", "apple_sdk", "frameworks", "Foundation" ]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isDarwin",],]

[[packages]]
load = [ "darwin", "apple_sdk", "frameworks", "AVKit" ]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isDarwin",],]

[[packages]]
load = [ "darwin", "apple_sdk", "frameworks", "AVFoundation" ]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isDarwin",],]

[[packages]]
load = [ "darwin", "apple_sdk", "frameworks", "AppKit" ]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isDarwin",],]

[[packages]]
load = [ "darwin", "apple_sdk", "frameworks", "WebKit" ]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isDarwin",],]

[[packages]]
load = [ "darwin", "apple_sdk", "frameworks", "Accounts" ]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isDarwin",],]

[[packages]]
load = [ "darwin", "apple_sdk", "frameworks", "Security" ]
asNativeBuildInput = true
onlyIf = [ [ "stdenv", "isDarwin",],]

# 
# both often need
# 
[[packages]]
load = [ "gcc",]

[[packages]]
load = [ "libkrb5",]

# 
# 
# common dependencies
# 
# 


[[packages]]
load = [ "ruby", "devEnv" ]

[[packages]]
load = [ "git",  ]

[[packages]]
load = [ "sqlite",  ]

[[packages]]
load = [ "libpcap",  ]

[[packages]]
load = [ "postgresql",  ]

[[packages]]
load = [ "libxml2",  ]

[[packages]]
load = [ "libxslt",  ]

[[packages]]
load = [ "pkg-config", ]

[[packages]]
load = [ "bundix",  ]

[[packages]]
load = [ "gnumake",  ]

[[packages]]
load = [ "ncurses5",]

[[packages]]
load = [ "openssh",]

# 
# 
# fancy command line tools
# 
# 
[[packages]]
load = [ "fd",]

[[packages]]
load = [ "sd",]

[[packages]]
load = [ "dua",]

[[packages]]
load = [ "tealdeer",]

[[packages]]
load = [ "bottom",]

[[packages]]
load = [ "exa",]

[[packages]]
load = [ "zsh",]

[[packages]]
load = [ "zsh-syntax-highlighting",]

[[packages]]
load = [ "oh-my-zsh",]

[[packages]]
load = [ "zsh-autosuggestions",]

[[packages]]
load = [ "spaceship-prompt",]

[[packages]]
load = [ "nnn",]

[[packages]]
load = [ "jq",]

[[packages]]
load = [ "git-subrepo",]

#
#
# Basic Commandline tools
#
#

[[packages]]
load = [ "man",]

[[packages]]
load = [ "coreutils",]

[[packages]]
load = [ "ripgrep",]

[[packages]]
load = [ "which",]

[[packages]]
load = [ "git",]

[[packages]]
load = [ "colorls",]

[[packages]]
load = [ "tree",]

[[packages]]
load = [ "less",]

[[packages]]
load = [ "nano",]

[[packages]]
load = [ "unzip",]

[[packages]]
load = [ "zip",]

[[packages]]
load = [ "findutils",]

[[packages]]
load = [ "wget",]

[[packages]]
load = [ "curl",]

[[packages]]
load = [ "unixtools", "arp",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "ifconfig",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "netstat",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "ping",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "route",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "col",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "column",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "fdisk",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "fsck",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "getconf",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "getent",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "getopt",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "hexdump",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "hostname",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "killall",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "locale",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "more",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "mount",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "ps",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "quota",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "script",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "sysctl",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "top",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "umount",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "whereis",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "write",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

[[packages]]
load = [ "unixtools", "xxd",]
from = "c00039f697caa02208a01e7712bfe11c484cceca"

# 
# core
# 
[[packages]]
load = [ "deno",]
from = "c10d7026fbae24c51e87586c6b6e4c46c0365007"

[[packages]]
load = [ "nix",]