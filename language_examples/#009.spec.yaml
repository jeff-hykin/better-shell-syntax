- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: text
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ' -regex-match '
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '^a([^a]+)a([^a]+)a'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: text
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=~'
  scopes:
    - keyword.operator.logical.regex
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '^a([^a]+)a([^a]+)a'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: var
  scopes:
    - variable.other.normal
- source: ' -regex-match '
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '^a([^a]+)a([^a]+)a'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: var
  scopes:
    - variable.other.normal
- source: '=~'
  scopes:
    - keyword.operator.logical.regex
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '^a([^a]+)a([^a]+)a'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: desc
  scopes:
    - variable.other.normal
- source: ' -regex-match '
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ^alias for --(\S+)
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: desc
  scopes:
    - variable.other.normal
- source: '=~'
  scopes:
    - keyword.operator.logical.regex
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ^alias for --(\S+)
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
