- source: '#!'
  scopesBegin:
    - comment.line.number-sign
    - meta.shebang
  scopes:
    - punctuation.definition.comment.shebang
- source: /usr/bin/env bash
  scopesEnd:
    - comment.line.number-sign
    - meta.shebang
- source: set
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: eu
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: set
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: o
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: pipefail
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Sourced from:'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' - https://github.com/LnL7/nix-darwin/blob/8c29d0985d74b4a990238497c47a2542a5616b3c/bootstrap.sh'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' - https://gist.github.com/expipiplus1/e571ce88c608a1e83547c918591b149f/ac504c6c1b96e65505fbda437a28ce563408ecb0'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' - https://github.com/NixOS/nixos-org-configurations/blob/a122f418797713d519aadf02e677fce0dc1cb446/delft/scripts/nix-mac-installer.sh'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' - https://github.com/matthewbauer/macNixOS/blob/f6045394f9153edea417be90c216788e754feaba/install-macNixOS.sh'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' - https://gist.github.com/LnL7/9717bd6cdcb30b086fd7f2093e5f8494/86b26f852ce563e973acd30f796a9a416248c34a'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' however tracking which bits came from which would be impossible.'
  scopesEnd:
    - comment.line.number-sign
- source: readonly
  scopesBegin:
    - meta.statement
    - meta.expression.assignment.modified
  scopes:
    - storage.modifier.readonly
- source: ESC
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '\033[0m'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: readonly
  scopes:
    - storage.modifier.readonly
- source: BOLD
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '\033[1m'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: readonly
  scopes:
    - storage.modifier.readonly
- source: BLUE
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '\033[34m'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: readonly
  scopes:
    - storage.modifier.readonly
- source: BLUE_UL
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '\033[4;34m'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: readonly
  scopes:
    - storage.modifier.readonly
- source: GREEN
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '\033[32m'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: readonly
  scopes:
    - storage.modifier.readonly
- source: GREEN_UL
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '\033[4;32m'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: readonly
  scopes:
    - storage.modifier.readonly
- source: RED
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '\033[31m'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment.modified
    - string.quoted.single
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' installer allows overriding build user count to speed up installation'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' as creating each user takes non-trivial amount of time on macos'
  scopesEnd:
    - comment.line.number-sign
- source: readonly
  scopesBegin:
    - meta.statement
    - meta.expression.assignment.modified
  scopes:
    - storage.modifier.readonly
- source: NIX_USER_COUNT
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: NIX_USER_COUNT
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':-'
  scopes:
    - keyword.operator.expansion
- source: '32'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: readonly
  scopes:
    - storage.modifier.readonly
- source: NIX_BUILD_GROUP_ID
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: NIX_BUILD_GROUP_ID
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':-'
  scopes:
    - keyword.operator.expansion
- source: '30000'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: readonly
  scopes:
    - storage.modifier.readonly
- source: NIX_BUILD_GROUP_NAME
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: nixbld
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment.modified
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' darwin installer needs to override these'
  scopesEnd:
    - comment.line.number-sign
- source: NIX_FIRST_BUILD_UID
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: NIX_FIRST_BUILD_UID
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':-'
  scopes:
    - keyword.operator.expansion
- source: '30001'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: NIX_BUILD_USER_NAME_TEMPLATE
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: nixbld%d
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Please don''t change this. We don''t support it, because the'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' default shell profile that comes with Nix doesn''t support it.'
  scopesEnd:
    - comment.line.number-sign
- source: readonly
  scopesBegin:
    - meta.statement
    - meta.expression.assignment.modified
  scopes:
    - storage.modifier.readonly
- source: NIX_ROOT
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: /nix
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: readonly
  scopes:
    - storage.modifier.readonly
- source: NIX_EXTRA_CONF
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: NIX_EXTRA_CONF
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':-'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: readonly
  scopes:
    - storage.modifier.readonly
- source: PROFILE_TARGETS
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation.definition.array
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: /etc/bashrc
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: /etc/profile.d/nix.sh
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: /etc/zshrc
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: /etc/bash.bashrc
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: /etc/zsh/zshrc
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.array
- source: readonly
  scopes:
    - storage.modifier.readonly
- source: PROFILE_BACKUP_SUFFIX
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: .backup-before-nix
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: readonly
  scopes:
    - storage.modifier.readonly
- source: PROFILE_NIX_FILE
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_ROOT
  scopes:
    - variable.other.normal
- source: /var/nix/profiles/default/etc/profile.d/nix-daemon.sh
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: readonly
  scopes:
    - storage.modifier.readonly
- source: PROFILE_NIX_START_DELIMETER
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '# Nix'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: readonly
  scopes:
    - storage.modifier.readonly
- source: PROFILE_NIX_END_DELIMETER
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '# End Nix'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment.modified
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Caution, used both as a comment and inside grep argument (so $ or \+, etc would break things)'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Fish has different syntax than zsh/bash, treat it separate'
  scopesEnd:
    - comment.line.number-sign
- source: readonly
  scopesBegin:
    - meta.statement
    - meta.expression.assignment.modified
  scopes:
    - storage.modifier.readonly
- source: PROFILE_FISH_SUFFIX
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: conf.d/nix.fish
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: readonly
  scopes:
    - storage.modifier.readonly
- source: PROFILE_FISH_PREFIXES
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation.definition.array
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' each of these are common values of $__fish_sysconf_dir,'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' under which Fish will look for a file named'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' $PROFILE_FISH_SUFFIX.'
  scopesEnd:
    - comment.line.number-sign
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: /etc/fish
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' standard'
  scopesEnd:
    - comment.line.number-sign
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: /usr/local/etc/fish
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' their installer .pkg for macOS'
  scopesEnd:
    - comment.line.number-sign
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: /opt/homebrew/etc/fish
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' homebrew'
  scopesEnd:
    - comment.line.number-sign
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: /opt/local/etc/fish
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' macports'
  scopesEnd:
    - comment.line.number-sign
- source: )
  scopes:
    - punctuation.definition.array
- source: readonly
  scopes:
    - storage.modifier.readonly
- source: PROFILE_NIX_FILE_FISH
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_ROOT
  scopes:
    - variable.other.normal
- source: /var/nix/profiles/default/etc/profile.d/nix-daemon.fish
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: readonly
  scopes:
    - storage.modifier.readonly
- source: NIX_INSTALLED_NIX
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '@nix@'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: readonly
  scopes:
    - storage.modifier.readonly
- source: NIX_INSTALLED_CACERT
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '@cacert@'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment.modified
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: >-
    readonly
    NIX_INSTALLED_NIX="/nix/store/j8dbv5w6jl34caywh2ygdy88knx1mdf7-nix-2.3.6"
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: >-
    readonly
    NIX_INSTALLED_CACERT="/nix/store/7dxhzymvy330i28ii676fl1pqwcahv2f-nss-cacert-3.49.2"
  scopesEnd:
    - comment.line.number-sign
- source: readonly
  scopesBegin:
    - meta.statement
    - meta.expression.assignment.modified
  scopes:
    - storage.modifier.readonly
- source: EXTRACTED_NIX_PATH
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: dirname
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '0'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: readonly
  scopes:
    - storage.modifier.readonly
- source: ROOT_HOME
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '~'
  scopes:
    - keyword.operator.tilde
- source: root
  scopes:
    - variable.other.assignment
  scopesEnd:
    - meta.statement
    - meta.expression.assignment.modified
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-t'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: readonly
  scopesBegin:
    - meta.statement
    - meta.statement
    - meta.expression.assignment.modified
  scopes:
    - storage.modifier.readonly
- source: IS_HEADLESS
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: 'no'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement
    - meta.expression.assignment.modified
    - string.quoted.single
- source: else
  scopes:
    - keyword.control.else
- source: readonly
  scopesBegin:
    - meta.statement
    - meta.statement
    - meta.expression.assignment.modified
  scopes:
    - storage.modifier.readonly
- source: IS_HEADLESS
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: 'yes'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement
    - meta.expression.assignment.modified
    - string.quoted.single
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: headless
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.statement
  scopes:
    - keyword.control.if
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: IS_HEADLESS
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'yes'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: else
  scopes:
    - keyword.control.else
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control.fi
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: is_root
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.statement
  scopes:
    - keyword.control.if
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: EUID
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '-eq'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: else
  scopes:
    - keyword.control.else
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control.fi
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: is_os_linux
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.statement
  scopes:
    - keyword.control.if
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: uname
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: s
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Linux
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: else
  scopes:
    - keyword.control.else
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control.fi
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: is_os_darwin
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.statement
  scopes:
    - keyword.control.if
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: uname
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: s
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Darwin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: else
  scopes:
    - keyword.control.else
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control.fi
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: contact_us
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'You can open an issue at https://github.com/nixos/nix/issues'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: echo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: echo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Or feel free to contact the team:'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: echo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ' - Matrix: #nix:nixos.org'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: echo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ' - IRC: in #nixos on irc.libera.chat'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: echo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ' - twitter: @nixos_org'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: echo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ' - forum: https://discourse.nixos.org'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: get_help
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: We'd love to help if you need it.
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: echo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: contact_us
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: nix_user_for_core
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_BUILD_USER_NAME_TEMPLATE
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: nix_uid_for_core
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $(
  scopesBegin:
    - meta.argument
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: (
  scopesBegin:
    - meta.parenthese.group
  scopes:
    - punctuation.section.parenthese
- source: NIX_FIRST_BUILD_UID
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: +
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '-'
  scopesBegin:
    - string.unquoted.argument
- source: '1'
  scopes:
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: )
  scopes:
    - punctuation.section.parenthese
  scopesEnd:
    - meta.parenthese.group
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - meta.scope.subshell
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: _textout
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: en
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: shift
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '*'
  scopes:
    - variable.language.special
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: cat
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: else
  scopes:
    - keyword.control.else
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional.all
- source: '@'
  scopes:
    - variable.parameter.positional.all
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: en
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: ESC
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: header
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: follow
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '---------------------------------------------------------'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: header
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '---- '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '*'
  scopes:
    - variable.language.special
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: follow
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: follow
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: follow
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: head
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: c
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '80'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.expression.assignment
    - meta.scope.subshell
- source: echo
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: _textout
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BLUE
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: header
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: warningheader
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: follow
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '---------------------------------------------------------'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: header
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '---- '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '*'
  scopes:
    - variable.language.special
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: follow
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: follow
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: follow
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: head
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: c
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '80'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.expression.assignment
    - meta.scope.subshell
- source: echo
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: _textout
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: RED
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: header
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: subheader
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: _textout
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BLUE_UL
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '*'
  scopes:
    - variable.language.special
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: row
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BOLD
  scopes:
    - variable.other.normal
- source: '%s'
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: ESC
  scopes:
    - variable.other.normal
- source: ':'
- source: \\
  scopes:
    - constant.character.escape
- source: t%s
- source: \\
  scopes:
    - constant.character.escape
- source: 'n'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: task
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: ok
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '~~> '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: bold
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BOLD
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '*'
  scopes:
    - variable.language.special
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: ESC
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: ok
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: _textout
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: GREEN
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional.all
- source: '@'
  scopes:
    - variable.parameter.positional.all
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: warning
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: warningheader
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: warning!
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: cat
  scopesBegin:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: echo
  scopes:
    - support.function.builtin
  scopesEnd:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: error
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' used as one-part of a mutli-part failure message'
  scopesEnd:
    - comment.line.number-sign
- source: warningheader
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: error!
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: cat
  scopesBegin:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: echo
  scopes:
    - support.function.builtin
  scopesEnd:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: failure
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: header
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: oh no!
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: _textout
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: RED
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional.all
- source: '@'
  scopes:
    - variable.parameter.positional.all
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: echo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: _textout
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: RED
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: get_help
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: trap
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: finish_cleanup
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: EXIT
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: exit
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: failed_check
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: _textout
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: RED
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: '    ! : '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional.all
- source: '@'
  scopes:
    - variable.parameter.positional.all
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: passed_check
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: _textout
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: GREEN
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: '    . : '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional.all
- source: '@'
  scopes:
    - variable.parameter.positional.all
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: ui_confirm
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: _textout
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: GREEN
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: GREEN_UL
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: headless
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'No TTY, assuming you would say yes :)'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement
    - meta.expression.assignment.modified
  scopes:
    - storage.modifier.local
- source: prompt
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '[y/n] '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment.modified
    - string.quoted.double
- source: echo
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: 'n'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: prompt
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: read
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: r
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: 'y'
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: 'y'
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'y'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: elif
  scopes:
    - keyword.control.elif
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: 'y'
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'n'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: else
  scopes:
    - keyword.control.else
- source: _textout
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: RED
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: 'Sorry, I didn''t understand. I can only understand answers of y or n'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: echo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: 'n'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: prompt
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: _UNCHANGED_GRP_FMT
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '%b'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: '\033[2m%='
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single.dollar
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: ESC
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' "dim"'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' bold+invert+red and bold+invert+green just for the +/- below'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' red/green foreground for rest of the line'
  scopesEnd:
    - comment.line.number-sign
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: _OLD_LINE_FMT
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '%b'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: '\033[1;7;31m-'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single.dollar
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: ESC
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: RED
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '%L'
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: ESC
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: printf
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: _NEW_LINE_FMT
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '%b'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: '\033[1;7;32m+'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single.dollar
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: ESC
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: GREEN
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '%L'
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: ESC
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: _diff
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' simple colorized diff comatible w/ pre `--color` versions'
  scopesEnd:
    - comment.line.number-sign
- source: diff
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-unchanged-group-format='
  scopesBegin:
    - constant.other.option
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: _UNCHANGED_GRP_FMT
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - constant.other.option
    - string.quoted.double
- source: '-'
  scopes:
    - constant.other.option.dash
- source: '-old-line-format='
  scopesBegin:
    - constant.other.option
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: _OLD_LINE_FMT
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - constant.other.option
    - string.quoted.double
- source: '-'
  scopes:
    - constant.other.option.dash
- source: '-new-line-format='
  scopesBegin:
    - constant.other.option
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: _NEW_LINE_FMT
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - constant.other.option
    - string.quoted.double
- source: '-'
  scopes:
    - constant.other.option.dash
- source: '-unchanged-line-format='
  scopesBegin:
    - constant.other.option
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '  %L'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.unquoted.argument
    - constant.other.option
    - string.quoted.double
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional.all
- source: '@'
  scopes:
    - variable.parameter.positional.all
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: confirm_rm
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement
    - meta.expression.assignment.modified
  scopes:
    - storage.modifier.local
- source: path
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement
    - meta.expression.assignment.modified
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: ui_confirm
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Can I remove '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: path
  scopes:
    - variable.other.normal
- source: '?'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: _sudo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'to remove '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: rm
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: confirm_edit
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement
    - meta.expression.assignment.modified
  scopes:
    - storage.modifier.local
- source: path
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: local
  scopes:
    - storage.modifier.local
- source: edit_path
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment.modified
    - string.quoted.double
- source: cat
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '<<'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.heredoc
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
- source: ''''
  scopesBegin:
    - string.unquoted.heredoc.no-indent
- source: 'Nix isn''t the only thing in '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: path
  scopes:
    - variable.other.normal
- source: ','
- source: but I think I know how to edit it out.
- source: 'Here''s the diff:'
  scopesEnd:
    - string.unquoted.heredoc.no-indent
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' could technically test the diff, but caller should do it'
  scopesEnd:
    - comment.line.number-sign
- source: _diff
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: edit_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: ui_confirm
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Does the change above look right?
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: _sudo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'remove nix from '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: cp
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: edit_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: _SERIOUS_BUSINESS
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: RED
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '%s:'
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: ESC
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: password_confirm
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement
    - meta.expression.assignment.modified
  scopes:
    - storage.modifier.local
- source: do_something_consequential
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement
    - meta.expression.assignment.modified
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: ui_confirm
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Can I '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: do_something_consequential
  scopes:
    - variable.other.normal
- source: '?'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' shellcheck disable=SC2059'
  scopesEnd:
    - comment.line.number-sign
- source: sudo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: kv
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: '-prompt='
  scopesBegin:
    - constant.other.option
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: _SERIOUS_BUSINESS
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: 'Enter your password to '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: do_something_consequential
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
    - constant.other.option
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Support accumulating reminders over the course of a run and showing'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' them at the end. An example where this helps: the installer changes'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' something, but it won''t work without a reboot. If you tell the user'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' when you do it, they may miss it in the stream. The value of the'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' setting isn''t enough to decide whether to message because you only'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' need to message if you *changed* it.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' reminders stored in array delimited by empty entry; if ! headless,'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' user is asked to confirm after each delimiter.'
  scopesEnd:
    - comment.line.number-sign
- source: _reminders
  scopesBegin:
    - meta.statement
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - punctuation.definition.array
- source: )
  scopesEnd:
    - punctuation.definition.array
- source: ((
  scopesBegin:
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic.double
- source: _remind_num
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ))
  scopes:
    - punctuation.section.arithmetic.double
  scopesEnd:
    - meta.statement
    - meta.arithmetic
- source: remind
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' (( arithmetic expression ))'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: ((
  scopesBegin:
    - meta.statement
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic.double
- source: _remind_num
  scopes:
    - variable.other.normal
- source: '>'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ))
  scopes:
    - punctuation.section.arithmetic.double
  scopesEnd:
    - meta.statement
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: header
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Reminders
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: line
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: _reminders
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: line
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.pipe
- source: headless
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: line
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: read
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: r
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: p
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Press enter/return to acknowledge.
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $'
  scopesBegin:
    - meta.argument
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: '\033[A\33[2K'
- source: \r
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single.dollar
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: reminder
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: label
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: BLUE
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '[ %d ]'
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: ESC
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: _remind_num
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: _reminders
  scopes:
    - variable.other.assignment
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: (
  scopes:
    - punctuation.definition.array
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: label
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.array
  scopesEnd:
    - meta.statement
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '*'
  scopes:
    - variable.language.special
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: read
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: r
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: line
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: _reminders
  scopesBegin:
    - meta.statement
  scopes:
    - variable.other.assignment
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: (
  scopes:
    - punctuation.definition.array
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: line
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.array
  scopesEnd:
    - meta.statement
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: else
  scopes:
    - keyword.control.else
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' this expands each arg to an array entry (and each entry will'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' ultimately be a separate line in the output)'
  scopesEnd:
    - comment.line.number-sign
- source: _reminders
  scopesBegin:
    - meta.statement
  scopes:
    - variable.other.assignment
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: (
  scopes:
    - punctuation.definition.array
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional.all
- source: '@'
  scopes:
    - variable.parameter.positional.all
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.array
  scopesEnd:
    - meta.statement
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: _reminders
  scopesBegin:
    - meta.statement
  scopes:
    - variable.other.assignment
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: (
  scopes:
    - punctuation.definition.array
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.array
- source: ((
  scopesBegin:
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic.double
- source: _remind_num
  scopes:
    - variable.other.normal
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: ))
  scopes:
    - punctuation.section.arithmetic.double
  scopesEnd:
    - meta.statement
    - meta.arithmetic
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: __sudo
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement
    - meta.expression.assignment.modified
  scopes:
    - storage.modifier.local
- source: expl
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: local
  scopes:
    - storage.modifier.local
- source: cmd
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment.modified
    - string.quoted.double
- source: shift
  scopesBegin:
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
  scopes:
    - support.function.builtin
- source: header
  scopesEnd:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: sudo execution
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: echo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'I am executing:'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: echo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: printf
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '    $ sudo %s'
- source: \\
  scopes:
    - constant.character.escape
- source: 'n'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cmd
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: echo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: echo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: expl
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: echo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: _sudo
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement
    - meta.expression.assignment.modified
  scopes:
    - storage.modifier.local
- source: expl
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment.modified
    - string.quoted.double
- source: shift
  scopes:
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
  scopesEnd:
    - meta.statement
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.pipe
- source: headless
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: is_root
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: __sudo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: expl
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '*'
  scopes:
    - variable.language.special
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '>&2'
  scopes:
    - keyword.operator.redirect
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: fi
  scopesBegin:
    - keyword.control
- source: if
  scopesEnd:
    - keyword.control
- source: is_root
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: env
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional.all
- source: '@'
  scopes:
    - variable.parameter.positional.all
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: sudo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional.all
- source: '@'
  scopes:
    - variable.parameter.positional.all
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Ensure that $TMPDIR exists if defined.'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: TMPDIR
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':-'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '!'
  scopesBegin:
    - keyword.operator.logical
- source: '-d'
  scopesEnd:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: TMPDIR
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':-'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: mkdir
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: m
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '0700'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.octal
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: p
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: TMPDIR
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':-'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: readonly
  scopesBegin:
    - meta.statement
    - meta.expression.assignment.modified
  scopes:
    - storage.modifier.readonly
- source: SCRATCH
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: mktemp
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: d
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.statement
    - meta.expression.assignment.modified
    - meta.scope.subshell
- source: finish_cleanup
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: rm
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: rf
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: SCRATCH
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: finish_fail
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: finish_cleanup
  scopesBegin:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: failure
  scopesEnd:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '<<'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.heredoc
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
- source: 'Oh no, something went wrong. If you can take all the output and open'
  scopesBegin:
    - string.unquoted.heredoc.no-indent
- source: 'an issue, we''d love to fix the problem so nobody else has this issue.'
- source: ':('
  scopesEnd:
    - string.unquoted.heredoc.no-indent
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: trap
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: finish_fail
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: EXIT
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: finish_success
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: ok
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Alright! We're done!
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: cat
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '<<'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.heredoc
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
- source: 'Try it! Open a new terminal, and type:'
  scopesBegin:
    - string.unquoted.heredoc.no-indent
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: poly_8_extra_try_me_commands
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '  $ nix-shell -p nix-info --run "nix-info -m"'
- source: Thank you for using this installer. If you have any feedback or need
- source: 'help, don''t hesitate:'
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: contact_us
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - string.unquoted.heredoc.no-indent
    - meta.scope.subshell
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
  scopesEnd:
    - meta.argument
- source: remind
  scopesBegin:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: finish_cleanup
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: finish_uninstall_success
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: ok
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Alright! Nix should be removed!
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: cat
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '<<'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.heredoc
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
- source: 'If you spot anything this uninstaller missed or have feedback,'
  scopesBegin:
    - string.unquoted.heredoc.no-indent
- source: 'don''t hesitate:'
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: contact_us
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - string.unquoted.heredoc.no-indent
    - meta.scope.subshell
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
  scopesEnd:
    - meta.argument
- source: remind
  scopesBegin:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: finish_cleanup
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: remove_nix_artifacts
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: failure
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Not implemented yet
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' artifact-checking helpers'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: nixenv_command_doesnt_exist_check
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' checks run, before full explaination/warnings are generated'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: type
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: nix-env
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
- source: '>&2'
  scopes:
    - keyword.operator.redirect
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: failed_check
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: nix-env command already exists
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: passed_check
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: no previous nix-env found
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: nixenv_command_exists_error
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
  scopes:
    - support.function.builtin
- source: error
  scopesEnd:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '<<'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.heredoc
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
- source: Nix already appears to be installed. This installer may run into issues.
  scopesBegin:
    - string.unquoted.heredoc.no-indent
- source: 'If an error occurs, try manually uninstalling, then rerunning this script.'
  scopesEnd:
    - string.unquoted.heredoc.no-indent
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: backup_profiles_dont_exist_check
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: at_least_one_failed
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'false'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: profile_target
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: PROFILE_TARGETS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' TODO: I think it would be good to accumulate a list of all'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '       of the copies so that people don''t hit this 2 or 3x in'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '       a row for different files.'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-e'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_target
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PROFILE_BACKUP_SUFFIX
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' this backup process first released in Nix 2.1'
  scopesEnd:
    - comment.line.number-sign
- source: at_least_one_failed
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'true'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: failed_check
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_target
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PROFILE_BACKUP_SUFFIX
  scopes:
    - variable.other.normal
- source: ' already exists'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: passed_check
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_target
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PROFILE_BACKUP_SUFFIX
  scopes:
    - variable.other.normal
- source: ' does not exist yet'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: at_least_one_failed
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'true'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: then
  scopes:
    - keyword.control.then
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: backup_profiles_error
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: echo
  scopesBegin:
    - meta.statement
  scopes:
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: profiles
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: profile_backups
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: profile_target
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: PROFILE_TARGETS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-e'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_target
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PROFILE_BACKUP_SUFFIX
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: profiles
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profiles
  scopes:
    - variable.other.normal
- source: ', '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_target
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: profile_backups
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_backups
  scopes:
    - variable.other.normal
- source: ', '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_target
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PROFILE_BACKUP_SUFFIX
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: error
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '<<'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.heredoc
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
- source: I back up shell profile/rc scripts before I add Nix to them.
  scopesBegin:
    - string.unquoted.heredoc.no-indent
- source: 'I need to back up each of these profiles: '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profiles
  scopes:
    - variable.other.normal
- source: 'To their respective backups: '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_backups
  scopes:
    - variable.other.normal
- source: But those backup files already exist.
- source: 'Here''s how to clean up the old backup files:'
- source: >-
    1. Open each of these profiles, and look for something similar to the
    following
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: shell_source_lines
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '2. Remove those lines that mention Nix, and save the file'
- source: '3. Move these backup files to a new location: '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_backups
  scopes:
    - variable.other.normal
- source: (ideally a location you will remember encase you need to rollback to them)
  scopesEnd:
    - string.unquoted.heredoc.no-indent
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: validate_starting_assumptions
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: task
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Checking for artifacts of previous installs
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: cat
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '<<'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.heredoc
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
- source: 'Before I try to install, I''ll check for signs Nix already is or has'
  scopesBegin:
    - string.unquoted.heredoc.no-indent
- source: been installed on this system.
  scopesEnd:
    - string.unquoted.heredoc.no-indent
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.pipe
- source: poly_3_check_for_leftover_artifacts
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: warningheader
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Leftovers From Previous Install Detected
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: echo
  scopesBegin:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: echo
- source: echo
  scopesEnd:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '    Please remove the leftovers (instructions above)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: echo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '    The instructions are customized your specific leftovers/system'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: echo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '    Detailed instructions can be found at:'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: is_os_linux
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '        https://nixos.org/manual/nix/stable/installation/installing-binary.html#linux'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: elif
  scopes:
    - keyword.control.elif
- source: is_os_darwin
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '        https://nixos.org/manual/nix/stable/installation/installing-binary.html#macos'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '        https://nixos.org/manual/nix/stable/installation/installing-binary.html'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: ui_confirm
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: Understood?
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Presumably most people will attempt to manually remove leftovers before even getting to the un_confirm below'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' (which is intentional)'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: ui_confirm
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Are you interested in a UNSAFE automatic purge of leftovers?
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' 2nd check is not only for humans, but also so that the no-tty-scenario doesnt trigger a purge'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' maybe in the future when the agressive purge is throughly tested, it will make sense to have it as the default no-tty behavior'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.pipe
- source: ui_confirm
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Opposite-question check: do you want only safe operations to be completed'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: poly_4_agressive_remove_artifacts
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' even if removal is successful, re-run the script so that ENV vars are refreshed with the changes'
  scopesEnd:
    - comment.line.number-sign
- source: failure
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Please re-run script so the purge will take effect
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: failure
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: >-
    Because the automated-purge is considered unsafe, please follow the
    instructions above and re-run this script
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: else
  scopes:
    - keyword.control.else
- source: failure
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Please re-run script after leftovers have manually been purged
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: poly_5_assumption_validation
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' TODO: I think it would be good for this step to accumulate more'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '       knowledge of older obsolete artifacts, if there are any.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '       We could issue a "reminder" here that the user might want'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '       to clean them up?'
  scopesEnd:
    - comment.line.number-sign
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: setup_report
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: header
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Nix config report
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: row
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '        Temp Dir'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: SCRATCH
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: row
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '        Nix Root'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_ROOT
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: row
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '     Build Users'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_USER_COUNT
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: row
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '  Build Group ID'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_BUILD_GROUP_ID
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: row
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Build Group Name
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_BUILD_GROUP_NAME
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: ALLOW_PREEXISTING_INSTALLATION
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':-'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: row
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Preexisting Install
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: Allowed
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: subheader
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'build users:'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: row
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '    Username'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: UID
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: i
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: seq
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '1'
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_USER_COUNT
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: row
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: nix_user_for_core
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: nix_uid_for_core
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: create_build_group
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement
    - meta.expression.assignment.modified
  scopes:
    - storage.modifier.local
- source: primary_group_id
  scopes:
    - variable.other.assignment
  scopesEnd:
    - meta.statement
    - meta.expression.assignment.modified
- source: task
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Setting up the build group '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_BUILD_GROUP_NAME
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.pipe
- source: poly_group_exists
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_BUILD_GROUP_NAME
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: poly_create_build_group
  scopesBegin:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: row
  scopesEnd:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '            Created'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: 'Yes'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: primary_group_id
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: poly_group_id_get
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_BUILD_GROUP_NAME
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - meta.scope.subshell
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: primary_group_id
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '-ne'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_BUILD_GROUP_ID
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: failure
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '<<'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.heredoc
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
- source: 'It seems the build group '
  scopesBegin:
    - string.unquoted.heredoc.no-indent
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_BUILD_GROUP_NAME
  scopes:
    - variable.other.normal
- source: ' already exists, but'
- source: 'with the UID '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: primary_group_id
  scopes:
    - variable.other.normal
- source: . This script can't really handle
- source: 'that right now, so I''m going to give up.'
- source: You can fix this by editing this script and changing the
- source: 'NIX_BUILD_GROUP_ID variable near the top to from '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_BUILD_GROUP_ID
  scopes:
    - variable.other.normal
- source: 'to '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: primary_group_id
  scopes:
    - variable.other.normal
- source: ' and re-run.'
  scopesEnd:
    - string.unquoted.heredoc.no-indent
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: else
  scopes:
    - keyword.control.else
- source: row
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '            Exists'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: 'Yes'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: create_build_user_for_core
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement
    - meta.expression.assignment.modified
  scopes:
    - storage.modifier.local
- source: coreid
  scopes:
    - variable.other.assignment
- source: local
  scopes:
    - storage.modifier.local
- source: username
  scopes:
    - variable.other.assignment
- source: local
  scopes:
    - storage.modifier.local
- source: uid
  scopes:
    - variable.other.assignment
  scopesEnd:
    - meta.statement
    - meta.expression.assignment.modified
- source: coreid
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: username
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: nix_user_for_core
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: coreid
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: uid
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: nix_uid_for_core
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: coreid
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.expression.assignment
    - meta.scope.subshell
- source: task
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Setting up the build user '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: username
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.pipe
- source: poly_user_exists
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: username
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: poly_create_build_user
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: username
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: uid
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: coreid
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: row
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '           Created'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: 'Yes'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: actual_uid
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: poly_user_id_get
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: username
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - meta.scope.subshell
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: actual_uid
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: uid
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: failure
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '<<'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.heredoc
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
- source: 'It seems the build user '
  scopesBegin:
    - string.unquoted.heredoc.no-indent
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: username
  scopes:
    - variable.other.normal
- source: ' already exists, but with the UID'
- source: with the UID '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: actual_uid
  scopes:
    - variable.other.normal
- source: '''. This script can''t really handle that right'
- source: 'now, so I''m going to give up.'
- source: If you already created the users and you know they start from
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: actual_uid
  scopes:
    - variable.other.normal
- source: ' and go up from there, you can edit this script and change'
- source: 'NIX_FIRST_BUILD_UID near the top of the file to '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: actual_uid
  scopes:
    - variable.other.normal
- source: ' and try'
- source: again.
  scopesEnd:
    - string.unquoted.heredoc.no-indent
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: else
  scopes:
    - keyword.control.else
- source: row
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '            Exists'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: 'Yes'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopesBegin:
    - keyword.control
- source: if
  scopesEnd:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: poly_user_hidden_get
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: username
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '1'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: row
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '            Hidden'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: 'Yes'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: poly_user_hidden_set
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: username
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: row
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '            Hidden'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: 'Yes'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopesBegin:
    - keyword.control
- source: if
  scopesEnd:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: poly_user_home_get
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: username
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: /var/empty
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: row
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '    Home Directory'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: /var/empty
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: poly_user_home_set
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: username
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: /var/empty
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: row
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '    Home Directory'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: /var/empty
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' We use grep instead of an equality check because it is difficult'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' to extract _just_ the user''s note, instead it is prefixed with'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' some plist junk. This was causing the user note to always be set,'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' even if there was no reason for it.'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.pipe
- source: poly_user_note_get
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: username
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: grep
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: q
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Nix build user '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: coreid
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: row
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '              Note'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: 'Nix build user '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: coreid
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: poly_user_note_set
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: username
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: 'Nix build user '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: coreid
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: row
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '              Note'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: 'Nix build user '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: coreid
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopesBegin:
    - keyword.control
- source: if
  scopesEnd:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: poly_user_shell_get
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: username
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: /sbin/nologin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: row
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '   Logins Disabled'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: 'Yes'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: poly_user_shell_set
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: username
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: /sbin/nologin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: row
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '   Logins Disabled'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: 'Yes'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopesBegin:
    - keyword.control
- source: if
  scopesEnd:
    - keyword.control
- source: poly_user_in_group_check
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: username
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_BUILD_GROUP_NAME
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: row
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '  Member of '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_BUILD_GROUP_NAME
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: 'Yes'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: poly_user_in_group_set
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: username
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_BUILD_GROUP_NAME
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: row
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '  Member of '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_BUILD_GROUP_NAME
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: 'Yes'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopesBegin:
    - keyword.control
- source: if
  scopesEnd:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: poly_user_primary_group_get
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: username
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_BUILD_GROUP_ID
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: row
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '    PrimaryGroupID'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_BUILD_GROUP_ID
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: poly_user_primary_group_set
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: username
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_BUILD_GROUP_ID
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: row
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '    PrimaryGroupID'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_BUILD_GROUP_ID
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: create_build_users
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: for
  scopesBegin:
    - meta.statement
  scopes:
    - keyword.control.for
- source: i
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: in
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: seq
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '1'
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_USER_COUNT
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - meta.scope.subshell
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: create_build_user_for_core
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: done
  scopes:
    - keyword.control.done
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: create_directories
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' FIXME: remove all of this because it duplicates LocalStore::LocalStore().'
  scopesEnd:
    - comment.line.number-sign
- source: task
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Setting up the basic directory structure
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-d'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_ROOT
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' if /nix already exists, take ownership'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' Caution: notes below are macOS-y'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' This is a bit of a goldilocks zone for taking ownership'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' if there are already files on the volume; the volume is'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' now mounted, but we haven''t added a bunch of new files'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' this is probably a bit slow; I''ve been seeing 3.3-4s even'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' when promptly installed over a fresh single-user install.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' In case anyone''s aware of a shortcut.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' `|| true`: .Trashes errors w/o full disk perm'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' rumor per #4488 that macOS 11.2 may not have'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' sbin on path, and that''s where chown is, but'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' since this bit is cross-platform:'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' - first try with `command -vp` to try and find'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '   chown in the usual places'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '   * to work around some sort of deficiency in'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     `command -p` in macOS bash 3.2, we also add'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     PATH="$(getconf PATH 2>/dev/null)". As long as'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     getconf is found, this should set a sane PATH'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     which `command -p` in bash 3.2 appears to use.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     A bash with a properly-working `command -p`'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     should ignore this hard-set PATH in favor of'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     whatever it obtains internally. See'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     github.com/NixOS/nix/issues/5768'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' - fall back on `command -v` which would find'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '   any chown on path'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' if we don''t find one, the command is already'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' hiding behind || true, and the general state'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' should be one the user can repair once they'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' figure out where chown is...'
  scopesEnd:
    - comment.line.number-sign
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement
    - meta.expression.assignment.modified
  scopes:
    - storage.modifier.local
- source: get_chr_own
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: PATH
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: getconf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: PATH
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: command
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: vp
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: chown
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement
    - meta.expression.assignment.modified
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-z'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: get_chr_own
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: get_chr_own
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: command
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: chown
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: fi
  scopesBegin:
    - keyword.control
- source: if
  scopesEnd:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-z'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: get_chr_own
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: reminder
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '<<'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.heredoc
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
- source: 'I wanted to take root ownership of existing Nix store files,'
  scopesBegin:
    - string.unquoted.heredoc.no-indent
- source: but I couldn't locate 'chown'. (You may need to fix your PATH.)
- source: 'To manually change file ownership, you can run:'
- source: '    sudo chown -R ''root:'
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_BUILD_GROUP_NAME
  scopes:
    - variable.other.normal
- source: ''' '''
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_ROOT
  scopes:
    - variable.other.normal
- source: ''''
  scopesEnd:
    - string.unquoted.heredoc.no-indent
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: else
  scopes:
    - keyword.control.else
- source: _sudo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: to take root ownership of existing Nix store files
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: get_chr_own
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: R
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'root:'
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_BUILD_GROUP_NAME
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_ROOT
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: 'true'
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: _sudo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: to make the basic directory structure of Nix (part 1)
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: install
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: dv
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: m
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '0755'
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
  scopes:
    - constant.numeric
    - constant.numeric.octal
- source: /nix
- source: /nix/var
- source: /nix/var/log
- source: /nix/var/log/nix
- source: /nix/var/log/nix/drvs
- source: '/nix/var/nix{,/db,/gcroots,/profiles,/temproots,/userpool,/daemon-socket}'
- source: '/nix/var/nix/{gcroots,profiles}/per-user'
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: _sudo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: to make the basic directory structure of Nix (part 2)
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: install
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: dv
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: g
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_BUILD_GROUP_NAME
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: m
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '1775'
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: /nix/store
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: _sudo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: to place the default nix daemon configuration (part 1)
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: install
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: dv
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: m
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '0555'
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
  scopes:
    - constant.numeric
    - constant.numeric.octal
- source: /etc/nix
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: place_channel_configuration
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.statement
  scopes:
    - keyword.control.if
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-z'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: NIX_INSTALLER_NO_CHANNEL_ADD
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':-'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'https://nixos.org/channels/nixpkgs-unstable nixpkgs'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: SCRATCH
  scopes:
    - variable.other.normal
- source: /.nix-channels
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: _sudo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: to set up the default system channel (part 1)
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: install
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: m
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '0664'
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.octal
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: SCRATCH
  scopes:
    - variable.other.normal
- source: /.nix-channels
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: ROOT_HOME
  scopes:
    - variable.other.normal
- source: /.nix-channels
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control.fi
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: check_selinux
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.statement
  scopes:
    - keyword.control.if
- source: command
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: getenforce
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>&1'
  scopes:
    - keyword.operator.redirect
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: getenforce
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Enforcing
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: failure
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '<<'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.heredoc
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
- source: Nix does not work with selinux enabled yet!
  scopesBegin:
    - string.unquoted.heredoc.no-indent
- source: 'see https://github.com/NixOS/nix/issues/2374'
  scopesEnd:
    - string.unquoted.heredoc.no-indent
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopes:
    - keyword.control.fi
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: welcome_to_nix
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: ok
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Welcome to the Multi-User Nix Installation
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: cat
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '<<'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.heredoc
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
- source: This installation tool will set up your computer with the Nix package
  scopesBegin:
    - string.unquoted.heredoc.no-indent
- source: 'manager. This will happen in a few stages:'
- source: '1. Make sure your computer doesn''t already have Nix. If it does, I'
- source: '   will show you instructions on how to clean up your old install.'
- source: 2. Show you what I am going to install and where. Then I will ask
- source: '   if you are ready to continue.'
- source: 3. Create the system users and groups that the Nix daemon uses to run
- source: '   builds.'
- source: 4. Perform the basic installation of the Nix files daemon.
- source: '5. Configure your shell to import special Nix Profile files, so you'
- source: '   can use Nix.'
- source: 6. Start the Nix daemon.
  scopesEnd:
    - string.unquoted.heredoc.no-indent
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: ui_confirm
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Would you like to see a more detailed list of what I will do?
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: cat
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '<<'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.heredoc
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
- source: 'I will:'
  scopesBegin:
    - string.unquoted.heredoc.no-indent
- source: ' - make sure your computer doesn''t already have Nix files'
- source: '   (if it does, I will tell you how to clean them up.)'
- source: ' - create local users (see the list above for the users I''ll make)'
- source: ' - create a local group ('
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_BUILD_GROUP_NAME
  scopes:
    - variable.other.normal
- source: )
- source: ' - install Nix in to '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_ROOT
  scopes:
    - variable.other.normal
- source: ' - create a configuration file in /etc/nix'
- source: ' - set up the "default profile" by creating some Nix-related files in'
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: ROOT_HOME
  scopes:
    - variable.other.normal
  scopesEnd:
    - string.unquoted.heredoc.no-indent
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: profile_target
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: PROFILE_TARGETS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-e'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_target
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: cat
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '<<'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.heredoc
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
- source: ' - back up '
  scopesBegin:
    - string.unquoted.heredoc.no-indent
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_target
  scopes:
    - variable.other.normal
- source: ' to '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_target
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PROFILE_BACKUP_SUFFIX
  scopes:
    - variable.other.normal
- source: ' - update '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_target
  scopes:
    - variable.other.normal
- source: ' to include some Nix configuration'
  scopesEnd:
    - string.unquoted.heredoc.no-indent
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: poly_1_service_setup_note
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.pipe
- source: ui_confirm
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Ready to continue?
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: failure
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '<<'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.heredoc
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
- source: 'Okay, maybe you would like to talk to the team.'
  scopes:
    - string.unquoted.heredoc.no-indent
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: chat_about_sudo
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: header
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: let's talk about sudo
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: headless
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: cat
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '<<'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.heredoc
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
- source: 'This script is going to call sudo a lot. Normally, it would show you'
  scopesBegin:
    - string.unquoted.heredoc.no-indent
- source: 'exactly what commands it is running and why. However, the script is'
- source: 'run in a headless fashion, like this:'
- source: '  $ curl -L https://nixos.org/nix/install | sh'
- source: 'or maybe in a CI pipeline. Because of that, I''m going to skip the'
- source: verbose output in the interest of brevity.
- source: If you would like to
- source: 'see the output, try like this:'
- source: '  $ curl -L -o install-nix https://nixos.org/nix/install'
- source: '  $ sh ./install-nix'
  scopesEnd:
    - string.unquoted.heredoc.no-indent
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
  scopesEnd:
    - meta.argument
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: cat
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '<<'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.heredoc
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
- source: 'This script is going to call sudo a lot. Every time I do, it''ll'
  scopesBegin:
    - string.unquoted.heredoc.no-indent
- source: 'output exactly what it''ll do, and why.'
- source: 'Just like this:'
  scopesEnd:
    - string.unquoted.heredoc.no-indent
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
  scopesEnd:
    - meta.argument
- source: __sudo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: to demonstrate how our sudo prompts look
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: echo
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: this is a sudo prompt
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: cat
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '<<'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.heredoc
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
- source: 'This might look scary, but everything can be undone by running just a'
  scopesBegin:
    - string.unquoted.heredoc.no-indent
- source: 'few commands. I used to ask you to confirm each time sudo ran, but it'
- source: 'was too many times. Instead, I''ll just ask you this one time:'
  scopesEnd:
    - string.unquoted.heredoc.no-indent
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: ui_confirm
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Can I use sudo?
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: ok
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Yay! Thanks! Let's get going!
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: failure
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '<<'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.heredoc
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
- source: 'That is okay, but I can''t install.'
  scopes:
    - string.unquoted.heredoc.no-indent
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: install_from_extracted_nix
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: task
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Installing Nix
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: (
  scopesBegin:
    - meta.parenthese.group
  scopes:
    - punctuation.section.parenthese
- source: cd
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: EXTRACTED_NIX_PATH
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: _sudo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'to copy the basic Nix files to the new store at '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_ROOT
  scopes:
    - variable.other.normal
- source: /store
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: cp
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: RPp
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ./store/
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: '*'
  scopes:
    - variable.language.special.wildcard
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_ROOT
  scopes:
    - variable.other.normal
- source: /store/
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: _sudo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'to make the new store non-writable at '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_ROOT
  scopes:
    - variable.other.normal
- source: /store
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: chmod
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: R
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ugo-w
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_ROOT
  scopes:
    - variable.other.normal
- source: /store/
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-d'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_INSTALLED_NIX
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '      Alright! We have our first nix at '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_INSTALLED_NIX
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: failure
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '<<'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.heredoc
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
- source: 'Something went wrong, and I didn''t find Nix installed at'
  scopesBegin:
    - string.unquoted.heredoc.no-indent
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_INSTALLED_NIX
  scopes:
    - variable.other.normal
- source: .
  scopesEnd:
    - string.unquoted.heredoc.no-indent
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: _sudo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: to load data for the first time in to the Nix Database
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: HOME=
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: ROOT_HOME
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_INSTALLED_NIX
  scopes:
    - variable.other.normal
- source: /bin/nix-store
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-load-db'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: <
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.redirect
- source: ./.reginfo
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: echo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '      Just finished getting the nix database ready.'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parenthese
  scopesEnd:
    - meta.statement
    - meta.parenthese.group
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: shell_source_lines
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: cat
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '<<'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.heredoc
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
- source: $
  scopesBegin:
    - string.unquoted.heredoc.no-indent
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PROFILE_NIX_START_DELIMETER
  scopes:
    - variable.other.normal
- source: 'if [ -e '''
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PROFILE_NIX_FILE
  scopes:
    - variable.other.normal
- source: ''' ]; then'
- source: '  . '''
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PROFILE_NIX_FILE
  scopes:
    - variable.other.normal
- source: ''''
- source: fi
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PROFILE_NIX_END_DELIMETER
  scopes:
    - variable.other.normal
  scopesEnd:
    - string.unquoted.heredoc.no-indent
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Fish has differing syntax'
  scopesEnd:
    - comment.line.number-sign
- source: fish_source_lines
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: cat
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '<<'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.heredoc
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
- source: $
  scopesBegin:
    - string.unquoted.heredoc.no-indent
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PROFILE_NIX_START_DELIMETER
  scopes:
    - variable.other.normal
- source: if test -e '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PROFILE_NIX_FILE_FISH
  scopes:
    - variable.other.normal
- source: ''''
- source: '  . '''
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PROFILE_NIX_FILE_FISH
  scopes:
    - variable.other.normal
- source: ''''
- source: end
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PROFILE_NIX_END_DELIMETER
  scopes:
    - variable.other.normal
  scopesEnd:
    - string.unquoted.heredoc.no-indent
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: configure_shell_profile
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: task
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Setting up shell profiles: '
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: PROFILE_TARGETS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '*'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: profile_target
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: PROFILE_TARGETS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-e'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_target
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: _sudo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'to back up your current '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_target
  scopes:
    - variable.other.normal
- source: ' to '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_target
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PROFILE_BACKUP_SUFFIX
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: cp
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_target
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_target
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PROFILE_BACKUP_SUFFIX
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' try to create the file if its directory exists'
  scopesEnd:
    - comment.line.number-sign
- source: target_dir
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: dirname
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_target
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-d'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: target_dir
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: _sudo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'to create a stub '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_target
  scopes:
    - variable.other.normal
- source: ' which will be updated'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: touch
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_target
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopesBegin:
    - keyword.control
- source: if
  scopesEnd:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-e'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_target
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: shell_source_lines
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: \
  scopes:
    - meta.argument
    - constant.character.escape.line-continuation
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: _sudo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'extend your '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_target
  scopes:
    - variable.other.normal
- source: ' with nix-daemon settings'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: tee
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: a
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_target
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: task
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Setting up shell profiles for Fish with with '
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: PROFILE_FISH_SUFFIX
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ' inside '
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: PROFILE_FISH_PREFIXES
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '*'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: fish_prefix
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: PROFILE_FISH_PREFIXES
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '!'
  scopesBegin:
    - keyword.operator.logical
- source: '-d'
  scopesEnd:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: fish_prefix
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' this specific prefix (ie: /etc/fish) is very likely to exist'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' if Fish is installed with this sysconfdir.'
  scopesEnd:
    - comment.line.number-sign
- source: continue
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.continue
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: profile_target
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: fish_prefix
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: /
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: PROFILE_FISH_SUFFIX
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: conf_dir
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: dirname
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_target
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - meta.scope.subshell
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '!'
  scopesBegin:
    - keyword.operator.logical
- source: '-d'
  scopesEnd:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: conf_dir
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: _sudo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'create '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: conf_dir
  scopes:
    - variable.other.normal
- source: ' for our Fish hook'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: mkdir
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: conf_dir
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fish_source_lines
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: \
  scopes:
    - meta.argument
    - constant.character.escape.line-continuation
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: _sudo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'write nix-daemon settings to '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_target
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: tee
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_target
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' TODO: should we suggest ''. $PROFILE_NIX_FILE''? It would get them on'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' their way less disruptively, but a counter-argument is that they won''t'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' immediately notice if something didn''t get set up right?'
  scopesEnd:
    - comment.line.number-sign
- source: reminder
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Nix won't work in active shell sessions until you restart them.
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: cert_in_store
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' in a subshell'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' - change into the cert-file dir'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' - get the phyiscal pwd'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' and test if this path is in the Nix store'
  scopesEnd:
    - comment.line.number-sign
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: cd
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: dirname
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_SSL_CERT_FILE
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: exec
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: pwd
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_ROOT
  scopes:
    - variable.other.normal
- source: /store/
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: setup_default_profile
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: task
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Setting up the default profile
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: _sudo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: to install a bootstrapping Nix in to the default profile
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: HOME=
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: ROOT_HOME
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_INSTALLED_NIX
  scopes:
    - variable.other.normal
- source: /bin/nix-env
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: i
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_INSTALLED_NIX
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-z'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: NIX_SSL_CERT_FILE
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':-'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: '!'
  scopesBegin:
    - meta.statement
  scopes:
    - keyword.operator.pipe
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-f'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: NIX_SSL_CERT_FILE
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':-'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: cert_in_store
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: _sudo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: >-
    to install a bootstrapping SSL certificate just for Nix in to the default
    profile
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: HOME=
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: ROOT_HOME
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_INSTALLED_NIX
  scopes:
    - variable.other.normal
- source: /bin/nix-env
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: i
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_INSTALLED_CACERT
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: export
  scopesBegin:
    - meta.statement
    - meta.expression.assignment.modified
  scopes:
    - storage.modifier.export
- source: NIX_SSL_CERT_FILE
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: /
- source: nix
  scopes:
    - variable.other.assignment
- source: /
- source: var
  scopes:
    - variable.other.assignment
- source: /
- source: nix
  scopes:
    - variable.other.assignment
- source: /
- source: profiles
  scopes:
    - variable.other.assignment
- source: /
- source: default
  scopes:
    - variable.other.assignment
- source: /
- source: etc
  scopes:
    - variable.other.assignment
- source: /
- source: ssl
  scopes:
    - variable.other.assignment
- source: /
- source: certs
  scopes:
    - variable.other.assignment
- source: /
- source: ca-bundle
  scopes:
    - variable.other.assignment
- source: .
- source: crt
  scopes:
    - variable.other.assignment
  scopesEnd:
    - meta.statement
    - meta.statement
    - meta.expression.assignment.modified
- source: fi
  scopesBegin:
    - keyword.control
- source: if
  scopesEnd:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-z'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: NIX_INSTALLER_NO_CHANNEL_ADD
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':-'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Have to explicitly pass NIX_SSL_CERT_FILE as part of the sudo call,'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' otherwise it will be lost in environments where sudo doesn''t pass'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' all the environment variables by default.'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.pipe
- source: _sudo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: to update the default channel in the default profile
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: HOME=
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: ROOT_HOME
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: NIX_SSL_CERT_FILE=
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_SSL_CERT_FILE
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_INSTALLED_NIX
  scopes:
    - variable.other.normal
- source: /bin/nix-channel
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-update'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: nixpkgs
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: reminder
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '<<'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.heredoc
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
- source: I had trouble fetching the nixpkgs channel (are you offline?)
  scopesBegin:
    - string.unquoted.heredoc.no-indent
- source: 'To try again later, run: sudo -i nix-channel --update nixpkgs'
  scopesEnd:
    - string.unquoted.heredoc.no-indent
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: unsetup_profiles
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: extract_nix_profile_injection
  scopesBegin:
    - meta.statement
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: profile
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: start_line_number
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: cat
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: grep
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: 'n'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PROFILE_NIX_START_DELIMETER
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: $
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: cut
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f1
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: 'd:'
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: head
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: n1
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: end_line_number
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: cat
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: grep
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: 'n'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PROFILE_NIX_END_DELIMETER
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: $
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: cut
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f1
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: 'd:'
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: head
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: n1
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: start_line_number
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: end_line_number
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: start_line_number
  scopes:
    - variable.other.normal
- source: '-gt'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: end_line_number
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: line_number_before
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: (
  scopesBegin:
    - meta.parenthese.group
  scopes:
    - punctuation.section.parenthese
- source: $
  scopesBegin:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: start_line_number
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement.command.name
- source: '-'
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: '1'
  scopes:
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: )
  scopes:
    - punctuation.section.parenthese
  scopesEnd:
    - meta.parenthese.group
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: line_number_after
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: (
  scopesBegin:
    - meta.parenthese.group
  scopes:
    - punctuation.section.parenthese
- source: $
  scopesBegin:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: end_line_number
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement.command.name
- source: +
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: '1'
  scopes:
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: )
  scopes:
    - punctuation.section.parenthese
  scopesEnd:
    - meta.parenthese.group
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: new_top_half
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: head
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: 'n'
  scopesBegin:
    - constant.other.option
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: line_number_before
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
    - constant.other.option
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: new_profile
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: new_top_half
  scopes:
    - variable.other.normal
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: tail
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: 'n'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: +
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: line_number_after
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' overwrite existing profile, but with only Nix removed'
  scopesEnd:
    - comment.line.number-sign
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: new_profile
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: _sudo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: tee
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '1'
  scopes:
    - keyword.operator.redirect.stdout
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: else
  scopes:
    - keyword.control.else
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Something is really messed up with your '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile
  scopes:
    - variable.other.normal
- source: ' file'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: echo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: I think you need to manually edit it to remove everything related to Nix
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: elif
  scopes:
    - keyword.control.elif
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: start_line_number
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: end_line_number
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopesBegin:
    - keyword.control.then
- source: then
  scopesEnd:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Something is really messed up with your '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile
  scopes:
    - variable.other.normal
- source: ' file'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: echo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: I think you need to manually edit it to remove everything related to Nix
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.statement
    - meta.function
    - meta.function.body
- source: restore_profile
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: profile
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' check if file exists'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-f'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: then
  scopes:
    - keyword.control.then
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: extract_nix_profile_injection
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' the extraction is done in-place. So if successful, remove the backup'
  scopesEnd:
    - comment.line.number-sign
- source: _sudo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: rm
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile
  scopes:
    - variable.other.normal
- source: .backup-before-nix
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: profile_target
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: PROFILE_TARGETS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: restore_profile
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: profile_target
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: place_nix_configuration
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: cat
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '<<'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.heredoc
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: '"'
  scopesBegin:
    - meta.statement.command
    - meta.statement.command.name
  scopes:
    - meta.statement.command.name.quoted
    - string.quoted.double
    - punctuation.definition.string.begin
    - entity.name.function.call
    - entity.name.command
- source: $
  scopesBegin:
    - meta.statement.command.name.continuation
    - string.quoted.double
    - entity.name.function.call
    - entity.name.command
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: SCRATCH
  scopes:
    - variable.other.normal
- source: /nix.conf
  scopesEnd:
    - meta.statement.command.name.continuation
    - string.quoted.double
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopes:
    - string.quoted.double
    - punctuation.definition.string.end
    - entity.name.function.call
    - entity.name.command
  scopesEnd:
    - meta.statement.command
    - meta.statement.command.name
- source: $
  scopesBegin:
    - string.unquoted.heredoc.no-indent
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_EXTRA_CONF
  scopes:
    - variable.other.normal
- source: 'build-users-group = '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: NIX_BUILD_GROUP_NAME
  scopes:
    - variable.other.normal
  scopesEnd:
    - string.unquoted.heredoc.no-indent
- source: EOF
  scopes:
    - punctuation.definition.string.heredoc
  scopesEnd:
    - meta.argument
- source: _sudo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: to place the default nix daemon configuration (part 2)
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: install
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: m
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '0664'
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.octal
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: SCRATCH
  scopes:
    - variable.other.normal
- source: /nix.conf
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: /etc/nix/nix.conf
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: main
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: check_selinux
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: is_os_darwin
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' shellcheck source=./install-darwin-multi-user.sh'
  scopesEnd:
    - comment.line.number-sign
- source: .
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: EXTRACTED_NIX_PATH
  scopes:
    - variable.other.normal
- source: /install-darwin-multi-user.sh
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: elif
  scopes:
    - keyword.control.elif
- source: is_os_linux
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' shellcheck source=./install-systemd-multi-user.sh'
  scopesEnd:
    - comment.line.number-sign
- source: .
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: EXTRACTED_NIX_PATH
  scopes:
    - variable.other.normal
- source: /install-systemd-multi-user.sh
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' most of this works on non-systemd distros also'
  scopesEnd:
    - comment.line.number-sign
- source: else
  scopes:
    - keyword.control.else
- source: failure
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Sorry, I don''t know what to do on '
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: uname
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: welcome_to_nix
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.pipe
- source: is_root
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: chat_about_sudo
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: poly_2_passive_remove_artifacts
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' TODO: there''s a tension between cure and validate. I moved the'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' the sudo/root check out of validate to the head of this func.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Cure is *intended* to subsume the validate-and-abort approach,'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' so it may eventually obsolete it.'
  scopesEnd:
    - comment.line.number-sign
- source: validate_starting_assumptions
  scopesBegin:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: setup_report
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.pipe
- source: ui_confirm
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Ready to continue?
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: ok
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Alright, no changes have been made :)'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: get_help
  scopesBegin:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: trap
  scopes:
    - support.function.builtin
  scopesEnd:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: finish_cleanup
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: EXIT
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: exit
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: poly_6_prepare_to_install
  scopesBegin:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: create_build_group
- source: create_build_users
- source: create_directories
- source: place_channel_configuration
- source: install_from_extracted_nix
- source: configure_shell_profile
- source: set
  scopes:
    - support.function.builtin
  scopesEnd:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: +eu
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' shellcheck disable=SC1091'
  scopesEnd:
    - comment.line.number-sign
- source: .
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: /etc/profile
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: set
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: eu
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: setup_default_profile
  scopesBegin:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: place_nix_configuration
- source: poly_7_configure_nix_daemon_service
- source: trap
  scopes:
    - support.function.builtin
  scopesEnd:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: finish_success
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: EXIT
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' set an empty initial arg for bare invocations in case we need to'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' disambiguate someone directly invoking this later.'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '@'
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: set
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' ACTION for override'
  scopesEnd:
    - comment.line.number-sign
- source: case
  scopesBegin:
    - meta.case
  scopes:
    - keyword.control.case
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: '-'
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: in
  scopes:
    - keyword.control.in
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' uninstall)'
  scopesEnd:
    - comment.line.number-sign
- source: '#'
  scopesBegin:
    - meta.case.entry.body
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: '     shift'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     uninstall "$@";;'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' install == same as the no-arg condition for now (but, explicit)'
  scopesEnd:
    - comment.line.number-sign
- source: '"'
  scopesBegin:
    - meta.statement.command
    - meta.statement.command.name
  scopes:
    - meta.statement.command.name.quoted
    - string.quoted.double
    - punctuation.definition.string.begin
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopes:
    - string.quoted.double
    - punctuation.definition.string.end
    - entity.name.function.call
    - entity.name.command
  scopesEnd:
    - meta.statement.command
    - meta.statement.command.name
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: install
  scopes:
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
- source: main
  scopes:
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ;;
  scopes:
    - punctuation.terminator.statement.case
  scopesEnd:
    - meta.case.entry.body
- source: '*)'
  scopes:
    - keyword.operator.pattern.case.default
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' holding space for future options (like uninstall + install?)'
  scopesEnd:
    - comment.line.number-sign
- source: failure
  scopesBegin:
    - meta.case.entry.body
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'install-multi-user: invalid argument'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: ;;
  scopes:
    - punctuation.terminator.statement.case
  scopesEnd:
    - meta.case.entry.body
- source: esac
  scopes:
    - keyword.control.esac
