- source: '#!'
  scopesBegin:
    - comment.line.number-sign
    - meta.shebang
  scopes:
    - punctuation.definition.comment.shebang
- source: /usr/bin/env sh
  scopesEnd:
    - meta.shebang
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' works:'
  scopesEnd:
    - comment.line.number-sign
- source: a
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '-'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: +
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '-'
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '-'
  scopes:
    - variable.language.special
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.parameter-expansion
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '1'
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '`'
  scopesBegin:
    - string.interpolated.backtick
  scopes:
    - punctuation.definition.evaluation.backticks
- source: mpp
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '`'
  scopes:
    - punctuation.definition.evaluation.backticks
  scopesEnd:
    - string.interpolated.backtick
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' works:'
  scopesEnd:
    - comment.line.number-sign
- source: date
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: a
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '-'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: +
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '-'
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '-'
  scopes:
    - variable.language.special
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.parameter-expansion
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: set
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: +x
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: a
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: set
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: x
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: else
  scopes:
    - keyword.control.else
- source: set
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: +x
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: fi
  scopesBegin:
    - keyword.control
- source: if
  scopesEnd:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: uname
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Darwin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: command
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: date
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: j
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional.all
- source: '@'
  scopes:
    - variable.parameter.positional.all
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: command
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: date
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional.all
- source: '@'
  scopes:
    - variable.parameter.positional.all
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: set
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: +x
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: a
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.argument
- source: unset
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: a
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' works:'
  scopesEnd:
    - comment.line.number-sign
- source: nulldef
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: date
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: a
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '-'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: +
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '-'
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '-'
  scopes:
    - variable.language.special
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.parameter-expansion
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: set
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: +x
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: a
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: set
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: x
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: else
  scopes:
    - keyword.control.else
- source: set
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: +x
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: fi
  scopesBegin:
    - keyword.control
- source: if
  scopesEnd:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: uname
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Darwin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: command
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: date
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: j
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional.all
- source: '@'
  scopes:
    - variable.parameter.positional.all
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: command
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: date
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional.all
- source: '@'
  scopes:
    - variable.parameter.positional.all
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: set
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: +x
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: a
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.argument
- source: unset
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: a
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' does not work:'
  scopesEnd:
    - comment.line.number-sign
- source: nulldef
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: date
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: a
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '-'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: +
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '-'
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '-'
  scopes:
    - variable.language.special
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.parameter-expansion
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: set
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: +x
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: a
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: set
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: x
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: else
  scopes:
    - keyword.control.else
- source: set
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: +x
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: fi
  scopesBegin:
    - keyword.control
- source: if
  scopesEnd:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell.single
- source: uname
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.subshell.single
  scopesEnd:
    - meta.scope.subshell
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Darwin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: command
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: date
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: j
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional.all
- source: '@'
  scopes:
    - variable.parameter.positional.all
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: command
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: date
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional.all
- source: '@'
  scopes:
    - variable.parameter.positional.all
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: set
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: +x
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: a
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.argument
- source: unset
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: a
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
