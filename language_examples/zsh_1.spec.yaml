- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: '   bash_completion - programmable completion functions for bash 3.2+'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '   Copyright © 2006-2008, Ian Macdonald <ian@caliban.org>'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '             © 2009-2011, Bash Completion Maintainers'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '                     <bash-completion-devel@lists.alioth.debian.org>'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '   This program is free software; you can redistribute it and/or modify'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '   it under the terms of the GNU General Public License as published by'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '   the Free Software Foundation; either version 2, or (at your option)'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '   any later version.'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '   This program is distributed in the hope that it will be useful,'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '   but WITHOUT ANY WARRANTY; without even the implied warranty of'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '   GNU General Public License for more details.'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '   You should have received a copy of the GNU General Public License'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '   along with this program; if not, write to the Free Software Foundation,'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '   The latest version of this software can be obtained here:'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '   http://bash-completion.alioth.debian.org/'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '   RELEASE: 1.3'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '-'
  scopes:
    - variable.language.special
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: v
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: BASH_COMPLETION_ORIGINAL_V_VALUE
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '-v'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: BASH_COMPLETION_ORIGINAL_V_VALUE
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: +v
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: fi
  scopesBegin:
    - keyword.control
- source: if
  scopesEnd:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_DEBUG
  scopes:
    - variable.other.normal
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: set
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: else
  scopes:
    - keyword.control.else
- source: set
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: +v
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Alter the following to reflect the location of this file.'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: BASH_COMPLETION
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: /usr/local/etc/bash_completion
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_DIR
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: BASH_COMPLETION_DIR
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: /usr/local/etc/bash_completion.d
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_COMPAT_DIR
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: BASH_COMPLETION_COMPAT_DIR
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: /usr/local/etc/bash_completion.d
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.expression.assignment
- source: readonly
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.readonly
- source: BASH_COMPLETION
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: BASH_COMPLETION_DIR
- source: BASH_COMPLETION_COMPAT_DIR
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Set a couple of useful vars'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: UNAME
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: uname
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: s
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' strip OS type and version under Cygwin (e.g. CYGWIN_NT-5.1 => Cygwin)'
  scopesEnd:
    - comment.line.number-sign
- source: UNAME
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: UNAME
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: /
  scopes:
    - keyword.operator.expansion
- source: CYGWIN_
  scopes:
    - variable.other.normal
- source: '*'
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: Cygwin
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: case
  scopesBegin:
    - meta.scope.case-block
  scopes:
    - keyword.control
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: UNAME
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: in
  scopesBegin:
    - meta.scope.case-body
  scopes:
    - keyword.control
- source: Linux
  scopesBegin:
    - meta.scope.case-clause
    - meta.scope.case-pattern
- source: '|'
  scopes:
    - punctuation.separator.pipe-sign
- source: GNU
- source: '|'
  scopes:
    - punctuation.separator.pipe-sign
- source: GNU/
- source: '*'
  scopes:
    - keyword.operator.glob
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' USERLAND=GNU '
  scopes:
    - meta.scope.case-clause-body
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: '*'
  scopesBegin:
    - meta.scope.case-pattern
  scopes:
    - keyword.operator.glob
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' USERLAND='
  scopesBegin:
    - meta.scope.case-clause-body
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: UNAME
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.scope.case-clause-body
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
  scopesEnd:
    - meta.scope.case-body
    - meta.scope.case-clause
- source: esac
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.case-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Turn on extended globbing and programmable completion'
  scopesEnd:
    - comment.line.number-sign
- source: shopt
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: s
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: extglob
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: progcomp
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' A lot of the following one-liners were taken directly from the'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' completion examples provided with the bash 2.04 source distribution'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Make directory commands see only directories'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: d
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: pushd
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' The following section lists completions that are redefined later'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Do NOT break these over multiple lines.'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' START exclude -- do NOT remove this line'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' bzcmp, bzdiff, bz*grep, bzless, bzmore intentionally not here, see Debian: #455510'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.?(t)bz?(2)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: bunzip2
  scopesBegin:
    - string.unquoted.argument
- source: bzcat
- source: pbunzip2
- source: pbzcat
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(zip|[ejw]ar|exe|pk3|wsz|zargo|xpi|sxw|o[tx]t|od[fgpst]|epub|apk)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: unzip
  scopesBegin:
    - string.unquoted.argument
- source: zipinfo
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '*.Z'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: compress
  scopesBegin:
    - string.unquoted.argument
- source: znew
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' zcmp, zdiff, z*grep, zless, zmore intentionally not here, see Debian: #455510'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(Z|[gGd]z|t[ag]z)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: gunzip
  scopesBegin:
    - string.unquoted.argument
- source: zcat
- source: unpigz
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.Z'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: uncompress
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' lzcmp, lzdiff intentionally not here, see Debian: #455510'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(tlz|lzma)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: lzcat
  scopesBegin:
    - string.unquoted.argument
- source: lzegrep
- source: lzfgrep
- source: lzgrep
- source: lzless
- source: lzmore
- source: unlzma
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(?(t)xz|tlz|lzma)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: unxz
  scopesBegin:
    - string.unquoted.argument
- source: xzcat
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.lrz'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: lrunzip
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(gif|jp?(e)g|miff|tif?(f)|pn[gm]|p[bgp]m|bmp|xpm|ico|xwd|tga|pcx)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ee
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(gif|jp?(e)g|tif?(f)|png|p[bgp]m|bmp|x[bp]m|rle|rgb|pcx|fits|pm)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: xv
  scopesBegin:
    - string.unquoted.argument
- source: qiv
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(@(?(e)ps|?(E)PS|pdf|PDF)?(.gz|.GZ|.bz2|.BZ2|.Z))'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: gv
  scopesBegin:
    - string.unquoted.argument
- source: ggv
- source: kghostview
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(dvi|DVI)?(.@(gz|Z|bz2))'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: xdvi
  scopesBegin:
    - string.unquoted.argument
- source: kdvi
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.dvi'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: dvips
  scopesBegin:
    - string.unquoted.argument
- source: dviselect
- source: dvitype
- source: dvipdf
- source: advi
- source: dvipdfm
- source: dvipdfmx
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.[pf]df'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: acroread
  scopesBegin:
    - string.unquoted.argument
- source: gpdf
- source: xpdf
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(?(e)ps|pdf)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: kpdf
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: >-
    !*.@(@(?(e)ps|?(E)PS|[pf]df|[PF]DF|dvi|DVI)?(.gz|.GZ|.bz2|.BZ2)|cb[rz]|djv?(u)|gif|jp?(e)g|miff|tif?(f)|pn[gm]|p[bgp]m|bmp|xpm|ico|xwd|tga|pcx|fdf)
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: evince
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: >-
    !*.@(okular|@(?(e|x)ps|?(E|X)PS|pdf|PDF|dvi|DVI|cb[rz]|CB[RZ]|djv?(u)|DJV?(U)|dvi|DVI|gif|jp?(e)g|miff|tif?(f)|pn[gm]|p[bgp]m|bmp|xpm|ico|xwd|tga|pcx|GIF|JP?(E)G|MIFF|TIF?(F)|PN[GM]|P[BGP]M|BMP|XPM|ICO|XWD|TGA|PCX|epub|EPUB|odt|ODT|fb?(2)|FB?(2)|mobi|MOBI|g3|G3|chm|CHM|fdf|FDF)?(.?(gz|GZ|bz2|BZ2)))
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: okular
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(?(e)ps|pdf)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ps2pdf
  scopesBegin:
    - string.unquoted.argument
- source: ps2pdf12
- source: ps2pdf13
- source: ps2pdf14
- source: ps2pdfwr
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.texi*'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: makeinfo
  scopesBegin:
    - string.unquoted.argument
- source: texi2html
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(?(la)tex|texi|dtx|ins|ltx)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: tex
  scopesBegin:
    - string.unquoted.argument
- source: latex
- source: slitex
- source: jadetex
- source: pdfjadetex
- source: pdftex
- source: pdflatex
- source: texi2dvi
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.mp3'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: mpg123
  scopesBegin:
    - string.unquoted.argument
- source: mpg321
- source: madplay
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: >-
    !*@(.@(mp?(e)g|MP?(E)G|wma|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|wmv|mp[234]|MP[234]|m4[pv]|M4[PV]|mkv|MKV|og[gmv]|OG[GMV]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM)|+([0-9]).@(vdr|VDR))?(.part)
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: xine
  scopesBegin:
    - string.unquoted.argument
- source: aaxine
- source: fbxine
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: >-
    !*@(.@(mp?(e)g|MP?(E)G|wma|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|wmv|mp[234]|MP[234]|m4[pv]|M4[PV]|mkv|MKV|og[gmv]|OG[GMV]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM|iso|ISO)|+([0-9]).@(vdr|VDR))?(.part)
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: kaffeine
  scopesBegin:
    - string.unquoted.argument
- source: dragon
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(avi|asf|wmv)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: aviplay
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(rm?(j)|ra?(m)|smi?(l))'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: realplay
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(mpg|mpeg|avi|mov|qt)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: xanim
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(ogg|m3u|flac|spx)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ogg123
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(mp3|ogg|pls|m3u)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: gqmpeg
  scopesBegin:
    - string.unquoted.argument
- source: freeamp
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.fig'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: xfig
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(mid?(i)|cmf)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: playmidi
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(mid?(i)|rmi|rcp|[gr]36|g18|mod|xm|it|x3m|s[3t]m|kar)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: timidity
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(m[eo]d|s[3t]m|xm|it)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: modplugplay
  scopesBegin:
    - string.unquoted.argument
- source: modplug123
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '*.@(o|so|so.!(conf)|a|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: vi
  scopesBegin:
    - string.unquoted.argument
- source: vim
- source: gvim
- source: rvim
- source: view
- source: rview
- source: rgvim
- source: rgview
- source: gview
- source: emacs
- source: xemacs
- source: sxemacs
- source: kate
- source: kwrite
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@([eE][xX][eE]?(.[sS][oO])|[cC][oO][mM]|[sS][cC][rR])'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: wine
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(zip|z|gz|tgz)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: bzme
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' konqueror not here on purpose, it''s more than a web/html browser'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: netscape
  scopesBegin:
    - string.unquoted.argument
- source: mozilla
- source: lynx
- source: opera
- source: galeon
- source: dillo
- source: elinks
- source: amaya
- source: firefox
- source: mozilla-firefox
- source: iceweasel
- source: google-chrome
- source: chromium-browser
- source: epiphany
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(sxw|stw|sxg|sgl|doc?([mx])|dot?([mx])|rtf|txt|htm|html|odt|ott|odm)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: oowriter
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(sxi|sti|pps?(x)|ppt?([mx])|pot?([mx])|odp|otp)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ooimpress
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(sxc|stc|xls?([bmx])|xlw|xlt?([mx])|[ct]sv|ods|ots)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: oocalc
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(sxd|std|sda|sdd|odg|otg)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: oodraw
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(sxm|smf|mml|odf)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: oomath
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.odb'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: oobase
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.[rs]pm'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: rpm2cpio
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.aux'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: bibtex
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.po'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: poedit
  scopesBegin:
    - string.unquoted.argument
- source: gtranslator
- source: kbabel
- source: lokalize
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@([Pp][Rr][Gg]|[Cc][Ll][Pp])'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: harbour
  scopesBegin:
    - string.unquoted.argument
- source: gharbour
- source: hbpp
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.[Hh][Rr][Bb]'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: hbrun
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.ly'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: lilypond
  scopesBegin:
    - string.unquoted.argument
- source: ly2dvi
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(dif?(f)|?(d)patch)?(.@([gx]z|bz2|lzma))'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: cdiff
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.lyx'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: lyx
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: >-
    !@(*.@(ks|jks|jceks|p12|pfx|bks|ubr|gkr|cer|crt|cert|p7b|pkipath|pem|p10|csr|crl)|cacerts)
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: portecle
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(mp[234c]|og[ag]|@(fl|a)ac|m4[abp]|spx|tta|w?(a)v|wma|aif?(f)|asf|ape)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: kid3
  scopesBegin:
    - string.unquoted.argument
- source: kid3-qt
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' FINISH exclude -- do not remove this line'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' start of section containing compspecs that can be handled within bash'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' user commands see only users'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: u
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: su
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: write
- source: chfn
- source: groups
- source: slay
- source: w
- source: sux
- source: runuser
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' bg completes with stopped jobs'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: A
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: stopped
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '"%'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: S
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '"'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: bg
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' other job commands'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: j
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '"%'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: S
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '"'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: fg
  scopesBegin:
    - string.unquoted.argument
- source: jobs
- source: disown
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' readonly and unset complete with shell variables'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: readonly
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: unset
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' set completes with set options'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: A
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: setopt
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: set
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' shopt completes with shopt options'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: A
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: shopt
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: shopt
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' helptopics'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: A
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: helptopic
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: help
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' unalias completes with aliases'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: a
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: unalias
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' bind completes with readline bindings (make this more intelligent)'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: A
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: binding
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: bind
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' type and which complete on commands'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: c
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: command
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: type
- source: which
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' builtin completes on builtins'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: b
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: builtin
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' start of section containing completion functions called by other functions'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' This function checks whether we have a given program on the system.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' No need for bulky functions in memory if we don''t.'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: have
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: unset
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: have
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Completions for system administrator commands are installed as well in'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' case completion is attempted via `sudo command ...''.'
  scopesEnd:
    - comment.line.number-sign
- source: PATH
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PATH
  scopes:
    - variable.other.normal
- source: ':/sbin:/usr/sbin:/usr/local/sbin'
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.expression.assignment
- source: type
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '&'
  scopes:
    - punctuation.separator.statement.background
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: '/dev/null '
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: have
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'yes'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function checks whether a given readline variable'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' is `on''.'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _rl_enabled
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: bind
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: +
  scopesBegin:
    - meta.structure.extglob
  scopes:
    - keyword.operator.extglob
- source: (
  scopes:
    - punctuation.definition.extglob
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: ':space:'
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: )
  scopes:
    - punctuation.definition.extglob
  scopesEnd:
    - meta.structure.extglob
- source: 'on'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function shell-quotes the argument'
  scopesEnd:
    - comment.line.number-sign
- source: quote
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: \'
  scopesBegin:
    - meta.argument
  scopes:
    - constant.character.escape
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: \'
  scopes:
    - constant.character.escape
- source: /
  scopes:
    - keyword.operator.expansion
- source: \'
  scopesBegin:
    - constant.character.escape
- source: \\
- source: \'
- source: \'
  scopesEnd:
    - meta.parameter-expansion
    - constant.character.escape
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: \'
  scopes:
    - constant.character.escape
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: '''# Help vim syntax highlighting'
  scopesEnd:
    - comment.line.number-sign
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' @see _quote_readline_by_ref()'
  scopesEnd:
    - comment.line.number-sign
- source: quote_readline
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: quoted
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: _quote_readline_by_ref
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ret
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: printf
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '%s'
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: ret
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' quote_readline()'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' This function shell-dequotes the argument'
  scopesEnd:
    - comment.line.number-sign
- source: dequote
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: echo
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Assign variable one scope above the caller'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Usage: local "$1" && _upvar $1 "value(s)"'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Param: $1  Variable name to assign value to'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Param: $*  Value(s) to assign.  If multiple values, an array is'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '            assigned, otherwise a single value is assigned.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' NOTE: For assigning multiple variables, use ''_upvars''.  Do NOT'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '       use multiple ''_upvar'' calls, since one ''_upvar'' call might'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '       reassign a variable to be used by another ''_upvar'' call.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' See: http://fvue.nl/wiki/Bash:_Passing_variables_by_reference'
  scopesEnd:
    - comment.line.number-sign
- source: _upvar
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: unset
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Unset & validate varname'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: ((
  scopesBegin:
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '#'
  scopes:
    - variable.language.special
- source: '=='
  scopes:
    - keyword.operator.arithmetic
- source: '2'
  scopes:
    - constant.numeric.integer
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '='
  scopes:
    - string.unquoted.argument
- source: \"
  scopesBegin:
    - constant.character.escape
- source: \$
  scopesEnd:
    - constant.character.escape
- source: '2'
  scopes:
    - string.unquoted.argument
- source: \"
  scopes:
    - constant.character.escape
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Return single value'
  scopesEnd:
    - comment.line.number-sign
- source: else
  scopes:
    - keyword.control.else
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '='
  scopes:
    - string.unquoted.argument
- source: \(
  scopesBegin:
    - constant.character.escape
- source: \"
- source: \$
  scopesEnd:
    - constant.character.escape
- source: '{@:2}'
  scopes:
    - string.unquoted.argument
- source: \"
  scopesBegin:
    - constant.character.escape
- source: \)
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - constant.character.escape
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Return array'
  scopesEnd:
    - comment.line.number-sign
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Assign variables one scope above the caller'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Usage: local varname [varname ...] && '
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '        _upvars [-v varname value] | [-aN varname [value ...]] ...'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Available OPTIONS:'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     -aN  Assign next N values to varname as array'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     -v   Assign single value to varname'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Return: 1 if error occurs'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' See: http://fvue.nl/wiki/Bash:_Passing_variables_by_reference'
  scopesEnd:
    - comment.line.number-sign
- source: _upvars
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.pipe
- source: ((
  scopesBegin:
    - meta.statement
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '#'
  scopes:
    - variable.language.special
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.statement
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: FUNCNAME
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ': usage: '
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: FUNCNAME
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ' [-v varname'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'value] | [-aN varname [value ...]] ...'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '1'
  scopes:
    - keyword.operator.redirect.stdout
- source: '>&2'
  scopes:
    - keyword.operator.redirect
  scopesEnd:
    - meta.argument
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '2'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: ((
  scopesBegin:
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '#'
  scopes:
    - variable.language.special
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: case
  scopesBegin:
    - meta.scope.case-block
  scopes:
    - keyword.control
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: in
  scopesBegin:
    - meta.scope.case-body
  scopes:
    - keyword.control
- source: '-a'
  scopesBegin:
    - meta.scope.case-clause
    - meta.scope.case-pattern
- source: '*'
  scopes:
    - keyword.operator.glob
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: '#'
  scopesBegin:
    - meta.scope.case-clause-body
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Error checking'
  scopesEnd:
    - comment.line.number-sign
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: '-a'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: '{'
  scopesBegin:
    - meta.scope.group
  scopes:
    - punctuation.definition.group
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'bash: '
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: FUNCNAME
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ': '
- source: \`
  scopes:
    - constant.character.escape
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: ''': missing'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number specifier
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '1'
  scopes:
    - keyword.operator.redirect.stdout
- source: '>&2'
  scopes:
    - keyword.operator.redirect
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: '}'
  scopes:
    - punctuation.definition.group
  scopesEnd:
    - meta.scope.group
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '%d'
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: '-a'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '&'
  scopes:
    - punctuation.separator.statement.background
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: ' /dev/null '
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: '{'
  scopesBegin:
    - meta.scope.group
  scopes:
    - punctuation.definition.group
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'bash:'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: FUNCNAME
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ': '
- source: \`
  scopes:
    - constant.character.escape
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: ''': invalid number specifier'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '1'
  scopes:
    - keyword.operator.redirect.stdout
- source: '>&2'
  scopes:
    - keyword.operator.redirect
  scopesEnd:
    - meta.argument
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: '}'
  scopes:
    - punctuation.definition.group
  scopesEnd:
    - meta.scope.group
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Assign array of -aN elements'
  scopesEnd:
    - comment.line.number-sign
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: unset
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '='
  scopes:
    - string.unquoted.argument
- source: \(
  scopesBegin:
    - constant.character.escape
- source: \"
- source: \$
  scopesEnd:
    - constant.character.escape
- source: '{@:3:'
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: '-a'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '}'
  scopes:
    - string.unquoted.argument
- source: \"
  scopesBegin:
    - constant.character.escape
- source: \)
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - constant.character.escape
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: shift
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $((
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.evaluation.arithmetic.begin
- source: $
  scopesBegin:
    - string.other.math
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: '-a'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '2'
  scopes:
    - constant.numeric.integer
  scopesEnd:
    - string.other.math
- source: ))
  scopes:
    - punctuation.definition.evaluation.arithmetic.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: '{'
  scopesBegin:
    - meta.scope.group
  scopes:
    - punctuation.definition.group
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'bash: '
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: FUNCNAME
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ':'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \`
  scopes:
    - constant.character.escape
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: '+ '
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: ''': missing argument(s)'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '1'
  scopes:
    - keyword.operator.redirect.stdout
- source: '>&2'
  scopes:
    - keyword.operator.redirect
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: '}'
  scopes:
    - punctuation.definition.group
  scopesEnd:
    - meta.scope.case-clause-body
    - meta.scope.group
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: '-v'
  scopesBegin:
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: '#'
  scopesBegin:
    - meta.scope.case-clause-body
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Assign single value'
  scopesEnd:
    - comment.line.number-sign
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: unset
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '='
  scopes:
    - string.unquoted.argument
- source: \"
  scopesBegin:
    - constant.character.escape
- source: \$
  scopesEnd:
    - constant.character.escape
- source: '3'
  scopes:
    - string.unquoted.argument
- source: \"
  scopes:
    - constant.character.escape
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: shift
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '3'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: '{'
  scopesBegin:
    - meta.scope.group
  scopes:
    - punctuation.definition.group
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'bash: '
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: FUNCNAME
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ': '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: ': missing'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: argument(s)
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '1'
  scopes:
    - keyword.operator.redirect.stdout
- source: '>&2'
  scopes:
    - keyword.operator.redirect
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: '}'
  scopes:
    - punctuation.definition.group
  scopesEnd:
    - meta.scope.case-clause-body
    - meta.scope.group
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: '*'
  scopesBegin:
    - meta.scope.case-pattern
  scopes:
    - keyword.operator.glob
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: echo
  scopesBegin:
    - meta.scope.case-clause-body
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'bash: '
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: FUNCNAME
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ': '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: ': invalid option'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '1'
  scopes:
    - keyword.operator.redirect.stdout
- source: '>&2'
  scopes:
    - keyword.operator.redirect
  scopesEnd:
    - meta.argument
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.scope.case-clause-body
    - meta.statement
    - meta.statement.command
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
  scopesEnd:
    - meta.scope.case-body
    - meta.scope.case-clause
- source: esac
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.case-block
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Reassemble command line words, excluding specified characters from the'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' list of word completion separators (COMP_WORDBREAKS).'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $1 chars  Characters out of $COMP_WORDBREAKS which should'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     NOT be considered word breaks. This is useful for things like scp where'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     we want to return host:path and not only path, so we would pass the'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     colon (:) as $1 here.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $2 words  Name of variable to return words to'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $3 cword  Name of variable to return cword to'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: __reassemble_comp_words_by_ref
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: exclude
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: i
- source: j
- source: ref
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Exclude word separator characters?'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Yes, exclude word separator characters;'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Exclude only those characters, which were really included'
  scopesEnd:
    - comment.line.number-sign
- source: exclude
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: '['
  scopes:
    - punctuation.section.array
- source: ^$COMP_WORDBREAKS
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Default to cword unchanged'
  scopesEnd:
    - comment.line.number-sign
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '3'
  scopes:
    - variable.parameter.positional
- source: '='
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: COMP_CWORD
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Are characters excluded which were former included?'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: exclude
  scopes:
    - variable.other.normal
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Yes, list of word completion separators has shrunk;'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Re-assemble words to complete'
  scopesEnd:
    - comment.line.number-sign
- source: for
  scopesBegin:
    - meta.scope.for-loop
  scopes:
    - keyword.control
- source: ((
  scopesBegin:
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: i
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.arithmetic
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - keyword.operator.arithmetic
- source: j
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.arithmetic
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: <
  scopes:
    - keyword.operator.arithmetic
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMP_WORDS
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: ++
  scopesBegin:
    - keyword.operator.arithmetic
- source: ','
  scopesEnd:
    - keyword.operator.arithmetic
- source: j
  scopes:
    - variable.other.normal
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Is current word not word 0 (the command itself) and is word not'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' empty and is word made up of just word separator characters to be'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' excluded?'
  scopesEnd:
    - comment.line.number-sign
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '-gt'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_WORDS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: $i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_WORDS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: $i
- source: ']'
  scopes:
    - punctuation.section.array
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: '['
  scopes:
    - punctuation.section.array
- source: ^$exclude
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '=='
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_WORDS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: $i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: j
  scopes:
    - variable.other.normal
- source: '-ge'
  scopes:
    - keyword.operator.logical
- source: '2'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: ((
  scopesBegin:
    - meta.statement
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: j
  scopes:
    - variable.other.normal
- source: '--'
  scopes:
    - keyword.operator.arithmetic
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.statement
    - meta.arithmetic
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Append word separator to current word'
  scopesEnd:
    - comment.line.number-sign
- source: ref
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '['
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: j
  scopes:
    - variable.other.normal
- source: ']'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: eval
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '['
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: j
  scopes:
    - variable.other.normal
- source: ']='
  scopes:
    - string.unquoted.argument
- source: \$
  scopes:
    - constant.character.escape
- source: '{!ref}'
  scopes:
    - string.unquoted.argument
- source: \$
  scopes:
    - constant.character.escape
- source: '{COMP_WORDS[i]}'
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Indicate new cword'
  scopesEnd:
    - comment.line.number-sign
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: COMP_CWORD
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '3'
  scopes:
    - variable.parameter.positional
- source: '='
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: j
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Indicate next word if available, else end *both* while and for loop'
  scopesEnd:
    - comment.line.number-sign
- source: ((
  scopesBegin:
    - meta.statement
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: <
  scopes:
    - keyword.operator.arithmetic
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMP_WORDS
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.statement
    - meta.arithmetic
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: ((
  scopesBegin:
    - meta.statement
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: i
  scopes:
    - variable.other.normal
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.statement
    - meta.arithmetic
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: break
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.break
- source: '2'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Append word to current word'
  scopesEnd:
    - comment.line.number-sign
- source: ref
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '['
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: j
  scopes:
    - variable.other.normal
- source: ']'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: eval
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '['
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: j
  scopes:
    - variable.other.normal
- source: ']='
  scopes:
    - string.unquoted.argument
- source: \$
  scopes:
    - constant.character.escape
- source: '{!ref}'
  scopes:
    - string.unquoted.argument
- source: \$
  scopes:
    - constant.character.escape
- source: '{COMP_WORDS[i]}'
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Indicate new cword'
  scopesEnd:
    - comment.line.number-sign
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '=='
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: COMP_CWORD
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '3'
  scopes:
    - variable.parameter.positional
- source: '='
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: j
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-loop
- source: else
  scopes:
    - keyword.control.else
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' No, list of word completions separators hasn''t changed;'
  scopesEnd:
    - comment.line.number-sign
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '='
  scopes:
    - string.unquoted.argument
- source: \(
  scopesBegin:
    - constant.character.escape
- source: \"
- source: \$
  scopesEnd:
    - constant.character.escape
- source: '{COMP_WORDS[@]}'
  scopes:
    - string.unquoted.argument
- source: \"
  scopesBegin:
    - constant.character.escape
- source: \)
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - constant.character.escape
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' __reassemble_comp_words_by_ref()'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $1 exclude  Characters out of $COMP_WORDBREAKS which should NOT be'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     considered word breaks. This is useful for things like scp where'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     we want to return host:path and not only path, so we would pass the'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     colon (:) as $1 in this case.  Bash-3 doesn''t do word splitting, so this'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     ensures we get the same word on both bash-3 and bash-4.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $2 words  Name of variable to return words to'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $3 cword  Name of variable to return cword to'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $4 cur  Name of variable to return current word to complete to'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @see ___get_cword_at_cursor_by_ref()'
  scopesEnd:
    - comment.line.number-sign
- source: __get_cword_at_cursor_by_ref
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: cword
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: words=
  scopesEnd:
    - string.unquoted.argument
- source: (
  scopesEnd:
    - meta.statement.command
    - meta.argument
- source: )
- source: __reassemble_comp_words_by_ref
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: words
  scopesBegin:
    - string.unquoted.argument
- source: cword
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: i
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: cur2
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: local
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: cur
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: COMP_LINE
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: local
  scopes:
    - storage.modifier.local
- source: index
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: COMP_POINT
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: for
  scopesBegin:
    - meta.scope.for-loop
  scopes:
    - keyword.control
- source: ((
  scopesBegin:
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: i
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.arithmetic
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: <=
  scopes:
    - keyword.operator.arithmetic
- source: cword
  scopes:
    - variable.other.normal
- source: '; '
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: i
  scopes:
    - variable.other.normal
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Current word fits in $cur?'
  scopesEnd:
    - comment.line.number-sign
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: cur
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '-ge'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: words
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' $cur doesn''t match cword?'
  scopesEnd:
    - comment.line.number-sign
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '0'
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: words
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Strip first character'
  scopesEnd:
    - comment.line.number-sign
- source: cur
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Decrease cursor position'
  scopesEnd:
    - comment.line.number-sign
- source: ((
  scopesBegin:
    - meta.statement
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: index
  scopes:
    - variable.other.normal
- source: '--'
  scopes:
    - keyword.operator.arithmetic
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.statement
    - meta.arithmetic
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Does found word matches cword?'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '-lt'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cword
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' No, cword lies further;'
  scopesEnd:
    - comment.line.number-sign
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: old_size
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: cur
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: cur
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: local
  scopes:
    - storage.modifier.local
- source: new_size
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: cur
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: index
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $((
  scopes:
    - punctuation.definition.evaluation.arithmetic.begin
- source: index
  scopesBegin:
    - string.other.math
  scopes:
    - variable.other.normal
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: old_size
  scopes:
    - variable.other.normal
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: new_size
  scopes:
    - variable.other.normal
  scopesEnd:
    - string.other.math
- source: ))
  scopes:
    - punctuation.definition.evaluation.arithmetic.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-loop
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: cword
- source: ']'
  scopes:
    - punctuation.section.array
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '0'
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: cur
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' We messed up. At least return the whole word so things keep working'
  scopesEnd:
    - comment.line.number-sign
- source: cur2
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: cword
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: else
  scopes:
    - keyword.control.else
- source: cur2
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '0'
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: index
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '3'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '4'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: _upvars
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: a
  scopesBegin:
    - constant.other.option
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: words
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - string.unquoted.argument
    - constant.other.option
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '3'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cword
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '4'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur2
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Get the word to complete and optional previous words.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' This is nicer than ${COMP_WORDS[$COMP_CWORD]}, since it handles cases'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' where the user is completing in the middle of a word.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' (For example, if the line is "ls foobar",'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' and the cursor is here -------->   ^'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Also one is able to cross over possible wordbreak characters.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Usage: _get_comp_words_by_ref [OPTIONS] [VARNAMES]'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Available VARNAMES:'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     cur         Return cur via $cur'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     prev        Return prev via $prev'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     words       Return words via $words'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     cword       Return cword via $cword'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' Available OPTIONS:'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     -n EXCLUDE  Characters out of $COMP_WORDBREAKS which should NOT be '
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '                 considered word breaks. This is useful for things like scp'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '                 where we want to return host:path and not only path, so we'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '                 would pass the colon (:) as -n option in this case.  Bash-3'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '                 doesn''t do word splitting, so this ensures we get the same'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '                 word on both bash-3 and bash-4.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     -c VARNAME  Return cur via $VARNAME'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     -p VARNAME  Return prev via $VARNAME'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     -w VARNAME  Return words via $VARNAME'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     -i VARNAME  Return cword via $VARNAME'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' Example usage:'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '    $ _get_comp_words_by_ref -n : cur prev'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _get_comp_words_by_ref
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: exclude
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: flag
- source: i
- source: OPTIND=
- source: '1'
  scopes:
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: cur
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: cword
- source: words=
  scopesEnd:
    - string.unquoted.argument
- source: (
  scopesEnd:
    - meta.statement.command
    - meta.argument
- source: )
- source: local
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: upargs
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - punctuation
- source: )
  scopesEnd:
    - punctuation
- source: upvars
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - punctuation
- source: )
  scopesEnd:
    - meta.expression.assignment
    - punctuation
- source: vcur
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: vcword
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: vprev
- source: vwords
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: getopts
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'c:i:n:p:w:'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: flag
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional.all
- source: '@'
  scopes:
    - variable.parameter.positional.all
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: case
  scopesBegin:
    - meta.scope.case-block
  scopes:
    - keyword.control
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: flag
  scopes:
    - variable.other.normal
- source: in
  scopesBegin:
    - meta.scope.case-body
  scopes:
    - keyword.control
- source: c
  scopesBegin:
    - meta.scope.case-clause
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' vcur='
  scopesBegin:
    - meta.scope.case-clause-body
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: OPTARG
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.scope.case-clause-body
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: i
  scopesBegin:
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' vcword='
  scopesBegin:
    - meta.scope.case-clause-body
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: OPTARG
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.scope.case-clause-body
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: 'n'
  scopesBegin:
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' exclude='
  scopesBegin:
    - meta.scope.case-clause-body
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: OPTARG
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.scope.case-clause-body
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: p
  scopesBegin:
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' vprev='
  scopesBegin:
    - meta.scope.case-clause-body
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: OPTARG
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.scope.case-clause-body
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: w
  scopesBegin:
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' vwords='
  scopesBegin:
    - meta.scope.case-clause-body
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: OPTARG
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.scope.case-clause-body
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
  scopesEnd:
    - meta.scope.case-body
    - meta.scope.case-clause
- source: esac
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.case-block
- source: done
  scopesBegin:
    - keyword.control
- source: while
  scopesEnd:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '#'
  scopes:
    - variable.language.special
- source: '-ge'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: OPTIND
  scopes:
    - variable.other.normal
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: case
  scopesBegin:
    - meta.scope.case-block
  scopes:
    - keyword.control
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '!'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: OPTIND
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: in
  scopesBegin:
    - meta.scope.case-body
  scopes:
    - keyword.control
- source: cur
  scopesBegin:
    - meta.scope.case-clause
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: '   vcur=cur '
  scopes:
    - meta.scope.case-clause-body
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: prev
  scopesBegin:
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: '  vprev=prev '
  scopes:
    - meta.scope.case-clause-body
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: cword
  scopesBegin:
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' vcword=cword '
  scopes:
    - meta.scope.case-clause-body
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: words
  scopesBegin:
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' vwords=words '
  scopes:
    - meta.scope.case-clause-body
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: '*'
  scopesBegin:
    - meta.scope.case-pattern
  scopes:
    - keyword.operator.glob
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' echo '
  scopesBegin:
    - meta.scope.case-clause-body
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'bash: '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: FUNCNAME
  scopes:
    - variable.other.normal
- source: '(): '
- source: \`
  scopes:
    - constant.character.escape
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '!'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: OPTIND
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ''': unknown argument'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ' \'
- source: 1>
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '&'
  scopes:
    - punctuation.separator.statement.background
- source: '2'
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.scope.case-clause-body
    - meta.statement
    - meta.statement.command
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
  scopesEnd:
    - meta.scope.case-body
    - meta.scope.case-clause
- source: esac
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.case-block
- source: let
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: OPTIND += 1
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: __get_cword_at_cursor_by_ref
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: exclude
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: words
  scopesBegin:
    - string.unquoted.argument
- source: cword
- source: cur
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: vcur
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: '{'
  scopesBegin:
    - meta.scope.group
  scopes:
    - punctuation.definition.group
- source: upvars
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: vcur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: upargs
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: (
  scopes:
    - punctuation
- source: '-v'
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: vcur
  scopes:
    - variable.other.normal
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: '}'
  scopes:
    - punctuation.definition.group
  scopesEnd:
    - meta.scope.group
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: vcword
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: '{'
  scopesBegin:
    - meta.scope.group
  scopes:
    - punctuation.definition.group
- source: upvars
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: vcword
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: upargs
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: (
  scopes:
    - punctuation
- source: '-v'
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: vcword
  scopes:
    - variable.other.normal
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cword
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: '}'
  scopes:
    - punctuation.definition.group
  scopesEnd:
    - meta.scope.group
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: vprev
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: '{'
  scopesBegin:
    - meta.scope.group
  scopes:
    - punctuation.definition.group
- source: upvars
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: vprev
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: upargs
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: (
  scopes:
    - punctuation
- source: '-v'
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: vprev
  scopes:
    - variable.other.normal
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: cword - 1
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: '}'
  scopes:
    - punctuation.definition.group
  scopesEnd:
    - meta.scope.group
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: vwords
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: '{'
  scopesBegin:
    - meta.scope.group
  scopes:
    - punctuation.definition.group
- source: upvars
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: vwords
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: upargs
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: (
  scopes:
    - punctuation
- source: '-a'
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: words
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: vwords
  scopes:
    - variable.other.normal
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: '}'
  scopes:
    - punctuation.definition.group
  scopesEnd:
    - meta.scope.group
- source: ((
  scopesBegin:
    - meta.statement
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: upvars
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.statement
    - meta.arithmetic
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: upvars
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: _upvars
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: upargs
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Get the word to complete.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' This is nicer than ${COMP_WORDS[$COMP_CWORD]}, since it handles cases'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' where the user is completing in the middle of a word.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' (For example, if the line is "ls foobar",'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' and the cursor is here -------->   ^'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $1 string  Characters out of $COMP_WORDBREAKS which should NOT be'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     considered word breaks. This is useful for things like scp where'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     we want to return host:path and not only path, so we would pass the'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     colon (:) as $1 in this case.  Bash-3 doesn''t do word splitting, so this'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     ensures we get the same word on both bash-3 and bash-4.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $2 integer  Index number of word to return, negatively offset to the'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     current word (default is 0, previous is 1), respecting the exclusions'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     given at $1.  For example, `_get_cword "=:" 1'' returns the word left of'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     the current word, respecting the exclusions "=:".'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @deprecated  Use `_get_comp_words_by_ref cur'' instead'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @see _get_comp_words_by_ref()'
  scopesEnd:
    - comment.line.number-sign
- source: _get_cword
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: LC_CTYPE
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.expression.assignment
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: cword
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: words
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: __reassemble_comp_words_by_ref
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: words
  scopesBegin:
    - string.unquoted.argument
- source: cword
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' return previous word offset by $2'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: '['
  scopes:
    - punctuation.section.array
- source: ^0-9
- source: ']'
  scopes:
    - punctuation.section.array
- source: /
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '%s'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: cword-$2
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: elif
  scopes:
    - keyword.control.elif
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: words
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: cword
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '-eq'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: '||'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: COMP_POINT
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMP_LINE
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '%s'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: cword
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: i
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: local
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: cur
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: COMP_LINE
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: local
  scopes:
    - storage.modifier.local
- source: index
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: COMP_POINT
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: for
  scopesBegin:
    - meta.scope.for-loop
  scopes:
    - keyword.control
- source: ((
  scopesBegin:
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: i
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.arithmetic
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: <=
  scopes:
    - keyword.operator.arithmetic
- source: cword
  scopes:
    - variable.other.normal
- source: '; '
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: i
  scopes:
    - variable.other.normal
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Current word fits in $cur?'
  scopesEnd:
    - comment.line.number-sign
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: cur
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '-ge'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: words
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' $cur doesn''t match cword?'
  scopesEnd:
    - comment.line.number-sign
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '0'
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: words
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Strip first character'
  scopesEnd:
    - comment.line.number-sign
- source: cur
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Decrease cursor position'
  scopesEnd:
    - comment.line.number-sign
- source: ((
  scopesBegin:
    - meta.statement
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: index
  scopes:
    - variable.other.normal
- source: '--'
  scopes:
    - keyword.operator.arithmetic
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.statement
    - meta.arithmetic
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Does found word matches cword?'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '-lt'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cword
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' No, cword lies further;'
  scopesEnd:
    - comment.line.number-sign
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: old_size
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: cur
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: cur
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: local
  scopes:
    - storage.modifier.local
- source: new_size
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: cur
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: index
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $((
  scopes:
    - punctuation.definition.evaluation.arithmetic.begin
- source: index
  scopesBegin:
    - string.other.math
  scopes:
    - variable.other.normal
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: old_size
  scopes:
    - variable.other.normal
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: new_size
  scopes:
    - variable.other.normal
  scopesEnd:
    - string.other.math
- source: ))
  scopes:
    - punctuation.definition.evaluation.arithmetic.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-loop
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: cword
- source: ']'
  scopes:
    - punctuation.section.array
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '0'
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: cur
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' We messed up! At least return the whole word so things'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' keep working'
  scopesEnd:
    - comment.line.number-sign
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '%s'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: cword
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '%s'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '0'
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: index
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' _get_cword()'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Get word previous to the current word.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' This is a good alternative to `prev=${COMP_WORDS[COMP_CWORD-1]}'' because bash4'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' will properly return the previous word with respect to any given exclusions to'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' COMP_WORDBREAKS.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @deprecated  Use `_get_comp_words_by_ref cur prev'' instead'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @see _get_comp_words_by_ref()'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _get_pword
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: COMP_CWORD
  scopes:
    - variable.other.normal
- source: '-ge'
  scopes:
    - keyword.operator.logical
- source: '1'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: _get_cword
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '@'
  scopesBegin:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: ':-'
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '1'
  scopes:
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' If the word-to-complete contains a colon (:), left-trim COMPREPLY items with'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' word-to-complete.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' On bash-3, and bash-4 with a colon in COMP_WORDBREAKS, words containing'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' colons are always completed as entire words if the word to complete contains'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' a colon.  This function fixes this, by removing the colon-containing-prefix'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' from COMPREPLY items.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' The preferred solution is to remove the colon (:) from COMP_WORDBREAKS in'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' your .bashrc:'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '    # Remove colon (:) from list of word completion separators'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '    COMP_WORDBREAKS=${COMP_WORDBREAKS//:}'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' See also: Bash FAQ - E13) Why does filename completion misbehave if a colon'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' appears in the filename? - http://tiswww.case.edu/php/chet/bash/FAQ'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $1 current word to complete (cur)'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @modifies global array $COMPREPLY'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: __ltrim_colon_completions
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' If word-to-complete contains a colon,'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' and bash-version < 4,'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' or bash-version >= 4 and COMP_WORDBREAKS contains a colon'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ':'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: ' ('
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: BASH_VERSINFO
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-lt'
  scopes:
    - keyword.operator.logical
- source: '4'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: '||'
  scopes:
    - keyword.operator.logical
- source: '            ('
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: BASH_VERSINFO
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-ge'
  scopes:
    - keyword.operator.logical
- source: '4'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: COMP_WORDBREAKS
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ':'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ') '
- source: '        )'
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Remove colon-word prefix from COMPREPLY items'
  scopesEnd:
    - comment.line.number-sign
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: colon_word
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: '%'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: '##'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
- source: ':'
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: local
  scopes:
    - storage.modifier.local
- source: i
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMPREPLY
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '*'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $((
  scopes:
    - punctuation.definition.evaluation.arithmetic.begin
- source: '--'
  scopesBegin:
    - string.other.math
  scopes:
    - keyword.operator.arithmetic
- source: i
  scopes:
    - variable.other.normal
  scopesEnd:
    - string.other.math
- source: ))
  scopes:
    - punctuation.definition.evaluation.arithmetic.end
- source: '-ge'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '['
  scopes:
    - punctuation.definition.array.access
- source: $i
  scopes:
    - variable.other.assignment
- source: ']'
  scopes:
    - punctuation.definition.array.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: $i
- source: ']'
  scopes:
    - punctuation.section.array
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: colon_word
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.parameter-expansion
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' __ltrim_colon_completions()'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' This function quotes the argument in a way so that readline dequoting'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' results in the original argument.  This is necessary for at least'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' `compgen'' which requires its arguments quoted/escaped:'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '     $ ls "a''b/"'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     c'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     $ compgen -f "a''b/"       # Wrong, doesn''t return output'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     $ compgen -f "a\''b/"      # Good (bash-4)'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     a\''b/c'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     $ compgen -f "a\\\\\''b/"  # Good (bash-3)'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     a\''b/c'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' On bash-3, special characters need to be escaped extra.  This is'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' unless the first character is a single quote ('').  If the single'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' quote appears further down the string, bash default completion also'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' fails, e.g.:'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '     $ ls ''a&b/'''
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     f'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     $ foo ''a&b/<TAB>  # Becomes: foo ''a&b/f'''
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     $ foo a''&b/<TAB>  # Nothing happens'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' See also:'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' - http://lists.gnu.org/archive/html/bug-bash/2009-03/msg00155.html'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' - http://www.mail-archive.com/bash-completion-devel@lists.alioth.\'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '   debian.org/msg01944.html'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $1  Argument to quote'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $2  Name of variable to return result to'
  scopesEnd:
    - comment.line.number-sign
- source: _quote_readline_by_ref
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '0'
  scopes:
    - variable.parameter.positional
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: BASH_VERSINFO
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-ge'
  scopes:
    - keyword.operator.logical
- source: '4'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Leave out first character'
  scopesEnd:
    - comment.line.number-sign
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '%s'
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Quote word, leaving out first character'
  scopesEnd:
    - comment.line.number-sign
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '%q'
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Double-quote word (bash-3)'
  scopesEnd:
    - comment.line.number-sign
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '%q'
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '!'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: '2'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: elif
  scopes:
    - keyword.control.elif
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: BASH_VERSINFO
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-le'
  scopes:
    - keyword.operator.logical
- source: '3'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '0'
  scopes:
    - variable.parameter.positional
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '=='
  scopes:
    - keyword.operator.logical
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '"'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '%q'
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '%q'
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' If result becomes quoted like this: $''string'', re-evaluate in order to'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' drop the additional quoting.  See also: http://www.mail-archive.com/'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' bash-completion-devel@lists.alioth.debian.org/msg01942.html'
  scopesEnd:
    - comment.line.number-sign
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '!'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: '2'
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '0'
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '=='
  scopes:
    - keyword.operator.logical
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: $
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '='
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '!'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: '2'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' _quote_readline_by_ref()'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' This function turns on "-o filenames" behavior dynamically. It is present'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' for bash < 4 reasons. See http://bugs.debian.org/272660#64 for info about'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' the bash < 4 compgen hack.'
  scopesEnd:
    - comment.line.number-sign
- source: _compopt_o_filenames
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' We test for compopt availability first because directly invoking it on'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' bash < 4 at this point may cause terminal echo to be turned off for some'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' reason, see https://bugzilla.redhat.com/653669 for more info.'
  scopesEnd:
    - comment.line.number-sign
- source: type
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: compopt
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '&'
  scopes:
    - punctuation.separator.statement.background
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: '/dev/null '
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: compopt
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: o
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: filenames
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: compgen
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: /non-existing-dir/
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function performs file and directory completion. It''s better than'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' simply using ''compgen -f'', because it honours spaces in filenames.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $1  If `-d'', complete only on directories.  Otherwise filter/pick only'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '            completions with `.$1'' and the uppercase version of it as file'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '            extension.'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _filedir
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: i
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: IFS=
  scopesEnd:
    - string.unquoted.argument
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single.dollar
- source: xspec
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: _tilde
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: a
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: toks
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: quoted
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: tmp
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: _quote_readline_by_ref
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: quoted
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
    - meta.argument
- source: toks
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: toks
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
- source: '-'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: d
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: '{'
  scopesBegin:
    - meta.scope.group
  scopes:
    - punctuation.definition.group
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: read
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: r
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: tmp
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' TODO: I have removed a "[ -n $tmp ] &&" before ''printf ..'','
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '       and everything works again. If this bug suddenly'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '       appears again (i.e. "cd /b<TAB>" becomes "cd /"),'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '       remember to check for other similar conditionals (here'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '       and _filedir_xspec()). --David'
  scopesEnd:
    - comment.line.number-sign
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '%s\n'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: tmp
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: '}'
  scopes:
    - punctuation.definition.group
  scopesEnd:
    - meta.scope.group
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopesBegin:
    - keyword.operator.logical
- source: '-d'
  scopesEnd:
    - keyword.operator.logical
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Munge xspec to contain uppercase version too'
  scopesEnd:
    - comment.line.number-sign
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: BASH_VERSINFO
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-ge'
  scopes:
    - keyword.operator.logical
- source: '4'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: xspec
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: +
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@('
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '|'
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ^^
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: )
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.parameter-expansion
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: xspec
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: +
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@('
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '|'
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '%s'
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: tr
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '[:lower:]'
- source: ''''
  scopes:
    - punctuation.definition.string.end
- source: ''''
  scopes:
    - punctuation.definition.string.begin
- source: '[:upper:]'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.parameter-expansion
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: toks
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: toks
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
- source: '-'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: xspec
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: quoted
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: toks
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-ne'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: _compopt_o_filenames
  scopesBegin:
    - meta.statement
  scopes:
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: COMPREPLY
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: toks
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' _filedir()'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' This function splits $cur=--foo=bar into $prev=--foo, $cur=bar, making it'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' easier to support both "--foo bar" and "--foo=bar" style completions.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Returns 0 if current option was split, 1 otherwise.'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _split_longopt
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: ' --'
- source: '?'
  scopesBegin:
    - keyword.operator.glob
- source: '*'
  scopesEnd:
    - keyword.operator.glob
- source: '='
  scopes:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Cut also backslash before ''='' in case it ended up there'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' for some reason.'
  scopesEnd:
    - comment.line.number-sign
- source: prev
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '%%'
  scopes:
    - keyword.operator.expansion
- source: '?('
- source: \\
  scopes:
    - constant.character.escape
- source: )=
- source: '*'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: cur
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
  scopesEnd:
    - keyword.operator.expansion
- source: '='
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: return
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function tries to parse the help output of the given command.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $1  command'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $2  command options (default: --help)'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _parse_help
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: $
  scopesBegin:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.statement.command.name
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ':-'
  scopes:
    - keyword.operator.expansion
- source: '--help'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>&1'
  scopes:
    - keyword.operator.redirect
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: sed
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: e
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '/^[[:space:]]*-/!d'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: e
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: 's|[,/]| |g'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: awk
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '{ print $1; if ($2 ~ /^-/) { print $2 } }'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: sed
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: e
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: 's|[<=].*||'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on signal names'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _signals
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: i
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' standard signal completion is rather braindead, so we need'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' to hack around to get what we want here, which is to'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' complete on a dash, followed by the signal name minus'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' the SIG prefix'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: A
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: signal
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: SIG
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: '-'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: for
  scopesBegin:
    - meta.scope.for-loop
  scopes:
    - keyword.control
- source: ((
  scopesBegin:
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: i
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.arithmetic
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: <
  scopes:
    - keyword.operator.arithmetic
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMPREPLY
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '['
  scopes:
    - punctuation.definition.array.access
- source: i
  scopes:
    - variable.other.assignment
- source: ']'
  scopes:
    - punctuation.definition.array.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '-'
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i
- source: ']'
  scopes:
    - punctuation.section.array
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: SIG
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-loop
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on known mac addresses'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _mac_addresses
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: re
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '\([A-Fa-f0-9]\{2\}:\)\{5\}[A-Fa-f0-9]\{2\}'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: local
  scopes:
    - storage.modifier.local
- source: PATH
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PATH
  scopes:
    - variable.other.normal
- source: ':/sbin:/usr/sbin'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Local interfaces (Linux only?)'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: ifconfig
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: a
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '2'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: sed
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: ne
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopesBegin:
    - meta.argument
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 's/.*[[:space:]]HWaddr[[:space:]]\{1,\}\('
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: re
  scopes:
    - variable.other.normal
- source: '\)[[:space:]]*$/\1/p'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' ARP cache'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: arp
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: an
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '2'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: sed
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: ne
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopesBegin:
    - meta.argument
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 's/.*[[:space:]]\('
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: re
  scopes:
    - variable.other.normal
- source: '\)[[:space:]].*/\1/p'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: ne
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopesBegin:
    - meta.argument
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 's/.*[[:space:]]\('
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: re
  scopes:
    - variable.other.normal
- source: '\)[[:space:]]*$/\1/p'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' /etc/ethers'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: sed
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: ne
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopesBegin:
    - meta.argument
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 's/^[[:space:]]*\('
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: re
  scopes:
    - variable.other.normal
- source: '\)[[:space:]].*/\1/p'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: /etc/ethers
  scopes:
    - string.unquoted.argument
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '${COMPREPLY[@]}'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.expression.assignment
- source: __ltrim_colon_completions
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on configured network interfaces'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _configured_interfaces
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-f'
  scopes:
    - keyword.operator.logical
- source: ' /etc/debian_version '
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Debian system'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: sed
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: ne
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: 's|^iface \([^ ]\{1,\}\).*$|\1|p'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: /etc/network/interfaces
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: elif
  scopes:
    - keyword.control.elif
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-f'
  scopes:
    - keyword.operator.logical
- source: ' /etc/SuSE-release '
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' SuSE system'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '%s\n'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: /etc/sysconfig/network/ifcfg-
  scopesBegin:
    - string.unquoted.argument
- source: '*'
  scopes:
    - variable.language.special.wildcard
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: sed
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: ne
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: s|.*ifcfg-\(.*\)|\1|p
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: elif
  scopes:
    - keyword.control.elif
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-f'
  scopes:
    - keyword.operator.logical
- source: ' /etc/pld-release '
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' PLD Linux'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: command
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ls
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: B
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopesBegin:
    - meta.argument
  scopes:
    - constant.character.escape.line-continuation
- source: /etc/sysconfig/interfaces
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: sed
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: ne
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: s|.*ifcfg-\(.*\)|\1|p
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: else
  scopes:
    - keyword.control.else
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Assume Red Hat'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '%s\n'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: /etc/sysconfig/network-scripts/ifcfg-
  scopesBegin:
    - string.unquoted.argument
- source: '*'
  scopes:
    - variable.language.special.wildcard
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: sed
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: ne
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: s|.*ifcfg-\(.*\)|\1|p
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on available kernels'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _kernel_versions
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: $( command ls /lib/modules )
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on all available network interfaces'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' -a: restrict to active interfaces only'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' -w: restrict to wireless interfaces only'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _available_interfaces
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: cmd
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ':-'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopesBegin:
    - keyword.operator.logical
- source: '-w'
  scopesEnd:
    - keyword.operator.logical
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: cmd
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: iwconfig
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: elif
  scopes:
    - keyword.control.elif
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ':-'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopesBegin:
    - keyword.operator.logical
- source: '-a'
  scopesEnd:
    - keyword.operator.logical
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: cmd
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ifconfig
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: cmd
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ifconfig -a
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: PATH=
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PATH
  scopes:
    - variable.other.normal
- source: ':/sbin'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cmd
  scopes:
    - variable.other.normal
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: awk
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '/^[^ \t]/ { print $1 }'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '${COMPREPLY[@]/%[[:punct:]]/}'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Perform tilde (~) completion'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @return  True (0) if completion needs further processing, '
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '          False (> 0) if tilde is followed by a valid username, completions'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '          are put in COMPREPLY and no further processing is necessary.'
  scopesEnd:
    - comment.line.number-sign
- source: _tilde
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: result
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Does $1 start with tilde (~) and doesn''t contain slash (/)?'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '0'
  scopes:
    - variable.parameter.positional
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '~'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '=='
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: \/
  scopes:
    - constant.character.escape
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: _compopt_o_filenames
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Try generate username completions'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '~'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: u
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: \~
  scopes:
    - constant.character.escape
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
- source: result
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMPREPLY
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: result
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Expand variable starting with tilde (~)'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' We want to expand ~foo/... to /home/foo/... to avoid problems when'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' word-to-complete starting with a tilde is fed to commands and ending up'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' quoted instead of expanded.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Only the first portion of the variable from the tilde up to the first slash'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' (~../) is expanded.  The remainder of the variable, containing for example'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' a dollar sign variable ($) or asterisk (*) is not expanded.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Example usage:'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '    $ v="~"; __expand_tilde_by_ref v; echo "$v"'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' Example output:'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '       v                  output'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '    --------         ----------------'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '    ~                /home/user'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '    ~foo/bar         /home/foo/bar'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '    ~foo/$HOME       /home/foo/$HOME'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '    ~foo/a  b        /home/foo/a  b'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '    ~foo/*           /home/foo/*'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' @param $1  Name of variable (not the value of the variable) to expand'
  scopesEnd:
    - comment.line.number-sign
- source: __expand_tilde_by_ref
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Does $1 start with tilde (~)?'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '!'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '0'
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '~'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Does $1 contain slash (/)?'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '!'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '!'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.other.normal
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: \/
  scopes:
    - constant.character.escape
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Yes, $1 contains slash;'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' 1: Remove * including and after first slash (/), i.e. "~a/b"'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '    becomes "~a".  Double quotes allow eval.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' 2: Remove * before the first slash (/), i.e. "~a/b"'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '    becomes "b".  Single quotes prevent eval.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '       +-----1----+ +---2----+'
  scopesEnd:
    - comment.line.number-sign
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '='
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '!'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.other.normal
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: '%'
  scopesEnd:
    - keyword.operator.expansion
- source: \/
  scopes:
    - constant.character.escape
- source: '*'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: /
  scopes:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '${!1#*/}'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: else
  scopes:
    - keyword.control.else
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' No, $1 doesn''t contain slash'
  scopesEnd:
    - comment.line.number-sign
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '='
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '!'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' __expand_tilde_by_ref()'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' This function expands tildes in pathnames'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _expand
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' FIXME: Why was this here?'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '[ "$cur" != "${cur%\\}" ] && cur="$cur\\"'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Expand ~username type directory specifications.  We want to expand'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' ~foo/... to /home/foo/... to avoid problems when $cur starting with'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' a tilde is fed to commands and ending up quoted instead of expanded.'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: \~
  scopes:
    - constant.character.escape
- source: '*'
  scopes:
    - keyword.operator.glob
- source: /
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: cur=
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: elif
  scopes:
    - keyword.control.elif
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: \~
  scopes:
    - constant.character.escape
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: cur
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: \~
  scopes:
    - constant.character.escape
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '~'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: u
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.expression.assignment
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMPREPLY
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-eq'
  scopes:
    - keyword.operator.logical
- source: '1'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: 'COMPREPLY['
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']='
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.argument
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMPREPLY
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on process IDs.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' AIX and Solaris ps prefers X/Open syntax.'
  scopesEnd:
    - comment.line.number-sign
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: UNAME
  scopes:
    - variable.other.normal
- source: '=='
  scopes:
    - keyword.operator.logical
- source: ' SunOS '
- source: '||'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: UNAME
  scopes:
    - variable.other.normal
- source: '=='
  scopes:
    - keyword.operator.logical
- source: ' AIX '
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: _pids
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: $( command ps -efo pid | sed 1d )
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: _pids
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: $( command ps axo pid= )
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on process group IDs.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' AIX and SunOS prefer X/Open, all else should be BSD.'
  scopesEnd:
    - comment.line.number-sign
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: UNAME
  scopes:
    - variable.other.normal
- source: '=='
  scopes:
    - keyword.operator.logical
- source: ' SunOS '
- source: '||'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: UNAME
  scopes:
    - variable.other.normal
- source: '=='
  scopes:
    - keyword.operator.logical
- source: ' AIX '
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: _pgids
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: $( command ps -efo pgid | sed 1d )
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: _pgids
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: $( command ps axo pgid= )
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on process names.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' AIX and SunOS prefer X/Open, all else should be BSD.'
  scopesEnd:
    - comment.line.number-sign
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: UNAME
  scopes:
    - variable.other.normal
- source: '=='
  scopes:
    - keyword.operator.logical
- source: ' SunOS '
- source: '||'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: UNAME
  scopes:
    - variable.other.normal
- source: '=='
  scopes:
    - keyword.operator.logical
- source: ' AIX '
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: _pnames
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: <defunct>
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: $( command ps -efo comm | \
- source: '        sed -e 1d -e "s:.*/::" -e "s/^-//" | sort -u )'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: _pnames
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' FIXME: completes "[kblockd/0]" to "0". Previously it was completed'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' to "kblockd" which isn''t correct either. "kblockd/0" would be'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' arguably most correct, but killall from psmisc 22 treats arguments'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' containing "/" specially unless -r is given so that wouldn''t quite'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' work either. Perhaps it''d be best to not complete these to anything'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' for now.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Not using "ps axo comm" because under some Linux kernels, it'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' truncates command names (see e.g. http://bugs.debian.org/497540#19)'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: <defunct>
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: $( command ps axo command= | \
- source: '        sed -e "s/ .*//" -e "s:.*/::" -e "s/:$//" -e "s/^[[(-]//" \'
- source: '            -e "s/[])]$//" | sort -u )'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on user IDs'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _uids
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: type
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: getent
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '&'
  scopes:
    - punctuation.separator.statement.background
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '$( getent passwd | cut -d: -f3 )'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: elif
  scopes:
    - keyword.control.elif
- source: type
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: perl
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '&'
  scopes:
    - punctuation.separator.statement.background
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '$( perl -e '
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: 'while (($uid) = (getpwent)[2]) { print $uid . "\n" }'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ' )'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: else
  scopes:
    - keyword.control.else
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' make do with /etc/passwd'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '$( cut -d: -f3 /etc/passwd )'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on group IDs'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _gids
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: type
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: getent
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '&'
  scopes:
    - punctuation.separator.statement.background
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '$( getent group | cut -d: -f3 )'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: \
  scopes:
    - constant.character.escape.line-continuation
  scopesEnd:
    - meta.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: elif
  scopes:
    - keyword.control.elif
- source: type
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: perl
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '&'
  scopes:
    - punctuation.separator.statement.background
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '$( perl -e '
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: 'while (($gid) = (getgrent)[2]) { print $gid . "\n" }'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ' )'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: else
  scopes:
    - keyword.control.else
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' make do with /etc/group'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '$( cut -d: -f3 /etc/group )'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on services'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _services
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: sysvdir
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: famdir
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-d'
  scopes:
    - keyword.operator.logical
- source: ' /etc/rc.d/init.d '
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: sysvdir
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: /etc/rc.d/init.d
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: sysvdir
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: /etc/init.d
  scopes:
    - string.unquoted.argument
- source: famdir
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: /etc/xinetd.d
  scopes:
    - string.unquoted.argument
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '%s\n'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: sysvdir
  scopes:
    - variable.other.normal
- source: /!
  scopes:
    - string.unquoted.argument
- source: (
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell
- source: '*'
  scopes:
    - keyword.operator.glob
- source: .rpm
- source: '@'
  scopesBegin:
    - meta.structure.extglob
  scopes:
    - keyword.operator.extglob
- source: (
  scopes:
    - punctuation.definition.extglob
- source: orig
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: new
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: save
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.extglob
  scopesEnd:
    - meta.structure.extglob
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '~'
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: functions
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.subshell
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - meta.scope.subshell
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-d'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: famdir
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '%s\n'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: famdir
  scopes:
    - variable.other.normal
- source: /!
  scopes:
    - string.unquoted.argument
- source: (
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell
- source: '*'
  scopes:
    - keyword.operator.glob
- source: .rpm
- source: '@'
  scopesBegin:
    - meta.structure.extglob
  scopes:
    - keyword.operator.extglob
- source: (
  scopes:
    - punctuation.definition.extglob
- source: orig
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: new
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: save
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.extglob
  scopesEnd:
    - meta.structure.extglob
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '~'
- source: )
  scopes:
    - punctuation.definition.subshell
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - meta.scope.subshell
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '${COMPREPLY[@]#@($sysvdir|$famdir)/}'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on modules'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _modules
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: modpath
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: modpath
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: /lib/modules/
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: command
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ls
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: R
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: modpath
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: sed
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: ne
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: 's/^\(.*\)\.k\{0,1\}o\(\.gz\)\{0,1\}$/\1/p'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on installed modules'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _installed_modules
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: PATH
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PATH
  scopes:
    - variable.other.normal
- source: ':/sbin'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: lsmod
  scopes:
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
  scopesEnd:
    - meta.statement
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: awk
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '{if (NR != 1) print $1}'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on user or user:group format; as for chown and cpio.'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' The : must be added manually; it will only complete usernames initially.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' The legacy user.group format is not supported.'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' @param $1  If -u, only return users/groups the user has access to in'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '            context of current completion.'
  scopesEnd:
    - comment.line.number-sign
- source: _usergroup
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: \\
  scopesBegin:
    - constant.character.escape
- source: \\
  scopesEnd:
    - constant.character.escape
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '||'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ':'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ':'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Give up early on if something seems horribly wrong.'
  scopesEnd:
    - comment.line.number-sign
- source: return
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: elif
  scopes:
    - keyword.control.elif
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: \\
  scopes:
    - constant.character.escape
- source: ':'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Completing group after ''user\:gr<TAB>''.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Reply with a list of groups prefixed with ''user:'', readline will'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' escape to the colon.'
  scopesEnd:
    - comment.line.number-sign
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: prefix
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: prefix
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '%%'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
  scopesEnd:
    - keyword.operator.expansion
- source: (
- source: '['
  scopes:
    - punctuation.section.array
- source: '^:'
- source: ']'
  scopes:
    - punctuation.section.array
- source: )
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: prefix
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: prefix
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: \\
  scopes:
    - constant.character.escape
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: local
  scopes:
    - storage.modifier.local
- source: mycur
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
  scopesEnd:
    - keyword.operator.expansion
- source: '['
  scopes:
    - punctuation.section.array
- source: ':'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '=='
  scopesBegin:
    - keyword.operator.logical
- source: '-u'
  scopesEnd:
    - keyword.operator.logical
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: _allowed_groups
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: mycur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: IFS
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single.dollar
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: g
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: mycur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: prefix
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: elif
  scopes:
    - keyword.control.elif
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ':'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Completing group after ''user:gr<TAB>''.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Reply with a list of unprefixed groups since readline with split on :'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' and only replace the ''gr'' part'
  scopesEnd:
    - comment.line.number-sign
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: mycur
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
- source: ':'
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '=='
  scopesBegin:
    - keyword.operator.logical
- source: '-u'
  scopesEnd:
    - keyword.operator.logical
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: _allowed_groups
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: mycur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: IFS
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single.dollar
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: g
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: mycur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: else
  scopes:
    - keyword.control.else
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Completing a partial ''usernam<TAB>''.'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' Don''t suffix with a : because readline will escape it and add a'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' slash. It''s better to complete into ''chown username '' than ''chown'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' username\:''.'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '=='
  scopesBegin:
    - keyword.operator.logical
- source: '-u'
  scopesEnd:
    - keyword.operator.logical
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: _allowed_users
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: IFS
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single.dollar
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: u
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: _allowed_users
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: _complete_as_root
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: IFS
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single.dollar
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: u
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ':-'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: else
  scopes:
    - keyword.control.else
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: IFS
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single.dollar
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopesBegin:
    - meta.argument
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: id
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: un
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '2'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: whoami
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '2'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ':-'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: _allowed_groups
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: _complete_as_root
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: IFS
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single.dollar
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: g
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: else
  scopes:
    - keyword.control.else
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: IFS
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single.dollar
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopesBegin:
    - meta.argument
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: id
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: Gn
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '2'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: groups
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '2'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on valid shells'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _shells
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopesBegin:
    - meta.argument
  scopes:
    - constant.character.escape.line-continuation
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '$( command grep "^[[:space:]]*/" /etc/shells 2>/dev/null )'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: \
  scopes:
    - constant.character.escape.line-continuation
  scopesEnd:
    - meta.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on valid filesystem types'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _fstypes
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: fss
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-e'
  scopes:
    - keyword.operator.logical
- source: ' /proc/filesystems '
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Linux'
  scopesEnd:
    - comment.line.number-sign
- source: fss
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: cut
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: d
  scopesBegin:
    - constant.other.option
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \t
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - constant.other.option
    - string.quoted.single.dollar
- source: '-'
  scopes:
    - constant.other.option.dash
- source: f2
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: /proc/filesystems
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
- source: $(
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: awk
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '! /\*/ { print $NF }'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: /etc/filesystems
  scopes:
    - string.unquoted.argument
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Generic'
  scopesEnd:
    - comment.line.number-sign
- source: fss
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: awk
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '/^[ \t]*[^#]/ { print $3 }'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: /etc/fstab
  scopes:
    - string.unquoted.argument
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
- source: $(
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: awk
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '/^[ \t]*[^#]/ { print $3 }'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: /etc/mnttab
  scopes:
    - string.unquoted.argument
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
- source: $(
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: awk
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '/^[ \t]*[^#]/ { print $4 }'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: /etc/vfstab
  scopes:
    - string.unquoted.argument
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
- source: $(
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: awk
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '{ print $1 }'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: /etc/dfs/fstypes
  scopes:
    - string.unquoted.argument
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
- source: $(
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-d'
  scopes:
    - keyword.operator.logical
- source: ' /etc/fs '
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: command
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ls
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: /etc/fs
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: fss
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: COMPREPLY
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: fss
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Get real command.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' - arg: $1  Command'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' - stdout:  Filename of command in PATH with possible symbolic links resolved.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '            Empty string if command not found.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' - return:  True (0) if command found, False (> 0) if not.'
  scopesEnd:
    - comment.line.number-sign
- source: _realcommand
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: type
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: '{'
  scopesBegin:
    - meta.scope.group
  scopes:
    - punctuation.definition.group
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: type
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: p
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: realpath
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: realpath
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: type
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: elif
  scopes:
    - keyword.control.elif
- source: type
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: p
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: readlink
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: readlink
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: type
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: type
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
  scopesEnd:
    - meta.scope.group
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function returns the first arugment, excluding options'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $1 chars  Characters out of $COMP_WORDBREAKS which should'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     NOT be considered word breaks. See __reassemble_comp_words_by_ref.'
  scopesEnd:
    - comment.line.number-sign
- source: _get_first_arg
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: i
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: arg
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: for
  scopesBegin:
    - meta.scope.for-loop
  scopes:
    - keyword.control
- source: ((
  scopesBegin:
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: i
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: <
  scopes:
    - keyword.operator.arithmetic
- source: COMP_CWORD
  scopes:
    - variable.other.normal
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_WORDS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: ' -'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: arg
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_WORDS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.expression.assignment
- source: break
  scopes:
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.break
  scopesEnd:
    - meta.statement
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-loop
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function counts the number of args, excluding options'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $1 chars  Characters out of $COMP_WORDBREAKS which should'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     NOT be considered word breaks. See __reassemble_comp_words_by_ref.'
  scopesEnd:
    - comment.line.number-sign
- source: _count_args
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: i
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: cword
- source: words
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: __reassemble_comp_words_by_ref
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: words
  scopesBegin:
    - string.unquoted.argument
- source: cword
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: args
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: i
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: cword-1
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: ' -'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: args
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $((
  scopes:
    - punctuation.definition.evaluation.arithmetic.begin
- source: $
  scopesBegin:
    - string.other.math
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: args
  scopes:
    - variable.other.normal
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
  scopesEnd:
    - string.other.math
- source: ))
  scopes:
    - punctuation.definition.evaluation.arithmetic.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on PCI IDs'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _pci_ids
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
- source: ':-'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopesBegin:
    - meta.argument
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: PATH
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PATH
  scopes:
    - variable.other.normal
- source: ':/sbin'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: lspci
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: 'n'
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: awk
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '{print $3}'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on USB IDs'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _usb_ids
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
- source: ':-'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopesBegin:
    - meta.argument
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: PATH
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PATH
  scopes:
    - variable.other.normal
- source: ':/sbin'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: lsusb
  scopes:
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
  scopesEnd:
    - meta.statement
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: awk
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '{print $6}'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' CD device names'
  scopesEnd:
    - comment.line.number-sign
- source: _cd_devices
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: d
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '!*/?([amrs])cd*'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':-'
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: dev
  scopes:
    - variable.other.normal
- source: /
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' DVD device names'
  scopesEnd:
    - comment.line.number-sign
- source: _dvd_devices
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: d
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '!*/?(r)dvd*'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':-'
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: dev
  scopes:
    - variable.other.normal
- source: /
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' start of section containing completion functions for external programs'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' a little help for FreeBSD ports users'
  scopesEnd:
    - comment.line.number-sign
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: UNAME
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.logical
- source: ' FreeBSD '
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: index search fetch fetch-list extract \
- source: '    patch configure build install reinstall deinstall clean clean-depends \'
- source: '    kernel buildworld'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: make
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function provides simple user@host completion'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _user_at_host
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: cur
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: COMPREPLY
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - punctuation
- source: )
  scopesEnd:
    - meta.expression.assignment
    - punctuation
- source: _get_comp_words_by_ref
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: 'n'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ':'
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: cur
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '@'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: _known_hosts_real
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: u
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: shopt
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: u
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: hostcomplete
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: F
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: _user_at_host
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: o
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: nospace
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: talk
- source: ytalk
- source: finger
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' NOTE: Using this function as a helper function is deprecated.  Use'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '       `_known_hosts_real'' instead.'
  scopesEnd:
    - comment.line.number-sign
- source: _known_hosts
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: options
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: COMPREPLY
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - punctuation
- source: )
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - punctuation
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' NOTE: Using `_known_hosts'' as a helper function and passing options'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '       to `_known_hosts'' is deprecated: Use `_known_hosts_real'' instead.'
  scopesEnd:
    - comment.line.number-sign
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopesBegin:
    - keyword.operator.logical
- source: '-a'
- source: '||'
  scopesEnd:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopesBegin:
    - keyword.operator.logical
- source: '-a'
  scopesEnd:
    - keyword.operator.logical
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: options
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '-a'
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.expression.assignment
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopesBegin:
    - keyword.operator.logical
- source: '-c'
- source: '||'
  scopesEnd:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopesBegin:
    - keyword.operator.logical
- source: '-c'
  scopesEnd:
    - keyword.operator.logical
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: options
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: options
  scopes:
    - variable.other.normal
- source: ' -c'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: _known_hosts_real
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: options
  scopes:
    - variable.other.normal
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: _get_cword
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ':'
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' _known_hosts()'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Helper function for completing _known_hosts.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' This function performs host completion based on ssh''s config and known_hosts'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' files, as well as hostnames reported by avahi-browse if'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' COMP_KNOWN_HOSTS_WITH_AVAHI is set to a non-empty value.  Also hosts from'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' HOSTFILE (compgen -A hostname) are added, unless'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' COMP_KNOWN_HOSTS_WITH_HOSTFILE is set to an empty value.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Usage: _known_hosts_real [OPTIONS] CWORD'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Options:  -a             Use aliases'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '           -c             Use `:'' suffix'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '           -F configfile  Use `configfile'' for configuration settings'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '           -p PREFIX      Use PREFIX'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Return: Completions, starting with CWORD, are added to COMPREPLY[]'
  scopesEnd:
    - comment.line.number-sign
- source: _known_hosts_real
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: configfile
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: flag
- source: prefix
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: cur
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: curd
- source: awkcur
- source: user
- source: suffix
- source: aliases
- source: i
- source: host
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: a
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: kh
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: khd
- source: config
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: local
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: OPTIND
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: getopts
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'acF:p:'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: flag
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional.all
- source: '@'
  scopes:
    - variable.parameter.positional.all
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: case
  scopesBegin:
    - meta.scope.case-block
  scopes:
    - keyword.control
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: flag
  scopes:
    - variable.other.normal
- source: in
  scopesBegin:
    - meta.scope.case-body
  scopes:
    - keyword.control
- source: a
  scopesBegin:
    - meta.scope.case-clause
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' aliases='
  scopesBegin:
    - meta.scope.case-clause-body
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: 'yes'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.scope.case-clause-body
    - string.quoted.single
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: c
  scopesBegin:
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' suffix='
  scopesBegin:
    - meta.scope.case-clause-body
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ':'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.scope.case-clause-body
    - string.quoted.single
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: F
  scopesBegin:
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' configfile='
  scopesBegin:
    - meta.scope.case-clause-body
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: OPTARG
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.scope.case-clause-body
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: p
  scopesBegin:
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' prefix='
  scopesBegin:
    - meta.scope.case-clause-body
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: OPTARG
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.scope.case-clause-body
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
  scopesEnd:
    - meta.scope.case-body
    - meta.scope.case-clause
- source: esac
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.case-block
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '#'
  scopes:
    - variable.language.special
- source: '-lt'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: OPTIND
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'error: '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: FUNCNAME
  scopes:
    - variable.other.normal
- source: ': missing mandatory argument CWORD'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: cur
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '!'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: OPTIND
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
  scopesEnd:
    - meta.expression.assignment
- source: let
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: OPTIND += 1
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '#'
  scopes:
    - variable.language.special
- source: '-ge'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: OPTIND
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'error: '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: FUNCNAME
  scopes:
    - variable.other.normal
- source: (
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional.all
- source: '@'
  scopes:
    - variable.parameter.positional.all
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '): unprocessed arguments:'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: 'while '
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '#'
  scopes:
    - variable.language.special
- source: '-ge'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: OPTIND
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '%s\n'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '!'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: OPTIND
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: shift
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: ' done'
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.interpolated.dollar
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '@'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: user
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '%'
  scopesBegin:
    - keyword.operator.expansion
- source: '@'
- source: '*'
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '@'
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: cur
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
- source: '@'
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: kh
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - punctuation
- source: )
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - punctuation
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' ssh config files'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: configfile
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-r'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: configfile
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: config
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: config
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: configfile
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: else
  scopes:
    - keyword.control.else
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: i
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: ' /etc/ssh/ssh_config '
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: HOME
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: /.ssh/config
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ' \'
- source: '"'
  scopesBegin:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
  scopes:
    - meta.statement.command.name.quoted
    - string.quoted.double
    - punctuation.definition.string.begin
    - entity.name.function.call
    - entity.name.command
- source: $
  scopesBegin:
    - meta.statement.command.name.continuation
    - string.quoted.double
    - entity.name.function.call
    - entity.name.command
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: HOME
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: /.ssh2/config
  scopesEnd:
    - meta.statement.command.name.continuation
    - string.quoted.double
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopes:
    - string.quoted.double
    - punctuation.definition.string.end
    - entity.name.function.call
    - entity.name.command
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-r'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: config
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: config
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Known hosts files from configs'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: config
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-gt'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: OIFS
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: IFS
  scopes:
    - variable.other.normal
- source: IFS
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.single.dollar
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: a
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: tmpkh
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' expand paths (if present) to global and user known hosts files'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' TODO(?): try to make known hosts files with more than one consecutive'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '          spaces in their name work (watch out for ~ expansion'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '          breakage! Alioth#311595)'
  scopesEnd:
    - comment.line.number-sign
- source: tmpkh
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: awk
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: >-
    sub("^[
    \t]*([Gg][Ll][Oo][Bb][Aa][Ll]|[Uu][Ss][Ee][Rr])[Kk][Nn][Oo][Ww][Nn][Hh][Oo][Ss][Tt][Ss][Ff][Ii][Ll][Ee][
    \t]+", "") { print $0 }
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: config
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: sort
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: u
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: i
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: tmpkh
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Remove possible quotes'
  scopesEnd:
    - comment.line.number-sign
- source: i
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: i
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: \"
  scopes:
    - constant.character.escape
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Eval/expand possible `~'' or `~user'''
  scopesEnd:
    - comment.line.number-sign
- source: __expand_tilde_by_ref
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: i
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-r'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: kh
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: kh
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: IFS
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: OIFS
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopesBegin:
    - keyword.control
- source: if
  scopesEnd:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-z'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: configfile
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Global and user known_hosts files'
  scopesEnd:
    - comment.line.number-sign
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: i
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: ' /etc/ssh/ssh_known_hosts /etc/ssh/ssh_known_hosts2 \'
- source: /etc/known_hosts
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: /etc/known_hosts2
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: ~/.ssh/known_hosts
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: ~/.ssh/known_hosts2
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-r'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: kh
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: kh
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: done
  scopesBegin:
    - keyword.control
- source: for
  scopesEnd:
    - keyword.control
- source: i
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: ' /etc/ssh2/knownhosts '
- source: '~'
  scopes:
    - keyword.operator.tilde
- source: /.ssh2/hostkeys
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-d'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: khd
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: khd
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: /
  scopesBegin:
    - string.unquoted.argument
- source: '*'
  scopes:
    - variable.language.special.wildcard
- source: pub
  scopesEnd:
    - string.unquoted.argument
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' If we have known_hosts files to use'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: kh
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-gt'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: '||'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: khd
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-gt'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Escape slashes and dots in paths for awk'
  scopesEnd:
    - comment.line.number-sign
- source: awkcur
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: \/
  scopes:
    - constant.character.escape
- source: /
  scopes:
    - keyword.operator.expansion
- source: \\
  scopesBegin:
    - constant.character.escape
- source: \/
  scopesEnd:
    - meta.parameter-expansion
    - constant.character.escape
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: awkcur
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: awkcur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: \.
  scopes:
    - constant.character.escape
- source: /
  scopes:
    - keyword.operator.expansion
- source: \\
  scopesBegin:
    - constant.character.escape
- source: \.
  scopesEnd:
    - meta.parameter-expansion
    - constant.character.escape
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: curd
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: awkcur
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: awkcur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: '-9'
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '.:'
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Digits followed by a dot or a colon - just search for that'
  scopesEnd:
    - comment.line.number-sign
- source: awkcur
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ^
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: awkcur
  scopes:
    - variable.other.normal
- source: '[.:]*'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: elif
  scopes:
    - keyword.control.elif
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: awkcur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: '-9'
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Digits followed by no dot or colon - search for digits followed'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' by a dot or a colon'
  scopesEnd:
    - comment.line.number-sign
- source: awkcur
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ^
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: awkcur
  scopes:
    - variable.other.normal
- source: '.*[.:]'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: elif
  scopes:
    - keyword.control.elif
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-z'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: awkcur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' A blank - search for a dot, a colon, or an alpha character'
  scopesEnd:
    - comment.line.number-sign
- source: awkcur
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '[a-z.:]'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: awkcur
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ^
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: awkcur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: fi
  scopesBegin:
    - keyword.control
- source: if
  scopesEnd:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: kh
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-gt'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' FS needs to look for a comma separated list'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: awk
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: 'BEGIN {FS=","}'
- source: '            /^\s*[^|\#]/ {for (i=1; i<=2; ++i) { \'
- source: '            sub(" .*$", "", $i); \'
- source: '            sub("^\\[", "", $i); sub("\\](:[0-9]+)?$", "", $i); \'
- source: '            if ($i ~ /'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: awkcur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '/) {print $i} \'
- source: '            }}'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: kh
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopesBegin:
    - keyword.control
- source: if
  scopesEnd:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: khd
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-gt'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Needs to look for files called'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' .../.ssh2/key_22_<hostname>.pub'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' dont fork any processes, because in a cluster environment,'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' there can be hundreds of hostkeys'
  scopesEnd:
    - comment.line.number-sign
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: i
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: khd
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: key_22_
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: curd
  scopes:
    - variable.other.normal
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '.pub '
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '-r'
  scopesEnd:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: host
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: i
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: '#'
- source: '*'
  scopesEnd:
    - keyword.operator.expansion
- source: key_22_
  scopes:
    - variable.other.normal
- source: /
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: host
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: host
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: '%'
  scopesEnd:
    - keyword.operator.expansion
- source: .
- source: pub
  scopes:
    - variable.other.normal
- source: /
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: host
  scopes:
    - variable.other.normal
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' apply suffix and prefix'
  scopesEnd:
    - comment.line.number-sign
- source: for
  scopesBegin:
    - meta.scope.for-loop
  scopes:
    - keyword.control
- source: ((
  scopesBegin:
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: i
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.arithmetic
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: <
  scopes:
    - keyword.operator.arithmetic
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMPREPLY
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '['
  scopes:
    - punctuation.definition.array.access
- source: i
  scopes:
    - variable.other.assignment
- source: ']'
  scopes:
    - punctuation.definition.array.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: prefix
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: user
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: suffix
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-loop
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' append any available aliases from config files'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: config
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-gt'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '-n'
  scopesEnd:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: aliases
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: hosts
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: sed
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: ne
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: >-
    s/^[[:blank:]]*[Hh][Oo][Ss][Tt]\([Nn][Aa][Mm][Ee]\)\{0,1\}[[:blank:]]\{1,\}\([^#*?]*\)\(#.*\)\{0,1\}$/\2/p
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: config
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: prefix
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: user
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
  scopesEnd:
    - meta.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: S
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: suffix
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: hosts
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Add hosts reported by avahi-browse, if desired and it''s available.'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_KNOWN_HOSTS_WITH_AVAHI
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':-'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: type
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: avahi-browse
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '&'
  scopes:
    - punctuation.separator.statement.background
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' The original call to avahi-browse also had "-k", to avoid lookups'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' into avahi''s services DB. We don''t need the name of the service, and'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' if it contains ";", it may mistify the result. But on Gentoo (at'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' least), -k wasn''t available (even if mentioned in the manpage) some'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' time ago, so...'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: compgen
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: prefix
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: user
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: S
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: suffix
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopesBegin:
    - meta.argument
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: avahi-browse
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: cpr
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: _workstation._tcp
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: awk
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: F
  scopesBegin:
    - constant.other.option
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ;
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.unquoted.argument
    - constant.other.option
    - string.quoted.single
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '/^=/ { print $7 }'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: sort
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: u
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Add results of normal hostname completion, unless'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' `COMP_KNOWN_HOSTS_WITH_HOSTFILE'' is set to an empty value.'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_KNOWN_HOSTS_WITH_HOSTFILE-1
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: A
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: hostname
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: prefix
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: user
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: S
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: suffix
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: __ltrim_colon_completions
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: prefix
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: user
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' _known_hosts_real()'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: F
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: _known_hosts
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: traceroute
- source: traceroute6
- source: tracepath
- source: tracepath6
- source: ping
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: ping6
  scopesBegin:
    - string.unquoted.argument
- source: fping
- source: fping6
- source: telnet
- source: host
- source: nslookup
- source: rsh
- source: rlogin
- source: ftp
- source: dig
- source: mtr
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: ssh-installkeys
  scopesBegin:
    - string.unquoted.argument
- source: showmount
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This meta-cd function observes the CDPATH variable, so that cd additionally'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' completes on directories under those specified in CDPATH.'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _cd
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: cur
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: IFS=
  scopesEnd:
    - string.unquoted.argument
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single.dollar
- source: i
  scopesBegin:
    - string.unquoted.argument
- source: j
- source: k
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: _get_comp_words_by_ref
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: cur
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' try to allow variable completion'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '?'
  scopes:
    - keyword.operator.glob
- source: (
- source: \\
  scopes:
    - constant.character.escape
- source: )
- source: \$
  scopes:
    - constant.character.escape
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: $
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: '?('
- source: \\
  scopes:
    - constant.character.escape
- source: )$
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.expression.assignment
- source: return
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: _compopt_o_filenames
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Use standard dir completion if no CDPATH or parameter starts with /,'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' ./ or ../'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-z'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: CDPATH
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':-'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '||'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '?'
  scopes:
    - keyword.operator.glob
- source: (.)
- source: '?'
  scopes:
    - keyword.operator.glob
- source: (.)/
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: _filedir
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: d
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: r
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: mark_dirs=
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: _rl_enabled
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: mark-directories
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: 'y'
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.argument
    - string.interpolated.dollar
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: r
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: mark_symdirs=
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: _rl_enabled
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: mark-symlinked-directories
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: 'y'
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.interpolated.dollar
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' we have a CDPATH, so loop on its contents'
  scopesEnd:
    - comment.line.number-sign
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: i
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: CDPATH
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: /
- source: ':'
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.parameter-expansion
    - string.quoted.single.dollar
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' create an array of matched subdirs'
  scopesEnd:
    - comment.line.number-sign
- source: k
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMPREPLY
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: j
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: d
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: /
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: ' ( '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: mark_symdirs
  scopes:
    - variable.other.normal
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '-h'
  scopesEnd:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: j
  scopes:
    - variable.other.normal
- source: '||'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: mark_dirs
  scopes:
    - variable.other.normal
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
- source: '-h'
  scopesEnd:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: j
  scopes:
    - variable.other.normal
- source: ' ) '
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
- source: '-d'
  scopesEnd:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: j
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: /
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: j
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: j
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: /
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: 'COMPREPLY[k++]'
  scopesBegin:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
  scopes:
    - entity.name.function.call
    - entity.name.command
- source: '='
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: j
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: /
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: _filedir
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: d
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMPREPLY
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-eq'
  scopes:
    - keyword.operator.logical
- source: '1'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: i
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '*/'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '['
  scopes:
    - punctuation.definition.array.access
- source: '0'
  scopes:
    - variable.other.assignment
- source: ']'
  scopes:
    - punctuation.definition.array.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: i
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: /
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: shopt
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: q
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: cdable_vars
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: F
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: _cd
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: o
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: nospace
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: cd
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: else
  scopes:
    - keyword.control.else
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: F
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: _cd
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: o
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: nospace
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: cd
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' a wrapper method for the next one, when the offset is unknown'
  scopesEnd:
    - comment.line.number-sign
- source: _command
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: offset
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: i
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' find actual offset, as position of the first non-option'
  scopesEnd:
    - comment.line.number-sign
- source: offset
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: for
  scopesBegin:
    - meta.scope.for-loop
  scopes:
    - keyword.control
- source: ((
  scopesBegin:
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: i
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: <=
  scopes:
    - keyword.operator.arithmetic
- source: COMP_CWORD
  scopes:
    - variable.other.normal
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_WORDS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: ' -'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: offset
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.expression.assignment
- source: break
  scopes:
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.break
  scopesEnd:
    - meta.statement
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-loop
- source: _command_offset
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: offset
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' A meta-command completion function for commands like sudo(8), which need to'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' first complete on a command, then complete according to that command''s own'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' completion definition - currently not quite foolproof (e.g. mount and umount'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' don''t work properly), but still quite useful.'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _command_offset
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: cur
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: func
- source: cline
- source: cspec
- source: noglob
- source: cmd
- source: i
- source: char_offset
- source: word_offset
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: _COMMAND_FUNC
  scopesBegin:
    - string.unquoted.argument
- source: _COMMAND_FUNC_ARGS
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: word_offset
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' rewrite current completion context before invoking'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' actual command completion'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' find new first word position, then'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' rewrite COMP_LINE and adjust COMP_POINT'
  scopesEnd:
    - comment.line.number-sign
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: first_word
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_WORDS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: $word_offset
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: for
  scopesBegin:
    - meta.scope.for-loop
  scopes:
    - keyword.control
- source: ((
  scopesBegin:
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: i
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.arithmetic
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: <=
  scopes:
    - keyword.operator.arithmetic
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMP_LINE
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_LINE
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: first_word
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: first_word
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: char_offset
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.expression.assignment
- source: break
  scopes:
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.break
  scopesEnd:
    - meta.statement
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-loop
- source: COMP_LINE
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_LINE
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: char_offset
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: COMP_POINT
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $((
  scopes:
    - punctuation.definition.evaluation.arithmetic.begin
- source: COMP_POINT
  scopesBegin:
    - string.other.math
  scopes:
    - variable.other.normal
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: char_offset
  scopes:
    - variable.other.normal
  scopesEnd:
    - string.other.math
- source: ))
  scopes:
    - punctuation.definition.evaluation.arithmetic.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' shift COMP_WORDS elements and adjust COMP_CWORD'
  scopesEnd:
    - comment.line.number-sign
- source: for
  scopesBegin:
    - meta.scope.for-loop
  scopes:
    - keyword.control
- source: ((
  scopesBegin:
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: i
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.arithmetic
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: <=
  scopes:
    - keyword.operator.arithmetic
- source: COMP_CWORD
  scopes:
    - variable.other.normal
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: word_offset
  scopes:
    - variable.other.normal
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: COMP_WORDS
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '['
  scopes:
    - punctuation.definition.array.access
- source: i
  scopes:
    - variable.other.assignment
- source: ']'
  scopes:
    - punctuation.definition.array.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_WORDS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i+$word_offset
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: done
  scopesBegin:
    - keyword.control
- source: for
  scopesEnd:
    - keyword.control
- source: ((
  scopesBegin:
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: i
  scopes:
    - variable.other.normal
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: <=
  scopes:
    - keyword.operator.arithmetic
- source: COMP_CWORD
  scopes:
    - variable.other.normal
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: unset
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: 'COMP_WORDS[i]'
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-loop
- source: COMP_CWORD
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $((
  scopes:
    - punctuation.definition.evaluation.arithmetic.begin
- source: $
  scopesBegin:
    - string.other.math
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: COMP_CWORD
  scopes:
    - variable.other.normal
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: word_offset
  scopes:
    - variable.other.normal
  scopesEnd:
    - string.other.math
- source: ))
  scopes:
    - punctuation.definition.evaluation.arithmetic.end
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - punctuation
- source: )
  scopesEnd:
    - meta.expression.assignment
    - punctuation
- source: _get_comp_words_by_ref
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: cur
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: COMP_CWORD
  scopes:
    - variable.other.normal
- source: '-eq'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: _compopt_o_filenames
  scopesBegin:
    - meta.statement
  scopes:
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: COMPREPLY
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: c
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: else
  scopes:
    - keyword.control.else
- source: cmd
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_WORDS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: p
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cmd
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '##'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
- source: /
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '&'
  scopes:
    - punctuation.separator.statement.background
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: cspec
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: p
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cmd
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '##'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
- source: /
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cspec
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
  scopesEnd:
    - keyword.operator.expansion
- source: '-F'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cspec
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' complete -F <function>'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' get function name'
  scopesEnd:
    - comment.line.number-sign
- source: func
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cspec
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
  scopesEnd:
    - keyword.operator.expansion
- source: '-F'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: func
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: func
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '%%'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMP_WORDS
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-ge'
  scopes:
    - keyword.operator.logical
- source: '2'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: $
  scopesBegin:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: func
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement.command.name
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cmd
  scopes:
    - variable.other.normal
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_WORDS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '${#COMP_WORDS[@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-1]}'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_WORDS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '${#COMP_WORDS[@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-2]}'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: $
  scopesBegin:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: func
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement.command.name
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cmd
  scopes:
    - variable.other.normal
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_WORDS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '${#COMP_WORDS[@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-1]}'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' remove any \: generated by a command that doesn''t'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' default to filenames or dirnames (e.g. sudo chown)'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' FIXME: I''m pretty sure this does not work!'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cspec
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
  scopesEnd:
    - keyword.operator.expansion
- source: '-o'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cspec
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: cspec
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cspec
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
  scopesEnd:
    - keyword.operator.expansion
- source: '-o'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: cspec
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cspec
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '%%'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cspec
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '@'
  scopesBegin:
    - meta.structure.extglob
  scopes:
    - keyword.operator.extglob
- source: (
  scopes:
    - punctuation.definition.extglob
- source: dir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: file
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.extglob
  scopesEnd:
    - meta.structure.extglob
- source: 'names '
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: \\
  scopesBegin:
    - constant.character.escape
- source: \\
  scopesEnd:
    - constant.character.escape
- source: ':'
  scopesBegin:
    - keyword.operator.expansion
- source: /
- source: ':'
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: else
  scopes:
    - keyword.control.else
- source: _compopt_o_filenames
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: elif
  scopes:
    - keyword.control.elif
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cspec
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: cspec
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cspec
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: complete
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: cspec
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cspec
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '%%'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cmd
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '##'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
- source: /
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: compgen
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cspec
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: elif
  scopes:
    - keyword.control.elif
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMPREPLY
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-eq'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: _filedir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: F
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: _command
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: aoss
- source: command
- source: do
- source: else
- source: eval
- source: exec
- source: ltrace
- source: nice
- source: nohup
- source: padsp
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: then
  scopesBegin:
    - string.unquoted.argument
- source: time
- source: tsocks
- source: vsound
- source: xargs
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: _root_command
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: PATH
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PATH
  scopes:
    - variable.other.normal
- source: ':/sbin:/usr/sbin:/usr/local/sbin'
  scopes:
    - string.unquoted.argument
- source: local
  scopes:
    - storage.modifier.local
- source: root_command
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.expression.assignment
- source: _command
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '3'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: F
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: _root_command
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: fakeroot
- source: gksu
- source: gksudo
- source: kdesudo
- source: really
- source: sudo
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Return true if the completion should be treated as running as root'
  scopesEnd:
    - comment.line.number-sign
- source: _complete_as_root
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: EUID
  scopes:
    - variable.other.normal
- source: '-eq'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: '||'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: root_command
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':-'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: _longopt
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: cur
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: prev
- source: split=
- source: 'false'
  scopes:
    - constant.language.false
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: _get_comp_words_by_ref
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: 'n'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '='
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: cur
- source: prev
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: _split_longopt
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: split
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - string.unquoted.argument
    - constant.language.true
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: case
  scopesBegin:
    - meta.scope.case-block
  scopes:
    - keyword.control
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: prev
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: in
  scopesBegin:
    - meta.scope.case-body
  scopes:
    - keyword.control
- source: '--'
  scopesBegin:
    - meta.scope.case-clause
    - meta.scope.case-pattern
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '[Dd][Ii][Rr]'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: _filedir
  scopesBegin:
    - meta.scope.case-clause-body
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: d
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.scope.case-clause-body
    - meta.statement
    - meta.statement.command
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: '--'
  scopesBegin:
    - meta.scope.case-pattern
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '[Ff][Ii][Ll][Ee]'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '|'
  scopes:
    - punctuation.separator.pipe-sign
- source: '--'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '[Pp][Aa][Tt][Hh]'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: _filedir
  scopesBegin:
    - meta.scope.case-clause-body
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: return
  scopes:
    - keyword.control.return
  scopesEnd:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.scope.case-clause-body
    - meta.statement
    - meta.statement.command
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
  scopesEnd:
    - meta.scope.case-body
    - meta.scope.case-clause
- source: esac
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.case-block
- source: $
  scopesBegin:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: split
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Syntax problem here'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: ' -'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: $
  scopesBegin:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.statement.command.name
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-help'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '2'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.redirect.stderr
- source: '>&1'
  scopes:
    - keyword.operator.redirect
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: sed
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: ne
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: 's/.*\(--[-A-Za-z0-9]\{1,\}\).*/\1/p'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: sort
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: u
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
  scopesEnd:
    - meta.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: elif
  scopes:
    - keyword.control.elif
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '@'
  scopesBegin:
    - meta.structure.extglob
  scopes:
    - keyword.operator.extglob
- source: (
  scopes:
    - punctuation.definition.extglob
- source: mk
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: rm
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.extglob
  scopesEnd:
    - meta.structure.extglob
- source: 'dir '
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: _filedir
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: d
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: else
  scopes:
    - keyword.control.else
- source: _filedir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' makeinfo and texi2dvi are defined elsewhere.'
  scopesEnd:
    - comment.line.number-sign
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: i
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: ' a2ps awk bash bc bison cat colordiff cp csplit \'
- source: curl
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: cut
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: date
- source: df
- source: diff
- source: dir
- source: du
- source: enscript
- source: env
- source: expand
- source: fmt
- source: fold
- source: gperf
- source: gprof
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: grep
  scopesBegin:
    - string.unquoted.argument
- source: grub
- source: head
- source: indent
- source: irb
- source: ld
- source: ldd
- source: less
- source: ln
- source: ls
- source: m4
- source: md5sum
- source: mkdir
- source: mkfifo
- source: mknod
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: mv
  scopesBegin:
    - string.unquoted.argument
- source: netstat
- source: nl
- source: nm
- source: objcopy
- source: objdump
- source: od
- source: paste
- source: patch
- source: pr
- source: ptx
- source: readelf
- source: rm
- source: rmdir
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: sed
  scopesBegin:
    - string.unquoted.argument
- source: seq
- source: 'sha{,1,224,256,384,512}sum'
- source: shar
- source: sort
- source: split
- source: strip
- source: tac
- source: tail
- source: tee
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: texindex
  scopesBegin:
    - string.unquoted.argument
- source: touch
- source: tr
- source: uname
- source: unexpand
- source: uniq
- source: units
- source: vdir
- source: wc
- source: wget
- source: who
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: have
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: F
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: _longopt
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: o
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: default
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: unset
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: i
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: _filedir_xspec
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: IFS
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: cur
- source: xspec
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: IFS
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single.dollar
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - punctuation
- source: )
  scopesEnd:
    - meta.expression.assignment
    - punctuation
- source: _get_comp_words_by_ref
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: cur
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: _expand
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' get first exclusion compspec that matches this command'
  scopesEnd:
    - comment.line.number-sign
- source: xspec
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: awk
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '/^complete[ \t]+.*[ \t]'
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: '##'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
- source: /
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '([ \t]|'
- source: \$
  scopes:
    - constant.character.escape
- source: ')/ { print '
- source: \$
  scopes:
    - constant.character.escape
- source: '0; exit }'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' prune to leave nothing but the -X spec'
  scopesEnd:
    - comment.line.number-sign
- source: xspec
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: xspec
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
  scopesEnd:
    - keyword.operator.expansion
- source: '-X'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: xspec
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: xspec
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '%%'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.expression.assignment
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: a
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: toks
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: tmp
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: toks
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: toks
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
- source: '-'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: d
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: quote_readline
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: '{'
  scopesBegin:
    - meta.scope.group
  scopes:
    - punctuation.definition.group
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: read
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: r
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: tmp
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' see long TODO comment in _filedir() --David'
  scopesEnd:
    - comment.line.number-sign
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '%s\n'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: tmp
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: '}'
  scopes:
    - punctuation.definition.group
  scopesEnd:
    - meta.scope.group
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Munge xspec to contain uppercase version too'
  scopesEnd:
    - comment.line.number-sign
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: xspec=
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: xspec
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: local
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: matchop
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '!'
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: xspec
  scopes:
    - variable.other.normal
- source: '=='
  scopesBegin:
    - keyword.operator.logical
- source: '!'
  scopesEnd:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: xspec
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: xspec
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopesBegin:
    - keyword.operator.expansion
- source: '!'
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: matchop
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '@'
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: BASH_VERSINFO
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-ge'
  scopes:
    - keyword.operator.logical
- source: '4'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: xspec
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: matchop
  scopes:
    - variable.other.normal
- source: (
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: xspec
  scopes:
    - variable.other.normal
- source: '|'
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: xspec
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ^^
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: )
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: xspec
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: matchop
  scopes:
    - variable.other.normal
- source: (
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: xspec
  scopes:
    - variable.other.normal
- source: '|'
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '%s'
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: xspec
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: tr
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '[:lower:]'
- source: ''''
  scopes:
    - punctuation.definition.string.end
- source: ''''
  scopes:
    - punctuation.definition.string.begin
- source: '[:upper:]'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: toks
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: toks
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
- source: '-'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: compgen
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '!'
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: xspec
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \$
  scopes:
    - constant.character.escape
- source: '(quote_readline '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \$
  scopes:
    - constant.character.escape
- source: cur
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: )
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: '{'
  scopesBegin:
    - meta.scope.group
  scopes:
    - punctuation.definition.group
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: read
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: r
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: tmp
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: tmp
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '%s\n'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: tmp
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: '}'
  scopes:
    - punctuation.definition.group
  scopesEnd:
    - meta.scope.group
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.expression.assignment
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: toks
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-ne'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: _compopt_o_filenames
  scopesBegin:
    - meta.statement
  scopes:
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: COMPREPLY
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: toks
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: list
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: sed
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: ne
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '/^# START exclude/,/^# FINISH exclude/p'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: \
  scopes:
    - meta.statement
    - constant.character.escape.line-continuation
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' read exclusion compspecs'
  scopesEnd:
    - comment.line.number-sign
- source: (
  scopesBegin:
    - meta.statement
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: read
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: line
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: do
  scopes:
    - keyword.control.do
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' ignore compspecs that are commented out'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: line
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: \#
  scopes:
    - constant.character.escape
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: line
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: continue
  scopes:
    - keyword.control.continue
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: line
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: line
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '%'
  scopesBegin:
    - keyword.operator.expansion
- source: '#'
  scopesEnd:
    - keyword.operator.expansion
- source: START
  scopesBegin:
    - variable.other.normal
- source: exclude
  scopesEnd:
    - variable.other.normal
- source: '*'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: line
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: line
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '%'
  scopesBegin:
    - keyword.operator.expansion
- source: '#'
  scopesEnd:
    - keyword.operator.expansion
- source: FINISH
  scopesBegin:
    - variable.other.normal
- source: exclude
  scopesEnd:
    - variable.other.normal
- source: '*'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: line
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: line
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '##'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
  scopesEnd:
    - keyword.operator.expansion
- source: \'
  scopes:
    - constant.character.escape
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: list
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: list
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: line
  scopes:
    - variable.other.normal
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '%s '
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: list
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.subshell
  scopesEnd:
    - meta.statement
    - meta.scope.subshell
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' remove previous compspecs'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: list
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-gt'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: complete
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: r
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: list
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' install new compspecs'
  scopesEnd:
    - comment.line.number-sign
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: complete
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: F
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: _filedir_xspec
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: list
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: unset
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: list
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' source completion directory definitions'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-d'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_COMPAT_DIR
  scopes:
    - variable.other.normal
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '-r'
  scopesEnd:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_COMPAT_DIR
  scopes:
    - variable.other.normal
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: ' \'
- source: '-x'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_COMPAT_DIR
  scopes:
    - variable.other.normal
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: i
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: LC_ALL
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.expression.assignment
- source: command
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ls
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_COMPAT_DIR
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: i
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_COMPAT_DIR
  scopes:
    - variable.other.normal
- source: /
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.expression.assignment
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: i
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '##'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
- source: /
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '@'
  scopesBegin:
    - meta.structure.extglob
  scopes:
    - keyword.operator.extglob
- source: (
  scopes:
    - punctuation.definition.extglob
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '~'
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: '*'
  scopes:
    - keyword.operator.glob
- source: .bak
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: '*'
  scopes:
    - keyword.operator.glob
- source: .swp
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: \#*\#
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: '*'
  scopes:
    - keyword.operator.glob
- source: .dpkg
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: '*'
  scopes:
    - keyword.operator.glob
- source: .rpm
- source: '@'
  scopesBegin:
    - meta.structure.extglob
  scopes:
    - keyword.operator.extglob
- source: (
  scopes:
    - punctuation.definition.extglob
- source: orig
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: new
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: save
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.extglob
  scopesEnd:
    - meta.structure.extglob
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: Makefile*
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.extglob
  scopesEnd:
    - meta.structure.extglob
- source: ' \'
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '-f'
  scopesEnd:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '-r'
  scopesEnd:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: .
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: fi
  scopesBegin:
    - keyword.control
- source: if
  scopesEnd:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_DIR
  scopes:
    - variable.other.normal
- source: '!='
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_COMPAT_DIR
  scopes:
    - variable.other.normal
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: ' \'
- source: '-d'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_DIR
  scopes:
    - variable.other.normal
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '-r'
  scopesEnd:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_DIR
  scopes:
    - variable.other.normal
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: ' \'
- source: '-x'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_DIR
  scopes:
    - variable.other.normal
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: i
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: LC_ALL
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.expression.assignment
- source: command
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ls
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_DIR
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: i
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_DIR
  scopes:
    - variable.other.normal
- source: /
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.expression.assignment
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: i
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '##'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
- source: /
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '@'
  scopesBegin:
    - meta.structure.extglob
  scopes:
    - keyword.operator.extglob
- source: (
  scopes:
    - punctuation.definition.extglob
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '~'
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: '*'
  scopes:
    - keyword.operator.glob
- source: .bak
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: '*'
  scopes:
    - keyword.operator.glob
- source: .swp
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: \#*\#
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: '*'
  scopes:
    - keyword.operator.glob
- source: .dpkg
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: '*'
  scopes:
    - keyword.operator.glob
- source: .rpm
- source: '@'
  scopesBegin:
    - meta.structure.extglob
  scopes:
    - keyword.operator.extglob
- source: (
  scopes:
    - punctuation.definition.extglob
- source: orig
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: new
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: save
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.extglob
  scopesEnd:
    - meta.structure.extglob
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: Makefile*
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.extglob
  scopesEnd:
    - meta.structure.extglob
- source: ' \'
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '-f'
  scopesEnd:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '-r'
  scopesEnd:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: .
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: unset
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: i
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' source user completion file'
  scopesEnd:
    - comment.line.number-sign
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION
  scopes:
    - variable.other.normal
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '~'
  scopes:
    - keyword.operator.tilde
- source: '/.bash_completion '
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '-r'
  scopesEnd:
    - keyword.operator.logical
- source: '~'
  scopes:
    - keyword.operator.tilde
- source: '/.bash_completion '
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ' \'
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: .
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ~/.bash_completion
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: unset
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: have
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: unset
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: UNAME
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: USERLAND
- source: have
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: set
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_ORIGINAL_V_VALUE
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.argument
- source: unset
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: BASH_COMPLETION_ORIGINAL_V_VALUE
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Local variables:'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' mode: shell-script'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' sh-basic-offset: 4'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' sh-indent-comment: t'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' indent-tabs-mode: nil'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' End:'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' ex: ts=4 sw=4 et filetype=sh'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '   bash_completion - programmable completion functions for bash 3.2+'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '   Copyright © 2006-2008, Ian Macdonald <ian@caliban.org>'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '             © 2009-2011, Bash Completion Maintainers'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '                     <bash-completion-devel@lists.alioth.debian.org>'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '   This program is free software; you can redistribute it and/or modify'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '   it under the terms of the GNU General Public License as published by'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '   the Free Software Foundation; either version 2, or (at your option)'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '   any later version.'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '   This program is distributed in the hope that it will be useful,'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '   but WITHOUT ANY WARRANTY; without even the implied warranty of'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '   GNU General Public License for more details.'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '   You should have received a copy of the GNU General Public License'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '   along with this program; if not, write to the Free Software Foundation,'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '   The latest version of this software can be obtained here:'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '   http://bash-completion.alioth.debian.org/'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '   RELEASE: 1.3'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '-'
  scopes:
    - variable.language.special
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: v
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: BASH_COMPLETION_ORIGINAL_V_VALUE
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '-v'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: BASH_COMPLETION_ORIGINAL_V_VALUE
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: +v
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: fi
  scopesBegin:
    - keyword.control
- source: if
  scopesEnd:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_DEBUG
  scopes:
    - variable.other.normal
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: set
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: else
  scopes:
    - keyword.control.else
- source: set
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: +v
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Alter the following to reflect the location of this file.'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: BASH_COMPLETION
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: /usr/local/etc/bash_completion
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_DIR
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: BASH_COMPLETION_DIR
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: /usr/local/etc/bash_completion.d
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_COMPAT_DIR
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: BASH_COMPLETION_COMPAT_DIR
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: /usr/local/etc/bash_completion.d
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.expression.assignment
- source: readonly
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.readonly
- source: BASH_COMPLETION
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: BASH_COMPLETION_DIR
- source: BASH_COMPLETION_COMPAT_DIR
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Set a couple of useful vars'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: UNAME
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: uname
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: s
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' strip OS type and version under Cygwin (e.g. CYGWIN_NT-5.1 => Cygwin)'
  scopesEnd:
    - comment.line.number-sign
- source: UNAME
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: UNAME
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: /
  scopes:
    - keyword.operator.expansion
- source: CYGWIN_
  scopes:
    - variable.other.normal
- source: '*'
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: Cygwin
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: case
  scopesBegin:
    - meta.scope.case-block
  scopes:
    - keyword.control
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: UNAME
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: in
  scopesBegin:
    - meta.scope.case-body
  scopes:
    - keyword.control
- source: Linux
  scopesBegin:
    - meta.scope.case-clause
    - meta.scope.case-pattern
- source: '|'
  scopes:
    - punctuation.separator.pipe-sign
- source: GNU
- source: '|'
  scopes:
    - punctuation.separator.pipe-sign
- source: GNU/
- source: '*'
  scopes:
    - keyword.operator.glob
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' USERLAND=GNU '
  scopes:
    - meta.scope.case-clause-body
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: '*'
  scopesBegin:
    - meta.scope.case-pattern
  scopes:
    - keyword.operator.glob
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' USERLAND='
  scopesBegin:
    - meta.scope.case-clause-body
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: UNAME
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.scope.case-clause-body
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
  scopesEnd:
    - meta.scope.case-body
    - meta.scope.case-clause
- source: esac
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.case-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Turn on extended globbing and programmable completion'
  scopesEnd:
    - comment.line.number-sign
- source: shopt
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: s
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: extglob
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: progcomp
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' A lot of the following one-liners were taken directly from the'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' completion examples provided with the bash 2.04 source distribution'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Make directory commands see only directories'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: d
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: pushd
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' The following section lists completions that are redefined later'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Do NOT break these over multiple lines.'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' START exclude -- do NOT remove this line'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' bzcmp, bzdiff, bz*grep, bzless, bzmore intentionally not here, see Debian: #455510'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.?(t)bz?(2)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: bunzip2
  scopesBegin:
    - string.unquoted.argument
- source: bzcat
- source: pbunzip2
- source: pbzcat
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(zip|[ejw]ar|exe|pk3|wsz|zargo|xpi|sxw|o[tx]t|od[fgpst]|epub|apk)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: unzip
  scopesBegin:
    - string.unquoted.argument
- source: zipinfo
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '*.Z'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: compress
  scopesBegin:
    - string.unquoted.argument
- source: znew
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' zcmp, zdiff, z*grep, zless, zmore intentionally not here, see Debian: #455510'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(Z|[gGd]z|t[ag]z)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: gunzip
  scopesBegin:
    - string.unquoted.argument
- source: zcat
- source: unpigz
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.Z'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: uncompress
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' lzcmp, lzdiff intentionally not here, see Debian: #455510'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(tlz|lzma)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: lzcat
  scopesBegin:
    - string.unquoted.argument
- source: lzegrep
- source: lzfgrep
- source: lzgrep
- source: lzless
- source: lzmore
- source: unlzma
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(?(t)xz|tlz|lzma)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: unxz
  scopesBegin:
    - string.unquoted.argument
- source: xzcat
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.lrz'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: lrunzip
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(gif|jp?(e)g|miff|tif?(f)|pn[gm]|p[bgp]m|bmp|xpm|ico|xwd|tga|pcx)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ee
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(gif|jp?(e)g|tif?(f)|png|p[bgp]m|bmp|x[bp]m|rle|rgb|pcx|fits|pm)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: xv
  scopesBegin:
    - string.unquoted.argument
- source: qiv
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(@(?(e)ps|?(E)PS|pdf|PDF)?(.gz|.GZ|.bz2|.BZ2|.Z))'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: gv
  scopesBegin:
    - string.unquoted.argument
- source: ggv
- source: kghostview
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(dvi|DVI)?(.@(gz|Z|bz2))'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: xdvi
  scopesBegin:
    - string.unquoted.argument
- source: kdvi
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.dvi'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: dvips
  scopesBegin:
    - string.unquoted.argument
- source: dviselect
- source: dvitype
- source: dvipdf
- source: advi
- source: dvipdfm
- source: dvipdfmx
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.[pf]df'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: acroread
  scopesBegin:
    - string.unquoted.argument
- source: gpdf
- source: xpdf
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(?(e)ps|pdf)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: kpdf
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: >-
    !*.@(@(?(e)ps|?(E)PS|[pf]df|[PF]DF|dvi|DVI)?(.gz|.GZ|.bz2|.BZ2)|cb[rz]|djv?(u)|gif|jp?(e)g|miff|tif?(f)|pn[gm]|p[bgp]m|bmp|xpm|ico|xwd|tga|pcx|fdf)
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: evince
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: >-
    !*.@(okular|@(?(e|x)ps|?(E|X)PS|pdf|PDF|dvi|DVI|cb[rz]|CB[RZ]|djv?(u)|DJV?(U)|dvi|DVI|gif|jp?(e)g|miff|tif?(f)|pn[gm]|p[bgp]m|bmp|xpm|ico|xwd|tga|pcx|GIF|JP?(E)G|MIFF|TIF?(F)|PN[GM]|P[BGP]M|BMP|XPM|ICO|XWD|TGA|PCX|epub|EPUB|odt|ODT|fb?(2)|FB?(2)|mobi|MOBI|g3|G3|chm|CHM|fdf|FDF)?(.?(gz|GZ|bz2|BZ2)))
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: okular
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(?(e)ps|pdf)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ps2pdf
  scopesBegin:
    - string.unquoted.argument
- source: ps2pdf12
- source: ps2pdf13
- source: ps2pdf14
- source: ps2pdfwr
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.texi*'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: makeinfo
  scopesBegin:
    - string.unquoted.argument
- source: texi2html
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(?(la)tex|texi|dtx|ins|ltx)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: tex
  scopesBegin:
    - string.unquoted.argument
- source: latex
- source: slitex
- source: jadetex
- source: pdfjadetex
- source: pdftex
- source: pdflatex
- source: texi2dvi
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.mp3'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: mpg123
  scopesBegin:
    - string.unquoted.argument
- source: mpg321
- source: madplay
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: >-
    !*@(.@(mp?(e)g|MP?(E)G|wma|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|wmv|mp[234]|MP[234]|m4[pv]|M4[PV]|mkv|MKV|og[gmv]|OG[GMV]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM)|+([0-9]).@(vdr|VDR))?(.part)
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: xine
  scopesBegin:
    - string.unquoted.argument
- source: aaxine
- source: fbxine
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: >-
    !*@(.@(mp?(e)g|MP?(E)G|wma|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|wmv|mp[234]|MP[234]|m4[pv]|M4[PV]|mkv|MKV|og[gmv]|OG[GMV]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM|iso|ISO)|+([0-9]).@(vdr|VDR))?(.part)
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: kaffeine
  scopesBegin:
    - string.unquoted.argument
- source: dragon
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(avi|asf|wmv)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: aviplay
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(rm?(j)|ra?(m)|smi?(l))'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: realplay
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(mpg|mpeg|avi|mov|qt)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: xanim
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(ogg|m3u|flac|spx)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ogg123
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(mp3|ogg|pls|m3u)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: gqmpeg
  scopesBegin:
    - string.unquoted.argument
- source: freeamp
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.fig'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: xfig
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(mid?(i)|cmf)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: playmidi
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(mid?(i)|rmi|rcp|[gr]36|g18|mod|xm|it|x3m|s[3t]m|kar)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: timidity
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(m[eo]d|s[3t]m|xm|it)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: modplugplay
  scopesBegin:
    - string.unquoted.argument
- source: modplug123
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '*.@(o|so|so.!(conf)|a|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: vi
  scopesBegin:
    - string.unquoted.argument
- source: vim
- source: gvim
- source: rvim
- source: view
- source: rview
- source: rgvim
- source: rgview
- source: gview
- source: emacs
- source: xemacs
- source: sxemacs
- source: kate
- source: kwrite
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@([eE][xX][eE]?(.[sS][oO])|[cC][oO][mM]|[sS][cC][rR])'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: wine
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(zip|z|gz|tgz)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: bzme
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' konqueror not here on purpose, it''s more than a web/html browser'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: netscape
  scopesBegin:
    - string.unquoted.argument
- source: mozilla
- source: lynx
- source: opera
- source: galeon
- source: dillo
- source: elinks
- source: amaya
- source: firefox
- source: mozilla-firefox
- source: iceweasel
- source: google-chrome
- source: chromium-browser
- source: epiphany
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(sxw|stw|sxg|sgl|doc?([mx])|dot?([mx])|rtf|txt|htm|html|odt|ott|odm)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: oowriter
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(sxi|sti|pps?(x)|ppt?([mx])|pot?([mx])|odp|otp)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ooimpress
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(sxc|stc|xls?([bmx])|xlw|xlt?([mx])|[ct]sv|ods|ots)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: oocalc
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(sxd|std|sda|sdd|odg|otg)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: oodraw
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(sxm|smf|mml|odf)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: oomath
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.odb'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: oobase
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.[rs]pm'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: rpm2cpio
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.aux'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: bibtex
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.po'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: poedit
  scopesBegin:
    - string.unquoted.argument
- source: gtranslator
- source: kbabel
- source: lokalize
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@([Pp][Rr][Gg]|[Cc][Ll][Pp])'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: harbour
  scopesBegin:
    - string.unquoted.argument
- source: gharbour
- source: hbpp
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.[Hh][Rr][Bb]'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: hbrun
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.ly'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: lilypond
  scopesBegin:
    - string.unquoted.argument
- source: ly2dvi
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(dif?(f)|?(d)patch)?(.@([gx]z|bz2|lzma))'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: cdiff
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.lyx'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: lyx
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: >-
    !@(*.@(ks|jks|jceks|p12|pfx|bks|ubr|gkr|cer|crt|cert|p7b|pkipath|pem|p10|csr|crl)|cacerts)
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: portecle
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: complete
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@(mp[234c]|og[ag]|@(fl|a)ac|m4[abp]|spx|tta|w?(a)v|wma|aif?(f)|asf|ape)'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: kid3
  scopesBegin:
    - string.unquoted.argument
- source: kid3-qt
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' FINISH exclude -- do not remove this line'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' start of section containing compspecs that can be handled within bash'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' user commands see only users'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: u
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: su
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: write
- source: chfn
- source: groups
- source: slay
- source: w
- source: sux
- source: runuser
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' bg completes with stopped jobs'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: A
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: stopped
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '"%'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: S
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '"'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: bg
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' other job commands'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: j
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '"%'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: S
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '"'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: fg
  scopesBegin:
    - string.unquoted.argument
- source: jobs
- source: disown
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' readonly and unset complete with shell variables'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: readonly
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: unset
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' set completes with set options'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: A
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: setopt
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: set
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' shopt completes with shopt options'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: A
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: shopt
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: shopt
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' helptopics'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: A
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: helptopic
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: help
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' unalias completes with aliases'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: a
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: unalias
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' bind completes with readline bindings (make this more intelligent)'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: A
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: binding
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: bind
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' type and which complete on commands'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: c
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: command
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: type
- source: which
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' builtin completes on builtins'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: b
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: builtin
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' start of section containing completion functions called by other functions'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' This function checks whether we have a given program on the system.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' No need for bulky functions in memory if we don''t.'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: have
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: unset
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: have
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Completions for system administrator commands are installed as well in'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' case completion is attempted via `sudo command ...''.'
  scopesEnd:
    - comment.line.number-sign
- source: PATH
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PATH
  scopes:
    - variable.other.normal
- source: ':/sbin:/usr/sbin:/usr/local/sbin'
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.expression.assignment
- source: type
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '&'
  scopes:
    - punctuation.separator.statement.background
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: '/dev/null '
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: have
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'yes'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function checks whether a given readline variable'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' is `on''.'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _rl_enabled
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: bind
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: +
  scopesBegin:
    - meta.structure.extglob
  scopes:
    - keyword.operator.extglob
- source: (
  scopes:
    - punctuation.definition.extglob
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: ':space:'
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: )
  scopes:
    - punctuation.definition.extglob
  scopesEnd:
    - meta.structure.extglob
- source: 'on'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function shell-quotes the argument'
  scopesEnd:
    - comment.line.number-sign
- source: quote
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: \'
  scopesBegin:
    - meta.argument
  scopes:
    - constant.character.escape
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: \'
  scopes:
    - constant.character.escape
- source: /
  scopes:
    - keyword.operator.expansion
- source: \'
  scopesBegin:
    - constant.character.escape
- source: \\
- source: \'
- source: \'
  scopesEnd:
    - meta.parameter-expansion
    - constant.character.escape
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: \'
  scopes:
    - constant.character.escape
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: '''# Help vim syntax highlighting'
  scopesEnd:
    - comment.line.number-sign
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' @see _quote_readline_by_ref()'
  scopesEnd:
    - comment.line.number-sign
- source: quote_readline
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: quoted
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: _quote_readline_by_ref
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ret
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: printf
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '%s'
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: ret
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' quote_readline()'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' This function shell-dequotes the argument'
  scopesEnd:
    - comment.line.number-sign
- source: dequote
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: echo
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Assign variable one scope above the caller'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Usage: local "$1" && _upvar $1 "value(s)"'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Param: $1  Variable name to assign value to'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Param: $*  Value(s) to assign.  If multiple values, an array is'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '            assigned, otherwise a single value is assigned.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' NOTE: For assigning multiple variables, use ''_upvars''.  Do NOT'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '       use multiple ''_upvar'' calls, since one ''_upvar'' call might'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '       reassign a variable to be used by another ''_upvar'' call.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' See: http://fvue.nl/wiki/Bash:_Passing_variables_by_reference'
  scopesEnd:
    - comment.line.number-sign
- source: _upvar
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: unset
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Unset & validate varname'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: ((
  scopesBegin:
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '#'
  scopes:
    - variable.language.special
- source: '=='
  scopes:
    - keyword.operator.arithmetic
- source: '2'
  scopes:
    - constant.numeric.integer
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '='
  scopes:
    - string.unquoted.argument
- source: \"
  scopesBegin:
    - constant.character.escape
- source: \$
  scopesEnd:
    - constant.character.escape
- source: '2'
  scopes:
    - string.unquoted.argument
- source: \"
  scopes:
    - constant.character.escape
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Return single value'
  scopesEnd:
    - comment.line.number-sign
- source: else
  scopes:
    - keyword.control.else
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '='
  scopes:
    - string.unquoted.argument
- source: \(
  scopesBegin:
    - constant.character.escape
- source: \"
- source: \$
  scopesEnd:
    - constant.character.escape
- source: '{@:2}'
  scopes:
    - string.unquoted.argument
- source: \"
  scopesBegin:
    - constant.character.escape
- source: \)
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - constant.character.escape
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Return array'
  scopesEnd:
    - comment.line.number-sign
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Assign variables one scope above the caller'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Usage: local varname [varname ...] && '
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '        _upvars [-v varname value] | [-aN varname [value ...]] ...'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Available OPTIONS:'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     -aN  Assign next N values to varname as array'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     -v   Assign single value to varname'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Return: 1 if error occurs'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' See: http://fvue.nl/wiki/Bash:_Passing_variables_by_reference'
  scopesEnd:
    - comment.line.number-sign
- source: _upvars
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.pipe
- source: ((
  scopesBegin:
    - meta.statement
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '#'
  scopes:
    - variable.language.special
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.statement
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: FUNCNAME
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ': usage: '
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: FUNCNAME
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ' [-v varname'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'value] | [-aN varname [value ...]] ...'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '1'
  scopes:
    - keyword.operator.redirect.stdout
- source: '>&2'
  scopes:
    - keyword.operator.redirect
  scopesEnd:
    - meta.argument
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '2'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: ((
  scopesBegin:
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '#'
  scopes:
    - variable.language.special
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: case
  scopesBegin:
    - meta.scope.case-block
  scopes:
    - keyword.control
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: in
  scopesBegin:
    - meta.scope.case-body
  scopes:
    - keyword.control
- source: '-a'
  scopesBegin:
    - meta.scope.case-clause
    - meta.scope.case-pattern
- source: '*'
  scopes:
    - keyword.operator.glob
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: '#'
  scopesBegin:
    - meta.scope.case-clause-body
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Error checking'
  scopesEnd:
    - comment.line.number-sign
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: '-a'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: '{'
  scopesBegin:
    - meta.scope.group
  scopes:
    - punctuation.definition.group
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'bash: '
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: FUNCNAME
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ': '
- source: \`
  scopes:
    - constant.character.escape
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: ''': missing'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number specifier
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '1'
  scopes:
    - keyword.operator.redirect.stdout
- source: '>&2'
  scopes:
    - keyword.operator.redirect
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: '}'
  scopes:
    - punctuation.definition.group
  scopesEnd:
    - meta.scope.group
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '%d'
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: '-a'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '&'
  scopes:
    - punctuation.separator.statement.background
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: ' /dev/null '
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: '{'
  scopesBegin:
    - meta.scope.group
  scopes:
    - punctuation.definition.group
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'bash:'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: FUNCNAME
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ': '
- source: \`
  scopes:
    - constant.character.escape
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: ''': invalid number specifier'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '1'
  scopes:
    - keyword.operator.redirect.stdout
- source: '>&2'
  scopes:
    - keyword.operator.redirect
  scopesEnd:
    - meta.argument
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: '}'
  scopes:
    - punctuation.definition.group
  scopesEnd:
    - meta.scope.group
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Assign array of -aN elements'
  scopesEnd:
    - comment.line.number-sign
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: unset
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '='
  scopes:
    - string.unquoted.argument
- source: \(
  scopesBegin:
    - constant.character.escape
- source: \"
- source: \$
  scopesEnd:
    - constant.character.escape
- source: '{@:3:'
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: '-a'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '}'
  scopes:
    - string.unquoted.argument
- source: \"
  scopesBegin:
    - constant.character.escape
- source: \)
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - constant.character.escape
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: shift
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $((
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.evaluation.arithmetic.begin
- source: $
  scopesBegin:
    - string.other.math
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: '-a'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '2'
  scopes:
    - constant.numeric.integer
  scopesEnd:
    - string.other.math
- source: ))
  scopes:
    - punctuation.definition.evaluation.arithmetic.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: '{'
  scopesBegin:
    - meta.scope.group
  scopes:
    - punctuation.definition.group
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'bash: '
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: FUNCNAME
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ':'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \`
  scopes:
    - constant.character.escape
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: '+ '
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: ''': missing argument(s)'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '1'
  scopes:
    - keyword.operator.redirect.stdout
- source: '>&2'
  scopes:
    - keyword.operator.redirect
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: '}'
  scopes:
    - punctuation.definition.group
  scopesEnd:
    - meta.scope.case-clause-body
    - meta.scope.group
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: '-v'
  scopesBegin:
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: '#'
  scopesBegin:
    - meta.scope.case-clause-body
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Assign single value'
  scopesEnd:
    - comment.line.number-sign
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: unset
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '='
  scopes:
    - string.unquoted.argument
- source: \"
  scopesBegin:
    - constant.character.escape
- source: \$
  scopesEnd:
    - constant.character.escape
- source: '3'
  scopes:
    - string.unquoted.argument
- source: \"
  scopes:
    - constant.character.escape
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: shift
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '3'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: '{'
  scopesBegin:
    - meta.scope.group
  scopes:
    - punctuation.definition.group
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'bash: '
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: FUNCNAME
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ': '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: ': missing'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: argument(s)
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '1'
  scopes:
    - keyword.operator.redirect.stdout
- source: '>&2'
  scopes:
    - keyword.operator.redirect
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: '}'
  scopes:
    - punctuation.definition.group
  scopesEnd:
    - meta.scope.case-clause-body
    - meta.scope.group
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: '*'
  scopesBegin:
    - meta.scope.case-pattern
  scopes:
    - keyword.operator.glob
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: echo
  scopesBegin:
    - meta.scope.case-clause-body
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'bash: '
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: FUNCNAME
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ': '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: ': invalid option'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '1'
  scopes:
    - keyword.operator.redirect.stdout
- source: '>&2'
  scopes:
    - keyword.operator.redirect
  scopesEnd:
    - meta.argument
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.scope.case-clause-body
    - meta.statement
    - meta.statement.command
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
  scopesEnd:
    - meta.scope.case-body
    - meta.scope.case-clause
- source: esac
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.case-block
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Reassemble command line words, excluding specified characters from the'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' list of word completion separators (COMP_WORDBREAKS).'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $1 chars  Characters out of $COMP_WORDBREAKS which should'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     NOT be considered word breaks. This is useful for things like scp where'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     we want to return host:path and not only path, so we would pass the'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     colon (:) as $1 here.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $2 words  Name of variable to return words to'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $3 cword  Name of variable to return cword to'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: __reassemble_comp_words_by_ref
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: exclude
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: i
- source: j
- source: ref
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Exclude word separator characters?'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Yes, exclude word separator characters;'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Exclude only those characters, which were really included'
  scopesEnd:
    - comment.line.number-sign
- source: exclude
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: '['
  scopes:
    - punctuation.section.array
- source: ^$COMP_WORDBREAKS
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Default to cword unchanged'
  scopesEnd:
    - comment.line.number-sign
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '3'
  scopes:
    - variable.parameter.positional
- source: '='
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: COMP_CWORD
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Are characters excluded which were former included?'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: exclude
  scopes:
    - variable.other.normal
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Yes, list of word completion separators has shrunk;'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Re-assemble words to complete'
  scopesEnd:
    - comment.line.number-sign
- source: for
  scopesBegin:
    - meta.scope.for-loop
  scopes:
    - keyword.control
- source: ((
  scopesBegin:
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: i
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.arithmetic
- source: '0'
  scopes:
    - constant.numeric.integer
- source: ','
  scopes:
    - keyword.operator.arithmetic
- source: j
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.arithmetic
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: <
  scopes:
    - keyword.operator.arithmetic
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMP_WORDS
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: ++
  scopesBegin:
    - keyword.operator.arithmetic
- source: ','
  scopesEnd:
    - keyword.operator.arithmetic
- source: j
  scopes:
    - variable.other.normal
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Is current word not word 0 (the command itself) and is word not'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' empty and is word made up of just word separator characters to be'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' excluded?'
  scopesEnd:
    - comment.line.number-sign
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '-gt'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_WORDS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: $i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_WORDS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: $i
- source: ']'
  scopes:
    - punctuation.section.array
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: '['
  scopes:
    - punctuation.section.array
- source: ^$exclude
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '=='
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_WORDS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: $i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: j
  scopes:
    - variable.other.normal
- source: '-ge'
  scopes:
    - keyword.operator.logical
- source: '2'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: ((
  scopesBegin:
    - meta.statement
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: j
  scopes:
    - variable.other.normal
- source: '--'
  scopes:
    - keyword.operator.arithmetic
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.statement
    - meta.arithmetic
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Append word separator to current word'
  scopesEnd:
    - comment.line.number-sign
- source: ref
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '['
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: j
  scopes:
    - variable.other.normal
- source: ']'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: eval
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '['
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: j
  scopes:
    - variable.other.normal
- source: ']='
  scopes:
    - string.unquoted.argument
- source: \$
  scopes:
    - constant.character.escape
- source: '{!ref}'
  scopes:
    - string.unquoted.argument
- source: \$
  scopes:
    - constant.character.escape
- source: '{COMP_WORDS[i]}'
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Indicate new cword'
  scopesEnd:
    - comment.line.number-sign
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: COMP_CWORD
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '3'
  scopes:
    - variable.parameter.positional
- source: '='
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: j
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Indicate next word if available, else end *both* while and for loop'
  scopesEnd:
    - comment.line.number-sign
- source: ((
  scopesBegin:
    - meta.statement
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: <
  scopes:
    - keyword.operator.arithmetic
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMP_WORDS
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.statement
    - meta.arithmetic
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: ((
  scopesBegin:
    - meta.statement
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: i
  scopes:
    - variable.other.normal
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.statement
    - meta.arithmetic
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: break
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.break
- source: '2'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Append word to current word'
  scopesEnd:
    - comment.line.number-sign
- source: ref
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '['
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: j
  scopes:
    - variable.other.normal
- source: ']'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: eval
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '['
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: j
  scopes:
    - variable.other.normal
- source: ']='
  scopes:
    - string.unquoted.argument
- source: \$
  scopes:
    - constant.character.escape
- source: '{!ref}'
  scopes:
    - string.unquoted.argument
- source: \$
  scopes:
    - constant.character.escape
- source: '{COMP_WORDS[i]}'
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Indicate new cword'
  scopesEnd:
    - comment.line.number-sign
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '=='
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: COMP_CWORD
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '3'
  scopes:
    - variable.parameter.positional
- source: '='
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: j
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-loop
- source: else
  scopes:
    - keyword.control.else
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' No, list of word completions separators hasn''t changed;'
  scopesEnd:
    - comment.line.number-sign
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '='
  scopes:
    - string.unquoted.argument
- source: \(
  scopesBegin:
    - constant.character.escape
- source: \"
- source: \$
  scopesEnd:
    - constant.character.escape
- source: '{COMP_WORDS[@]}'
  scopes:
    - string.unquoted.argument
- source: \"
  scopesBegin:
    - constant.character.escape
- source: \)
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - constant.character.escape
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' __reassemble_comp_words_by_ref()'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $1 exclude  Characters out of $COMP_WORDBREAKS which should NOT be'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     considered word breaks. This is useful for things like scp where'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     we want to return host:path and not only path, so we would pass the'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     colon (:) as $1 in this case.  Bash-3 doesn''t do word splitting, so this'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     ensures we get the same word on both bash-3 and bash-4.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $2 words  Name of variable to return words to'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $3 cword  Name of variable to return cword to'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $4 cur  Name of variable to return current word to complete to'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @see ___get_cword_at_cursor_by_ref()'
  scopesEnd:
    - comment.line.number-sign
- source: __get_cword_at_cursor_by_ref
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: cword
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: words=
  scopesEnd:
    - string.unquoted.argument
- source: (
  scopesEnd:
    - meta.statement.command
    - meta.argument
- source: )
- source: __reassemble_comp_words_by_ref
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: words
  scopesBegin:
    - string.unquoted.argument
- source: cword
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: i
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: cur2
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: local
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: cur
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: COMP_LINE
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: local
  scopes:
    - storage.modifier.local
- source: index
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: COMP_POINT
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: for
  scopesBegin:
    - meta.scope.for-loop
  scopes:
    - keyword.control
- source: ((
  scopesBegin:
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: i
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.arithmetic
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: <=
  scopes:
    - keyword.operator.arithmetic
- source: cword
  scopes:
    - variable.other.normal
- source: '; '
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: i
  scopes:
    - variable.other.normal
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Current word fits in $cur?'
  scopesEnd:
    - comment.line.number-sign
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: cur
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '-ge'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: words
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' $cur doesn''t match cword?'
  scopesEnd:
    - comment.line.number-sign
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '0'
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: words
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Strip first character'
  scopesEnd:
    - comment.line.number-sign
- source: cur
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Decrease cursor position'
  scopesEnd:
    - comment.line.number-sign
- source: ((
  scopesBegin:
    - meta.statement
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: index
  scopes:
    - variable.other.normal
- source: '--'
  scopes:
    - keyword.operator.arithmetic
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.statement
    - meta.arithmetic
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Does found word matches cword?'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '-lt'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cword
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' No, cword lies further;'
  scopesEnd:
    - comment.line.number-sign
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: old_size
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: cur
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: cur
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: local
  scopes:
    - storage.modifier.local
- source: new_size
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: cur
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: index
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $((
  scopes:
    - punctuation.definition.evaluation.arithmetic.begin
- source: index
  scopesBegin:
    - string.other.math
  scopes:
    - variable.other.normal
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: old_size
  scopes:
    - variable.other.normal
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: new_size
  scopes:
    - variable.other.normal
  scopesEnd:
    - string.other.math
- source: ))
  scopes:
    - punctuation.definition.evaluation.arithmetic.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-loop
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: cword
- source: ']'
  scopes:
    - punctuation.section.array
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '0'
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: cur
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' We messed up. At least return the whole word so things keep working'
  scopesEnd:
    - comment.line.number-sign
- source: cur2
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: cword
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: else
  scopes:
    - keyword.control.else
- source: cur2
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '0'
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: index
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '3'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '4'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: _upvars
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: a
  scopesBegin:
    - constant.other.option
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: words
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - string.unquoted.argument
    - constant.other.option
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '3'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cword
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '4'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur2
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Get the word to complete and optional previous words.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' This is nicer than ${COMP_WORDS[$COMP_CWORD]}, since it handles cases'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' where the user is completing in the middle of a word.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' (For example, if the line is "ls foobar",'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' and the cursor is here -------->   ^'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Also one is able to cross over possible wordbreak characters.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Usage: _get_comp_words_by_ref [OPTIONS] [VARNAMES]'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Available VARNAMES:'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     cur         Return cur via $cur'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     prev        Return prev via $prev'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     words       Return words via $words'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     cword       Return cword via $cword'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' Available OPTIONS:'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     -n EXCLUDE  Characters out of $COMP_WORDBREAKS which should NOT be '
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '                 considered word breaks. This is useful for things like scp'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '                 where we want to return host:path and not only path, so we'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '                 would pass the colon (:) as -n option in this case.  Bash-3'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '                 doesn''t do word splitting, so this ensures we get the same'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '                 word on both bash-3 and bash-4.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     -c VARNAME  Return cur via $VARNAME'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     -p VARNAME  Return prev via $VARNAME'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     -w VARNAME  Return words via $VARNAME'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     -i VARNAME  Return cword via $VARNAME'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' Example usage:'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '    $ _get_comp_words_by_ref -n : cur prev'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _get_comp_words_by_ref
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: exclude
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: flag
- source: i
- source: OPTIND=
- source: '1'
  scopes:
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: cur
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: cword
- source: words=
  scopesEnd:
    - string.unquoted.argument
- source: (
  scopesEnd:
    - meta.statement.command
    - meta.argument
- source: )
- source: local
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: upargs
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - punctuation
- source: )
  scopesEnd:
    - punctuation
- source: upvars
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - punctuation
- source: )
  scopesEnd:
    - meta.expression.assignment
    - punctuation
- source: vcur
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: vcword
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: vprev
- source: vwords
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: getopts
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'c:i:n:p:w:'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: flag
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional.all
- source: '@'
  scopes:
    - variable.parameter.positional.all
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: case
  scopesBegin:
    - meta.scope.case-block
  scopes:
    - keyword.control
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: flag
  scopes:
    - variable.other.normal
- source: in
  scopesBegin:
    - meta.scope.case-body
  scopes:
    - keyword.control
- source: c
  scopesBegin:
    - meta.scope.case-clause
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' vcur='
  scopesBegin:
    - meta.scope.case-clause-body
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: OPTARG
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.scope.case-clause-body
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: i
  scopesBegin:
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' vcword='
  scopesBegin:
    - meta.scope.case-clause-body
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: OPTARG
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.scope.case-clause-body
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: 'n'
  scopesBegin:
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' exclude='
  scopesBegin:
    - meta.scope.case-clause-body
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: OPTARG
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.scope.case-clause-body
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: p
  scopesBegin:
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' vprev='
  scopesBegin:
    - meta.scope.case-clause-body
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: OPTARG
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.scope.case-clause-body
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: w
  scopesBegin:
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' vwords='
  scopesBegin:
    - meta.scope.case-clause-body
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: OPTARG
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.scope.case-clause-body
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
  scopesEnd:
    - meta.scope.case-body
    - meta.scope.case-clause
- source: esac
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.case-block
- source: done
  scopesBegin:
    - keyword.control
- source: while
  scopesEnd:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '#'
  scopes:
    - variable.language.special
- source: '-ge'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: OPTIND
  scopes:
    - variable.other.normal
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: case
  scopesBegin:
    - meta.scope.case-block
  scopes:
    - keyword.control
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '!'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: OPTIND
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: in
  scopesBegin:
    - meta.scope.case-body
  scopes:
    - keyword.control
- source: cur
  scopesBegin:
    - meta.scope.case-clause
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: '   vcur=cur '
  scopes:
    - meta.scope.case-clause-body
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: prev
  scopesBegin:
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: '  vprev=prev '
  scopes:
    - meta.scope.case-clause-body
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: cword
  scopesBegin:
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' vcword=cword '
  scopes:
    - meta.scope.case-clause-body
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: words
  scopesBegin:
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' vwords=words '
  scopes:
    - meta.scope.case-clause-body
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: '*'
  scopesBegin:
    - meta.scope.case-pattern
  scopes:
    - keyword.operator.glob
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' echo '
  scopesBegin:
    - meta.scope.case-clause-body
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'bash: '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: FUNCNAME
  scopes:
    - variable.other.normal
- source: '(): '
- source: \`
  scopes:
    - constant.character.escape
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '!'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: OPTIND
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ''': unknown argument'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ' \'
- source: 1>
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '&'
  scopes:
    - punctuation.separator.statement.background
- source: '2'
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.scope.case-clause-body
    - meta.statement
    - meta.statement.command
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
  scopesEnd:
    - meta.scope.case-body
    - meta.scope.case-clause
- source: esac
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.case-block
- source: let
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: OPTIND += 1
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: __get_cword_at_cursor_by_ref
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: exclude
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: words
  scopesBegin:
    - string.unquoted.argument
- source: cword
- source: cur
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: vcur
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: '{'
  scopesBegin:
    - meta.scope.group
  scopes:
    - punctuation.definition.group
- source: upvars
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: vcur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: upargs
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: (
  scopes:
    - punctuation
- source: '-v'
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: vcur
  scopes:
    - variable.other.normal
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: '}'
  scopes:
    - punctuation.definition.group
  scopesEnd:
    - meta.scope.group
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: vcword
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: '{'
  scopesBegin:
    - meta.scope.group
  scopes:
    - punctuation.definition.group
- source: upvars
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: vcword
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: upargs
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: (
  scopes:
    - punctuation
- source: '-v'
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: vcword
  scopes:
    - variable.other.normal
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cword
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: '}'
  scopes:
    - punctuation.definition.group
  scopesEnd:
    - meta.scope.group
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: vprev
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: '{'
  scopesBegin:
    - meta.scope.group
  scopes:
    - punctuation.definition.group
- source: upvars
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: vprev
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: upargs
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: (
  scopes:
    - punctuation
- source: '-v'
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: vprev
  scopes:
    - variable.other.normal
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: cword - 1
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: '}'
  scopes:
    - punctuation.definition.group
  scopesEnd:
    - meta.scope.group
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: vwords
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: '{'
  scopesBegin:
    - meta.scope.group
  scopes:
    - punctuation.definition.group
- source: upvars
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: vwords
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: upargs
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: (
  scopes:
    - punctuation
- source: '-a'
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: words
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: vwords
  scopes:
    - variable.other.normal
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: '}'
  scopes:
    - punctuation.definition.group
  scopesEnd:
    - meta.scope.group
- source: ((
  scopesBegin:
    - meta.statement
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: upvars
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.statement
    - meta.arithmetic
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: upvars
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: _upvars
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: upargs
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Get the word to complete.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' This is nicer than ${COMP_WORDS[$COMP_CWORD]}, since it handles cases'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' where the user is completing in the middle of a word.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' (For example, if the line is "ls foobar",'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' and the cursor is here -------->   ^'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $1 string  Characters out of $COMP_WORDBREAKS which should NOT be'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     considered word breaks. This is useful for things like scp where'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     we want to return host:path and not only path, so we would pass the'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     colon (:) as $1 in this case.  Bash-3 doesn''t do word splitting, so this'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     ensures we get the same word on both bash-3 and bash-4.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $2 integer  Index number of word to return, negatively offset to the'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     current word (default is 0, previous is 1), respecting the exclusions'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     given at $1.  For example, `_get_cword "=:" 1'' returns the word left of'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     the current word, respecting the exclusions "=:".'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @deprecated  Use `_get_comp_words_by_ref cur'' instead'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @see _get_comp_words_by_ref()'
  scopesEnd:
    - comment.line.number-sign
- source: _get_cword
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: LC_CTYPE
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.expression.assignment
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: cword
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: words
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: __reassemble_comp_words_by_ref
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: words
  scopesBegin:
    - string.unquoted.argument
- source: cword
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' return previous word offset by $2'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: '['
  scopes:
    - punctuation.section.array
- source: ^0-9
- source: ']'
  scopes:
    - punctuation.section.array
- source: /
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '%s'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: cword-$2
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: elif
  scopes:
    - keyword.control.elif
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: words
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: cword
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '-eq'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: '||'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: COMP_POINT
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMP_LINE
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '%s'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: cword
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: i
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: local
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: cur
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: COMP_LINE
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: local
  scopes:
    - storage.modifier.local
- source: index
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: COMP_POINT
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: for
  scopesBegin:
    - meta.scope.for-loop
  scopes:
    - keyword.control
- source: ((
  scopesBegin:
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: i
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.arithmetic
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: <=
  scopes:
    - keyword.operator.arithmetic
- source: cword
  scopes:
    - variable.other.normal
- source: '; '
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: i
  scopes:
    - variable.other.normal
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Current word fits in $cur?'
  scopesEnd:
    - comment.line.number-sign
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: cur
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '-ge'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: words
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' $cur doesn''t match cword?'
  scopesEnd:
    - comment.line.number-sign
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '0'
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: words
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Strip first character'
  scopesEnd:
    - comment.line.number-sign
- source: cur
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Decrease cursor position'
  scopesEnd:
    - comment.line.number-sign
- source: ((
  scopesBegin:
    - meta.statement
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: index
  scopes:
    - variable.other.normal
- source: '--'
  scopes:
    - keyword.operator.arithmetic
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.statement
    - meta.arithmetic
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Does found word matches cword?'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '-lt'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cword
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' No, cword lies further;'
  scopesEnd:
    - comment.line.number-sign
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: old_size
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: cur
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: cur
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: local
  scopes:
    - storage.modifier.local
- source: new_size
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: cur
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: index
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $((
  scopes:
    - punctuation.definition.evaluation.arithmetic.begin
- source: index
  scopesBegin:
    - string.other.math
  scopes:
    - variable.other.normal
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: old_size
  scopes:
    - variable.other.normal
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: new_size
  scopes:
    - variable.other.normal
  scopesEnd:
    - string.other.math
- source: ))
  scopes:
    - punctuation.definition.evaluation.arithmetic.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-loop
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: cword
- source: ']'
  scopes:
    - punctuation.section.array
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '0'
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: cur
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' We messed up! At least return the whole word so things'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' keep working'
  scopesEnd:
    - comment.line.number-sign
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '%s'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: cword
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '%s'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '0'
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: index
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' _get_cword()'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Get word previous to the current word.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' This is a good alternative to `prev=${COMP_WORDS[COMP_CWORD-1]}'' because bash4'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' will properly return the previous word with respect to any given exclusions to'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' COMP_WORDBREAKS.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @deprecated  Use `_get_comp_words_by_ref cur prev'' instead'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @see _get_comp_words_by_ref()'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _get_pword
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: COMP_CWORD
  scopes:
    - variable.other.normal
- source: '-ge'
  scopes:
    - keyword.operator.logical
- source: '1'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: _get_cword
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '@'
  scopesBegin:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: ':-'
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '1'
  scopes:
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' If the word-to-complete contains a colon (:), left-trim COMPREPLY items with'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' word-to-complete.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' On bash-3, and bash-4 with a colon in COMP_WORDBREAKS, words containing'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' colons are always completed as entire words if the word to complete contains'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' a colon.  This function fixes this, by removing the colon-containing-prefix'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' from COMPREPLY items.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' The preferred solution is to remove the colon (:) from COMP_WORDBREAKS in'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' your .bashrc:'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '    # Remove colon (:) from list of word completion separators'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '    COMP_WORDBREAKS=${COMP_WORDBREAKS//:}'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' See also: Bash FAQ - E13) Why does filename completion misbehave if a colon'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' appears in the filename? - http://tiswww.case.edu/php/chet/bash/FAQ'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $1 current word to complete (cur)'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @modifies global array $COMPREPLY'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: __ltrim_colon_completions
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' If word-to-complete contains a colon,'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' and bash-version < 4,'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' or bash-version >= 4 and COMP_WORDBREAKS contains a colon'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ':'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: ' ('
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: BASH_VERSINFO
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-lt'
  scopes:
    - keyword.operator.logical
- source: '4'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: '||'
  scopes:
    - keyword.operator.logical
- source: '            ('
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: BASH_VERSINFO
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-ge'
  scopes:
    - keyword.operator.logical
- source: '4'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: COMP_WORDBREAKS
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ':'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ') '
- source: '        )'
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Remove colon-word prefix from COMPREPLY items'
  scopesEnd:
    - comment.line.number-sign
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: colon_word
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: '%'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: '##'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
- source: ':'
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: local
  scopes:
    - storage.modifier.local
- source: i
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMPREPLY
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '*'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $((
  scopes:
    - punctuation.definition.evaluation.arithmetic.begin
- source: '--'
  scopesBegin:
    - string.other.math
  scopes:
    - keyword.operator.arithmetic
- source: i
  scopes:
    - variable.other.normal
  scopesEnd:
    - string.other.math
- source: ))
  scopes:
    - punctuation.definition.evaluation.arithmetic.end
- source: '-ge'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '['
  scopes:
    - punctuation.definition.array.access
- source: $i
  scopes:
    - variable.other.assignment
- source: ']'
  scopes:
    - punctuation.definition.array.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: $i
- source: ']'
  scopes:
    - punctuation.section.array
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: colon_word
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.parameter-expansion
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' __ltrim_colon_completions()'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' This function quotes the argument in a way so that readline dequoting'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' results in the original argument.  This is necessary for at least'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' `compgen'' which requires its arguments quoted/escaped:'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '     $ ls "a''b/"'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     c'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     $ compgen -f "a''b/"       # Wrong, doesn''t return output'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     $ compgen -f "a\''b/"      # Good (bash-4)'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     a\''b/c'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     $ compgen -f "a\\\\\''b/"  # Good (bash-3)'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     a\''b/c'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' On bash-3, special characters need to be escaped extra.  This is'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' unless the first character is a single quote ('').  If the single'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' quote appears further down the string, bash default completion also'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' fails, e.g.:'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '     $ ls ''a&b/'''
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     f'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     $ foo ''a&b/<TAB>  # Becomes: foo ''a&b/f'''
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     $ foo a''&b/<TAB>  # Nothing happens'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' See also:'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' - http://lists.gnu.org/archive/html/bug-bash/2009-03/msg00155.html'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' - http://www.mail-archive.com/bash-completion-devel@lists.alioth.\'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '   debian.org/msg01944.html'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $1  Argument to quote'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $2  Name of variable to return result to'
  scopesEnd:
    - comment.line.number-sign
- source: _quote_readline_by_ref
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '0'
  scopes:
    - variable.parameter.positional
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: BASH_VERSINFO
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-ge'
  scopes:
    - keyword.operator.logical
- source: '4'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Leave out first character'
  scopesEnd:
    - comment.line.number-sign
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '%s'
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Quote word, leaving out first character'
  scopesEnd:
    - comment.line.number-sign
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '%q'
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Double-quote word (bash-3)'
  scopesEnd:
    - comment.line.number-sign
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '%q'
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '!'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: '2'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: elif
  scopes:
    - keyword.control.elif
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: BASH_VERSINFO
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-le'
  scopes:
    - keyword.operator.logical
- source: '3'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '0'
  scopes:
    - variable.parameter.positional
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '=='
  scopes:
    - keyword.operator.logical
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '"'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '%q'
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '%q'
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' If result becomes quoted like this: $''string'', re-evaluate in order to'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' drop the additional quoting.  See also: http://www.mail-archive.com/'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' bash-completion-devel@lists.alioth.debian.org/msg01942.html'
  scopesEnd:
    - comment.line.number-sign
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '!'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: '2'
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '0'
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '=='
  scopes:
    - keyword.operator.logical
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: $
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '='
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '!'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: '2'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' _quote_readline_by_ref()'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' This function turns on "-o filenames" behavior dynamically. It is present'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' for bash < 4 reasons. See http://bugs.debian.org/272660#64 for info about'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' the bash < 4 compgen hack.'
  scopesEnd:
    - comment.line.number-sign
- source: _compopt_o_filenames
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' We test for compopt availability first because directly invoking it on'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' bash < 4 at this point may cause terminal echo to be turned off for some'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' reason, see https://bugzilla.redhat.com/653669 for more info.'
  scopesEnd:
    - comment.line.number-sign
- source: type
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: compopt
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '&'
  scopes:
    - punctuation.separator.statement.background
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: '/dev/null '
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: compopt
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: o
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: filenames
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: compgen
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: /non-existing-dir/
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function performs file and directory completion. It''s better than'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' simply using ''compgen -f'', because it honours spaces in filenames.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $1  If `-d'', complete only on directories.  Otherwise filter/pick only'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '            completions with `.$1'' and the uppercase version of it as file'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '            extension.'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _filedir
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: i
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: IFS=
  scopesEnd:
    - string.unquoted.argument
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single.dollar
- source: xspec
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: _tilde
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: a
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: toks
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: quoted
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: tmp
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: _quote_readline_by_ref
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: quoted
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
    - meta.argument
- source: toks
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: toks
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
- source: '-'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: d
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: '{'
  scopesBegin:
    - meta.scope.group
  scopes:
    - punctuation.definition.group
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: read
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: r
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: tmp
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' TODO: I have removed a "[ -n $tmp ] &&" before ''printf ..'','
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '       and everything works again. If this bug suddenly'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '       appears again (i.e. "cd /b<TAB>" becomes "cd /"),'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '       remember to check for other similar conditionals (here'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '       and _filedir_xspec()). --David'
  scopesEnd:
    - comment.line.number-sign
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '%s\n'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: tmp
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: '}'
  scopes:
    - punctuation.definition.group
  scopesEnd:
    - meta.scope.group
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopesBegin:
    - keyword.operator.logical
- source: '-d'
  scopesEnd:
    - keyword.operator.logical
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Munge xspec to contain uppercase version too'
  scopesEnd:
    - comment.line.number-sign
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: BASH_VERSINFO
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-ge'
  scopes:
    - keyword.operator.logical
- source: '4'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: xspec
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: +
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@('
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '|'
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ^^
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: )
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.parameter-expansion
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: xspec
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: +
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '!*.@('
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '|'
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '%s'
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: tr
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '[:lower:]'
- source: ''''
  scopes:
    - punctuation.definition.string.end
- source: ''''
  scopes:
    - punctuation.definition.string.begin
- source: '[:upper:]'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.parameter-expansion
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: toks
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: toks
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
- source: '-'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: xspec
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: quoted
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: toks
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-ne'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: _compopt_o_filenames
  scopesBegin:
    - meta.statement
  scopes:
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: COMPREPLY
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: toks
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' _filedir()'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' This function splits $cur=--foo=bar into $prev=--foo, $cur=bar, making it'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' easier to support both "--foo bar" and "--foo=bar" style completions.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Returns 0 if current option was split, 1 otherwise.'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _split_longopt
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: ' --'
- source: '?'
  scopesBegin:
    - keyword.operator.glob
- source: '*'
  scopesEnd:
    - keyword.operator.glob
- source: '='
  scopes:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Cut also backslash before ''='' in case it ended up there'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' for some reason.'
  scopesEnd:
    - comment.line.number-sign
- source: prev
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '%%'
  scopes:
    - keyword.operator.expansion
- source: '?('
- source: \\
  scopes:
    - constant.character.escape
- source: )=
- source: '*'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: cur
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
  scopesEnd:
    - keyword.operator.expansion
- source: '='
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: return
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function tries to parse the help output of the given command.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $1  command'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $2  command options (default: --help)'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _parse_help
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: $
  scopesBegin:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.statement.command.name
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ':-'
  scopes:
    - keyword.operator.expansion
- source: '--help'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>&1'
  scopes:
    - keyword.operator.redirect
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: sed
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: e
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '/^[[:space:]]*-/!d'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: e
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: 's|[,/]| |g'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: awk
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '{ print $1; if ($2 ~ /^-/) { print $2 } }'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: sed
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: e
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: 's|[<=].*||'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on signal names'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _signals
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: i
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' standard signal completion is rather braindead, so we need'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' to hack around to get what we want here, which is to'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' complete on a dash, followed by the signal name minus'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' the SIG prefix'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: A
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: signal
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: SIG
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: '-'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: for
  scopesBegin:
    - meta.scope.for-loop
  scopes:
    - keyword.control
- source: ((
  scopesBegin:
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: i
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.arithmetic
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: <
  scopes:
    - keyword.operator.arithmetic
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMPREPLY
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '['
  scopes:
    - punctuation.definition.array.access
- source: i
  scopes:
    - variable.other.assignment
- source: ']'
  scopes:
    - punctuation.definition.array.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '-'
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i
- source: ']'
  scopes:
    - punctuation.section.array
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: SIG
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-loop
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on known mac addresses'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _mac_addresses
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: re
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '\([A-Fa-f0-9]\{2\}:\)\{5\}[A-Fa-f0-9]\{2\}'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: local
  scopes:
    - storage.modifier.local
- source: PATH
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PATH
  scopes:
    - variable.other.normal
- source: ':/sbin:/usr/sbin'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Local interfaces (Linux only?)'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: ifconfig
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: a
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '2'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: sed
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: ne
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopesBegin:
    - meta.argument
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 's/.*[[:space:]]HWaddr[[:space:]]\{1,\}\('
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: re
  scopes:
    - variable.other.normal
- source: '\)[[:space:]]*$/\1/p'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' ARP cache'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: arp
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: an
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '2'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: sed
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: ne
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopesBegin:
    - meta.argument
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 's/.*[[:space:]]\('
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: re
  scopes:
    - variable.other.normal
- source: '\)[[:space:]].*/\1/p'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: ne
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopesBegin:
    - meta.argument
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 's/.*[[:space:]]\('
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: re
  scopes:
    - variable.other.normal
- source: '\)[[:space:]]*$/\1/p'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' /etc/ethers'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: sed
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: ne
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopesBegin:
    - meta.argument
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 's/^[[:space:]]*\('
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: re
  scopes:
    - variable.other.normal
- source: '\)[[:space:]].*/\1/p'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: /etc/ethers
  scopes:
    - string.unquoted.argument
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '${COMPREPLY[@]}'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.expression.assignment
- source: __ltrim_colon_completions
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on configured network interfaces'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _configured_interfaces
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-f'
  scopes:
    - keyword.operator.logical
- source: ' /etc/debian_version '
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Debian system'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: sed
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: ne
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: 's|^iface \([^ ]\{1,\}\).*$|\1|p'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: /etc/network/interfaces
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: elif
  scopes:
    - keyword.control.elif
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-f'
  scopes:
    - keyword.operator.logical
- source: ' /etc/SuSE-release '
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' SuSE system'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '%s\n'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: /etc/sysconfig/network/ifcfg-
  scopesBegin:
    - string.unquoted.argument
- source: '*'
  scopes:
    - variable.language.special.wildcard
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: sed
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: ne
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: s|.*ifcfg-\(.*\)|\1|p
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: elif
  scopes:
    - keyword.control.elif
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-f'
  scopes:
    - keyword.operator.logical
- source: ' /etc/pld-release '
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' PLD Linux'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: command
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ls
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: B
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopesBegin:
    - meta.argument
  scopes:
    - constant.character.escape.line-continuation
- source: /etc/sysconfig/interfaces
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: sed
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: ne
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: s|.*ifcfg-\(.*\)|\1|p
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: else
  scopes:
    - keyword.control.else
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Assume Red Hat'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '%s\n'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: /etc/sysconfig/network-scripts/ifcfg-
  scopesBegin:
    - string.unquoted.argument
- source: '*'
  scopes:
    - variable.language.special.wildcard
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: sed
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: ne
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: s|.*ifcfg-\(.*\)|\1|p
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on available kernels'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _kernel_versions
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: $( command ls /lib/modules )
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on all available network interfaces'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' -a: restrict to active interfaces only'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' -w: restrict to wireless interfaces only'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _available_interfaces
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: cmd
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ':-'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopesBegin:
    - keyword.operator.logical
- source: '-w'
  scopesEnd:
    - keyword.operator.logical
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: cmd
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: iwconfig
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: elif
  scopes:
    - keyword.control.elif
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ':-'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopesBegin:
    - keyword.operator.logical
- source: '-a'
  scopesEnd:
    - keyword.operator.logical
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: cmd
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ifconfig
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: cmd
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ifconfig -a
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: PATH=
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PATH
  scopes:
    - variable.other.normal
- source: ':/sbin'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cmd
  scopes:
    - variable.other.normal
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: awk
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '/^[^ \t]/ { print $1 }'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '${COMPREPLY[@]/%[[:punct:]]/}'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Perform tilde (~) completion'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @return  True (0) if completion needs further processing, '
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '          False (> 0) if tilde is followed by a valid username, completions'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '          are put in COMPREPLY and no further processing is necessary.'
  scopesEnd:
    - comment.line.number-sign
- source: _tilde
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: result
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Does $1 start with tilde (~) and doesn''t contain slash (/)?'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '0'
  scopes:
    - variable.parameter.positional
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '~'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '=='
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: \/
  scopes:
    - constant.character.escape
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: _compopt_o_filenames
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Try generate username completions'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '~'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: u
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: \~
  scopes:
    - constant.character.escape
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
- source: result
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMPREPLY
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: result
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Expand variable starting with tilde (~)'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' We want to expand ~foo/... to /home/foo/... to avoid problems when'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' word-to-complete starting with a tilde is fed to commands and ending up'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' quoted instead of expanded.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Only the first portion of the variable from the tilde up to the first slash'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' (~../) is expanded.  The remainder of the variable, containing for example'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' a dollar sign variable ($) or asterisk (*) is not expanded.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Example usage:'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '    $ v="~"; __expand_tilde_by_ref v; echo "$v"'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' Example output:'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: '       v                  output'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '    --------         ----------------'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '    ~                /home/user'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '    ~foo/bar         /home/foo/bar'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '    ~foo/$HOME       /home/foo/$HOME'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '    ~foo/a  b        /home/foo/a  b'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '    ~foo/*           /home/foo/*'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' @param $1  Name of variable (not the value of the variable) to expand'
  scopesEnd:
    - comment.line.number-sign
- source: __expand_tilde_by_ref
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Does $1 start with tilde (~)?'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '!'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '0'
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '~'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Does $1 contain slash (/)?'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '!'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '!'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.other.normal
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: \/
  scopes:
    - constant.character.escape
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Yes, $1 contains slash;'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' 1: Remove * including and after first slash (/), i.e. "~a/b"'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '    becomes "~a".  Double quotes allow eval.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' 2: Remove * before the first slash (/), i.e. "~a/b"'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '    becomes "b".  Single quotes prevent eval.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '       +-----1----+ +---2----+'
  scopesEnd:
    - comment.line.number-sign
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '='
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '!'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.other.normal
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: '%'
  scopesEnd:
    - keyword.operator.expansion
- source: \/
  scopes:
    - constant.character.escape
- source: '*'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: /
  scopes:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '${!1#*/}'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: else
  scopes:
    - keyword.control.else
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' No, $1 doesn''t contain slash'
  scopesEnd:
    - comment.line.number-sign
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '='
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '!'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' __expand_tilde_by_ref()'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' This function expands tildes in pathnames'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _expand
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' FIXME: Why was this here?'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '[ "$cur" != "${cur%\\}" ] && cur="$cur\\"'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Expand ~username type directory specifications.  We want to expand'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' ~foo/... to /home/foo/... to avoid problems when $cur starting with'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' a tilde is fed to commands and ending up quoted instead of expanded.'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: \~
  scopes:
    - constant.character.escape
- source: '*'
  scopes:
    - keyword.operator.glob
- source: /
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: cur=
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: elif
  scopes:
    - keyword.control.elif
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: \~
  scopes:
    - constant.character.escape
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: cur
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: \~
  scopes:
    - constant.character.escape
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '~'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: u
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.expression.assignment
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMPREPLY
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-eq'
  scopes:
    - keyword.operator.logical
- source: '1'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: 'COMPREPLY['
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']='
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.argument
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMPREPLY
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on process IDs.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' AIX and Solaris ps prefers X/Open syntax.'
  scopesEnd:
    - comment.line.number-sign
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: UNAME
  scopes:
    - variable.other.normal
- source: '=='
  scopes:
    - keyword.operator.logical
- source: ' SunOS '
- source: '||'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: UNAME
  scopes:
    - variable.other.normal
- source: '=='
  scopes:
    - keyword.operator.logical
- source: ' AIX '
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: _pids
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: $( command ps -efo pid | sed 1d )
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: _pids
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: $( command ps axo pid= )
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on process group IDs.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' AIX and SunOS prefer X/Open, all else should be BSD.'
  scopesEnd:
    - comment.line.number-sign
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: UNAME
  scopes:
    - variable.other.normal
- source: '=='
  scopes:
    - keyword.operator.logical
- source: ' SunOS '
- source: '||'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: UNAME
  scopes:
    - variable.other.normal
- source: '=='
  scopes:
    - keyword.operator.logical
- source: ' AIX '
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: _pgids
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: $( command ps -efo pgid | sed 1d )
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: _pgids
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: $( command ps axo pgid= )
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on process names.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' AIX and SunOS prefer X/Open, all else should be BSD.'
  scopesEnd:
    - comment.line.number-sign
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: UNAME
  scopes:
    - variable.other.normal
- source: '=='
  scopes:
    - keyword.operator.logical
- source: ' SunOS '
- source: '||'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: UNAME
  scopes:
    - variable.other.normal
- source: '=='
  scopes:
    - keyword.operator.logical
- source: ' AIX '
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: _pnames
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: <defunct>
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: $( command ps -efo comm | \
- source: '        sed -e 1d -e "s:.*/::" -e "s/^-//" | sort -u )'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: _pnames
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' FIXME: completes "[kblockd/0]" to "0". Previously it was completed'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' to "kblockd" which isn''t correct either. "kblockd/0" would be'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' arguably most correct, but killall from psmisc 22 treats arguments'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' containing "/" specially unless -r is given so that wouldn''t quite'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' work either. Perhaps it''d be best to not complete these to anything'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' for now.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Not using "ps axo comm" because under some Linux kernels, it'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' truncates command names (see e.g. http://bugs.debian.org/497540#19)'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: <defunct>
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: $( command ps axo command= | \
- source: '        sed -e "s/ .*//" -e "s:.*/::" -e "s/:$//" -e "s/^[[(-]//" \'
- source: '            -e "s/[])]$//" | sort -u )'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on user IDs'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _uids
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: type
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: getent
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '&'
  scopes:
    - punctuation.separator.statement.background
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '$( getent passwd | cut -d: -f3 )'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: elif
  scopes:
    - keyword.control.elif
- source: type
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: perl
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '&'
  scopes:
    - punctuation.separator.statement.background
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '$( perl -e '
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: 'while (($uid) = (getpwent)[2]) { print $uid . "\n" }'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ' )'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: else
  scopes:
    - keyword.control.else
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' make do with /etc/passwd'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '$( cut -d: -f3 /etc/passwd )'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on group IDs'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _gids
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: type
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: getent
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '&'
  scopes:
    - punctuation.separator.statement.background
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '$( getent group | cut -d: -f3 )'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: \
  scopes:
    - constant.character.escape.line-continuation
  scopesEnd:
    - meta.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: elif
  scopes:
    - keyword.control.elif
- source: type
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: perl
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '&'
  scopes:
    - punctuation.separator.statement.background
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '$( perl -e '
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: 'while (($gid) = (getgrent)[2]) { print $gid . "\n" }'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ' )'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: else
  scopes:
    - keyword.control.else
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' make do with /etc/group'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '$( cut -d: -f3 /etc/group )'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on services'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _services
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: sysvdir
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: famdir
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-d'
  scopes:
    - keyword.operator.logical
- source: ' /etc/rc.d/init.d '
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: sysvdir
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: /etc/rc.d/init.d
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: sysvdir
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: /etc/init.d
  scopes:
    - string.unquoted.argument
- source: famdir
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: /etc/xinetd.d
  scopes:
    - string.unquoted.argument
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '%s\n'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: sysvdir
  scopes:
    - variable.other.normal
- source: /!
  scopes:
    - string.unquoted.argument
- source: (
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell
- source: '*'
  scopes:
    - keyword.operator.glob
- source: .rpm
- source: '@'
  scopesBegin:
    - meta.structure.extglob
  scopes:
    - keyword.operator.extglob
- source: (
  scopes:
    - punctuation.definition.extglob
- source: orig
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: new
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: save
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.extglob
  scopesEnd:
    - meta.structure.extglob
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '~'
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: functions
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.subshell
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - meta.scope.subshell
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-d'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: famdir
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '%s\n'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: famdir
  scopes:
    - variable.other.normal
- source: /!
  scopes:
    - string.unquoted.argument
- source: (
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell
- source: '*'
  scopes:
    - keyword.operator.glob
- source: .rpm
- source: '@'
  scopesBegin:
    - meta.structure.extglob
  scopes:
    - keyword.operator.extglob
- source: (
  scopes:
    - punctuation.definition.extglob
- source: orig
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: new
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: save
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.extglob
  scopesEnd:
    - meta.structure.extglob
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '~'
- source: )
  scopes:
    - punctuation.definition.subshell
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - meta.scope.subshell
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '${COMPREPLY[@]#@($sysvdir|$famdir)/}'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on modules'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _modules
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: modpath
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: modpath
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: /lib/modules/
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: command
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ls
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: R
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: modpath
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: sed
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: ne
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: 's/^\(.*\)\.k\{0,1\}o\(\.gz\)\{0,1\}$/\1/p'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on installed modules'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _installed_modules
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: PATH
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PATH
  scopes:
    - variable.other.normal
- source: ':/sbin'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: lsmod
  scopes:
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
  scopesEnd:
    - meta.statement
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: awk
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '{if (NR != 1) print $1}'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on user or user:group format; as for chown and cpio.'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' The : must be added manually; it will only complete usernames initially.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' The legacy user.group format is not supported.'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' @param $1  If -u, only return users/groups the user has access to in'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '            context of current completion.'
  scopesEnd:
    - comment.line.number-sign
- source: _usergroup
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: \\
  scopesBegin:
    - constant.character.escape
- source: \\
  scopesEnd:
    - constant.character.escape
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '||'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ':'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ':'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Give up early on if something seems horribly wrong.'
  scopesEnd:
    - comment.line.number-sign
- source: return
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: elif
  scopes:
    - keyword.control.elif
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: \\
  scopes:
    - constant.character.escape
- source: ':'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Completing group after ''user\:gr<TAB>''.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Reply with a list of groups prefixed with ''user:'', readline will'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' escape to the colon.'
  scopesEnd:
    - comment.line.number-sign
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: prefix
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: prefix
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '%%'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
  scopesEnd:
    - keyword.operator.expansion
- source: (
- source: '['
  scopes:
    - punctuation.section.array
- source: '^:'
- source: ']'
  scopes:
    - punctuation.section.array
- source: )
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: prefix
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: prefix
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: \\
  scopes:
    - constant.character.escape
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: local
  scopes:
    - storage.modifier.local
- source: mycur
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
  scopesEnd:
    - keyword.operator.expansion
- source: '['
  scopes:
    - punctuation.section.array
- source: ':'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '=='
  scopesBegin:
    - keyword.operator.logical
- source: '-u'
  scopesEnd:
    - keyword.operator.logical
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: _allowed_groups
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: mycur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: IFS
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single.dollar
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: g
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: mycur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: prefix
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: elif
  scopes:
    - keyword.control.elif
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ':'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Completing group after ''user:gr<TAB>''.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Reply with a list of unprefixed groups since readline with split on :'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' and only replace the ''gr'' part'
  scopesEnd:
    - comment.line.number-sign
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: mycur
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
- source: ':'
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '=='
  scopesBegin:
    - keyword.operator.logical
- source: '-u'
  scopesEnd:
    - keyword.operator.logical
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: _allowed_groups
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: mycur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: IFS
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single.dollar
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: g
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: mycur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: else
  scopes:
    - keyword.control.else
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Completing a partial ''usernam<TAB>''.'
- source: '#'
  scopesBegin:
    - punctuation.definition.comment
- source: '#'
  scopesEnd:
    - punctuation.definition.comment
- source: ' Don''t suffix with a : because readline will escape it and add a'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' slash. It''s better to complete into ''chown username '' than ''chown'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' username\:''.'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '=='
  scopesBegin:
    - keyword.operator.logical
- source: '-u'
  scopesEnd:
    - keyword.operator.logical
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: _allowed_users
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: IFS
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single.dollar
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: u
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: _allowed_users
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: _complete_as_root
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: IFS
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single.dollar
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: u
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ':-'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: else
  scopes:
    - keyword.control.else
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: IFS
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single.dollar
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopesBegin:
    - meta.argument
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: id
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: un
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '2'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: whoami
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '2'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: ':-'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: _allowed_groups
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: _complete_as_root
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: IFS
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single.dollar
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: g
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: else
  scopes:
    - keyword.control.else
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: IFS
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single.dollar
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopesBegin:
    - meta.argument
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: id
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: Gn
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '2'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: groups
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '2'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on valid shells'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _shells
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopesBegin:
    - meta.argument
  scopes:
    - constant.character.escape.line-continuation
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '$( command grep "^[[:space:]]*/" /etc/shells 2>/dev/null )'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: \
  scopes:
    - constant.character.escape.line-continuation
  scopesEnd:
    - meta.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on valid filesystem types'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _fstypes
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: fss
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-e'
  scopes:
    - keyword.operator.logical
- source: ' /proc/filesystems '
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Linux'
  scopesEnd:
    - comment.line.number-sign
- source: fss
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: cut
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: d
  scopesBegin:
    - constant.other.option
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \t
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - constant.other.option
    - string.quoted.single.dollar
- source: '-'
  scopes:
    - constant.other.option.dash
- source: f2
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: /proc/filesystems
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
- source: $(
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: awk
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '! /\*/ { print $NF }'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: /etc/filesystems
  scopes:
    - string.unquoted.argument
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Generic'
  scopesEnd:
    - comment.line.number-sign
- source: fss
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: awk
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '/^[ \t]*[^#]/ { print $3 }'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: /etc/fstab
  scopes:
    - string.unquoted.argument
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
- source: $(
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: awk
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '/^[ \t]*[^#]/ { print $3 }'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: /etc/mnttab
  scopes:
    - string.unquoted.argument
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
- source: $(
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: awk
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '/^[ \t]*[^#]/ { print $4 }'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: /etc/vfstab
  scopes:
    - string.unquoted.argument
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
- source: $(
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: awk
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '{ print $1 }'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: /etc/dfs/fstypes
  scopes:
    - string.unquoted.argument
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
- source: $(
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-d'
  scopes:
    - keyword.operator.logical
- source: ' /etc/fs '
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: command
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ls
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: /etc/fs
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: fss
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: COMPREPLY
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: fss
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Get real command.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' - arg: $1  Command'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' - stdout:  Filename of command in PATH with possible symbolic links resolved.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '            Empty string if command not found.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' - return:  True (0) if command found, False (> 0) if not.'
  scopesEnd:
    - comment.line.number-sign
- source: _realcommand
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: type
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: '{'
  scopesBegin:
    - meta.scope.group
  scopes:
    - punctuation.definition.group
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: type
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: p
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: realpath
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: realpath
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: type
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: elif
  scopes:
    - keyword.control.elif
- source: type
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: p
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: readlink
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: readlink
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: type
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: type
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
  scopesEnd:
    - meta.scope.group
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function returns the first arugment, excluding options'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $1 chars  Characters out of $COMP_WORDBREAKS which should'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     NOT be considered word breaks. See __reassemble_comp_words_by_ref.'
  scopesEnd:
    - comment.line.number-sign
- source: _get_first_arg
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: i
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: arg
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: for
  scopesBegin:
    - meta.scope.for-loop
  scopes:
    - keyword.control
- source: ((
  scopesBegin:
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: i
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: <
  scopes:
    - keyword.operator.arithmetic
- source: COMP_CWORD
  scopes:
    - variable.other.normal
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_WORDS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: ' -'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: arg
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_WORDS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.expression.assignment
- source: break
  scopes:
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.break
  scopesEnd:
    - meta.statement
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-loop
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function counts the number of args, excluding options'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' @param $1 chars  Characters out of $COMP_WORDBREAKS which should'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '     NOT be considered word breaks. See __reassemble_comp_words_by_ref.'
  scopesEnd:
    - comment.line.number-sign
- source: _count_args
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: i
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: cword
- source: words
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: __reassemble_comp_words_by_ref
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: words
  scopesBegin:
    - string.unquoted.argument
- source: cword
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: args
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: i
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: words
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: '1'
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: cword-1
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: ' -'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: args
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $((
  scopes:
    - punctuation.definition.evaluation.arithmetic.begin
- source: $
  scopesBegin:
    - string.other.math
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: args
  scopes:
    - variable.other.normal
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
  scopesEnd:
    - string.other.math
- source: ))
  scopes:
    - punctuation.definition.evaluation.arithmetic.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on PCI IDs'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _pci_ids
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
- source: ':-'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopesBegin:
    - meta.argument
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: PATH
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PATH
  scopes:
    - variable.other.normal
- source: ':/sbin'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: lspci
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: 'n'
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: awk
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '{print $3}'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function completes on USB IDs'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _usb_ids
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
- source: ':-'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopesBegin:
    - meta.argument
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: PATH
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PATH
  scopes:
    - variable.other.normal
- source: ':/sbin'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: lsusb
  scopes:
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
  scopesEnd:
    - meta.statement
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: awk
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '{print $6}'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' CD device names'
  scopesEnd:
    - comment.line.number-sign
- source: _cd_devices
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: d
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '!*/?([amrs])cd*'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':-'
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: dev
  scopes:
    - variable.other.normal
- source: /
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' DVD device names'
  scopesEnd:
    - comment.line.number-sign
- source: _dvd_devices
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: d
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '!*/?(r)dvd*'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':-'
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: dev
  scopes:
    - variable.other.normal
- source: /
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' start of section containing completion functions for external programs'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' a little help for FreeBSD ports users'
  scopesEnd:
    - comment.line.number-sign
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: UNAME
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.logical
- source: ' FreeBSD '
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: index search fetch fetch-list extract \
- source: '    patch configure build install reinstall deinstall clean clean-depends \'
- source: '    kernel buildworld'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: make
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This function provides simple user@host completion'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _user_at_host
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: cur
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: COMPREPLY
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - punctuation
- source: )
  scopesEnd:
    - meta.expression.assignment
    - punctuation
- source: _get_comp_words_by_ref
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: 'n'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ':'
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: cur
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '@'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: _known_hosts_real
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: u
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: shopt
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: u
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: hostcomplete
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: F
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: _user_at_host
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: o
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: nospace
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: talk
- source: ytalk
- source: finger
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' NOTE: Using this function as a helper function is deprecated.  Use'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '       `_known_hosts_real'' instead.'
  scopesEnd:
    - comment.line.number-sign
- source: _known_hosts
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: options
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: COMPREPLY
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - punctuation
- source: )
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - punctuation
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' NOTE: Using `_known_hosts'' as a helper function and passing options'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '       to `_known_hosts'' is deprecated: Use `_known_hosts_real'' instead.'
  scopesEnd:
    - comment.line.number-sign
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopesBegin:
    - keyword.operator.logical
- source: '-a'
- source: '||'
  scopesEnd:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopesBegin:
    - keyword.operator.logical
- source: '-a'
  scopesEnd:
    - keyword.operator.logical
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: options
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '-a'
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.expression.assignment
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopesBegin:
    - keyword.operator.logical
- source: '-c'
- source: '||'
  scopesEnd:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopesBegin:
    - keyword.operator.logical
- source: '-c'
  scopesEnd:
    - keyword.operator.logical
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: options
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: options
  scopes:
    - variable.other.normal
- source: ' -c'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: _known_hosts_real
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: options
  scopes:
    - variable.other.normal
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: _get_cword
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ':'
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' _known_hosts()'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Helper function for completing _known_hosts.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' This function performs host completion based on ssh''s config and known_hosts'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' files, as well as hostnames reported by avahi-browse if'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' COMP_KNOWN_HOSTS_WITH_AVAHI is set to a non-empty value.  Also hosts from'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' HOSTFILE (compgen -A hostname) are added, unless'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' COMP_KNOWN_HOSTS_WITH_HOSTFILE is set to an empty value.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Usage: _known_hosts_real [OPTIONS] CWORD'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Options:  -a             Use aliases'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '           -c             Use `:'' suffix'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '           -F configfile  Use `configfile'' for configuration settings'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '           -p PREFIX      Use PREFIX'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Return: Completions, starting with CWORD, are added to COMPREPLY[]'
  scopesEnd:
    - comment.line.number-sign
- source: _known_hosts_real
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: configfile
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: flag
- source: prefix
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: cur
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: curd
- source: awkcur
- source: user
- source: suffix
- source: aliases
- source: i
- source: host
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: a
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: kh
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: khd
- source: config
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: local
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: OPTIND
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: getopts
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'acF:p:'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: flag
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional.all
- source: '@'
  scopes:
    - variable.parameter.positional.all
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: case
  scopesBegin:
    - meta.scope.case-block
  scopes:
    - keyword.control
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: flag
  scopes:
    - variable.other.normal
- source: in
  scopesBegin:
    - meta.scope.case-body
  scopes:
    - keyword.control
- source: a
  scopesBegin:
    - meta.scope.case-clause
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' aliases='
  scopesBegin:
    - meta.scope.case-clause-body
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: 'yes'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.scope.case-clause-body
    - string.quoted.single
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: c
  scopesBegin:
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' suffix='
  scopesBegin:
    - meta.scope.case-clause-body
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ':'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.scope.case-clause-body
    - string.quoted.single
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: F
  scopesBegin:
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' configfile='
  scopesBegin:
    - meta.scope.case-clause-body
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: OPTARG
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.scope.case-clause-body
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: p
  scopesBegin:
    - meta.scope.case-pattern
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: ' prefix='
  scopesBegin:
    - meta.scope.case-clause-body
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: OPTARG
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.scope.case-clause-body
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
  scopesEnd:
    - meta.scope.case-body
    - meta.scope.case-clause
- source: esac
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.case-block
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '#'
  scopes:
    - variable.language.special
- source: '-lt'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: OPTIND
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'error: '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: FUNCNAME
  scopes:
    - variable.other.normal
- source: ': missing mandatory argument CWORD'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: cur
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '!'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: OPTIND
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
  scopesEnd:
    - meta.expression.assignment
- source: let
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: OPTIND += 1
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '#'
  scopes:
    - variable.language.special
- source: '-ge'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: OPTIND
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'error: '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: FUNCNAME
  scopes:
    - variable.other.normal
- source: (
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional.all
- source: '@'
  scopes:
    - variable.parameter.positional.all
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '): unprocessed arguments:'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: 'while '
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '#'
  scopes:
    - variable.language.special
- source: '-ge'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: OPTIND
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '%s\n'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '!'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: OPTIND
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: shift
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: ' done'
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.interpolated.dollar
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '@'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: user
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '%'
  scopesBegin:
    - keyword.operator.expansion
- source: '@'
- source: '*'
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '@'
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: cur
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
- source: '@'
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: kh
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - punctuation
- source: )
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - punctuation
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' ssh config files'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: configfile
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-r'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: configfile
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: config
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: config
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: configfile
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: else
  scopes:
    - keyword.control.else
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: i
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: ' /etc/ssh/ssh_config '
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: HOME
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: /.ssh/config
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ' \'
- source: '"'
  scopesBegin:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
  scopes:
    - meta.statement.command.name.quoted
    - string.quoted.double
    - punctuation.definition.string.begin
    - entity.name.function.call
    - entity.name.command
- source: $
  scopesBegin:
    - meta.statement.command.name.continuation
    - string.quoted.double
    - entity.name.function.call
    - entity.name.command
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: HOME
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: /.ssh2/config
  scopesEnd:
    - meta.statement.command.name.continuation
    - string.quoted.double
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopes:
    - string.quoted.double
    - punctuation.definition.string.end
    - entity.name.function.call
    - entity.name.command
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-r'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: config
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: config
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Known hosts files from configs'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: config
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-gt'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: OIFS
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: IFS
  scopes:
    - variable.other.normal
- source: IFS
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.single.dollar
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: a
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: tmpkh
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' expand paths (if present) to global and user known hosts files'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' TODO(?): try to make known hosts files with more than one consecutive'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '          spaces in their name work (watch out for ~ expansion'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: '          breakage! Alioth#311595)'
  scopesEnd:
    - comment.line.number-sign
- source: tmpkh
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: awk
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: >-
    sub("^[
    \t]*([Gg][Ll][Oo][Bb][Aa][Ll]|[Uu][Ss][Ee][Rr])[Kk][Nn][Oo][Ww][Nn][Hh][Oo][Ss][Tt][Ss][Ff][Ii][Ll][Ee][
    \t]+", "") { print $0 }
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: config
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: sort
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: u
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: i
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: tmpkh
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Remove possible quotes'
  scopesEnd:
    - comment.line.number-sign
- source: i
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: i
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: \"
  scopes:
    - constant.character.escape
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Eval/expand possible `~'' or `~user'''
  scopesEnd:
    - comment.line.number-sign
- source: __expand_tilde_by_ref
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: i
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-r'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: kh
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: kh
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: IFS
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: OIFS
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopesBegin:
    - keyword.control
- source: if
  scopesEnd:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-z'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: configfile
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Global and user known_hosts files'
  scopesEnd:
    - comment.line.number-sign
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: i
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: ' /etc/ssh/ssh_known_hosts /etc/ssh/ssh_known_hosts2 \'
- source: /etc/known_hosts
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: /etc/known_hosts2
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: ~/.ssh/known_hosts
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: ~/.ssh/known_hosts2
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-r'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: kh
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: kh
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: done
  scopesBegin:
    - keyword.control
- source: for
  scopesEnd:
    - keyword.control
- source: i
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: ' /etc/ssh2/knownhosts '
- source: '~'
  scopes:
    - keyword.operator.tilde
- source: /.ssh2/hostkeys
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-d'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: khd
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: khd
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: /
  scopesBegin:
    - string.unquoted.argument
- source: '*'
  scopes:
    - variable.language.special.wildcard
- source: pub
  scopesEnd:
    - string.unquoted.argument
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' If we have known_hosts files to use'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: kh
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-gt'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: '||'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: khd
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-gt'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Escape slashes and dots in paths for awk'
  scopesEnd:
    - comment.line.number-sign
- source: awkcur
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: \/
  scopes:
    - constant.character.escape
- source: /
  scopes:
    - keyword.operator.expansion
- source: \\
  scopesBegin:
    - constant.character.escape
- source: \/
  scopesEnd:
    - meta.parameter-expansion
    - constant.character.escape
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: awkcur
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: awkcur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: \.
  scopes:
    - constant.character.escape
- source: /
  scopes:
    - keyword.operator.expansion
- source: \\
  scopesBegin:
    - constant.character.escape
- source: \.
  scopesEnd:
    - meta.parameter-expansion
    - constant.character.escape
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: curd
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: awkcur
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: awkcur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: '-9'
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '.:'
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Digits followed by a dot or a colon - just search for that'
  scopesEnd:
    - comment.line.number-sign
- source: awkcur
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ^
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: awkcur
  scopes:
    - variable.other.normal
- source: '[.:]*'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: elif
  scopes:
    - keyword.control.elif
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: awkcur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: '-9'
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Digits followed by no dot or colon - search for digits followed'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' by a dot or a colon'
  scopesEnd:
    - comment.line.number-sign
- source: awkcur
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ^
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: awkcur
  scopes:
    - variable.other.normal
- source: '.*[.:]'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: elif
  scopes:
    - keyword.control.elif
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-z'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: awkcur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' A blank - search for a dot, a colon, or an alpha character'
  scopesEnd:
    - comment.line.number-sign
- source: awkcur
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '[a-z.:]'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: awkcur
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ^
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: awkcur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: fi
  scopesBegin:
    - keyword.control
- source: if
  scopesEnd:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: kh
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-gt'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' FS needs to look for a comma separated list'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: awk
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: 'BEGIN {FS=","}'
- source: '            /^\s*[^|\#]/ {for (i=1; i<=2; ++i) { \'
- source: '            sub(" .*$", "", $i); \'
- source: '            sub("^\\[", "", $i); sub("\\](:[0-9]+)?$", "", $i); \'
- source: '            if ($i ~ /'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: awkcur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '/) {print $i} \'
- source: '            }}'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: kh
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopesBegin:
    - keyword.control
- source: if
  scopesEnd:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: khd
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-gt'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Needs to look for files called'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' .../.ssh2/key_22_<hostname>.pub'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' dont fork any processes, because in a cluster environment,'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' there can be hundreds of hostkeys'
  scopesEnd:
    - comment.line.number-sign
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: i
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: khd
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: key_22_
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: curd
  scopes:
    - variable.other.normal
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '.pub '
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '-r'
  scopesEnd:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: host
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: i
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: '#'
- source: '*'
  scopesEnd:
    - keyword.operator.expansion
- source: key_22_
  scopes:
    - variable.other.normal
- source: /
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: host
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: host
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: '%'
  scopesEnd:
    - keyword.operator.expansion
- source: .
- source: pub
  scopes:
    - variable.other.normal
- source: /
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: host
  scopes:
    - variable.other.normal
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' apply suffix and prefix'
  scopesEnd:
    - comment.line.number-sign
- source: for
  scopesBegin:
    - meta.scope.for-loop
  scopes:
    - keyword.control
- source: ((
  scopesBegin:
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: i
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.arithmetic
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: <
  scopes:
    - keyword.operator.arithmetic
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMPREPLY
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '['
  scopes:
    - punctuation.definition.array.access
- source: i
  scopes:
    - variable.other.assignment
- source: ']'
  scopes:
    - punctuation.definition.array.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: prefix
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: user
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: suffix
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-loop
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' append any available aliases from config files'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: config
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-gt'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '-n'
  scopesEnd:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: aliases
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: hosts
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: sed
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: ne
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: >-
    s/^[[:blank:]]*[Hh][Oo][Ss][Tt]\([Nn][Aa][Mm][Ee]\)\{0,1\}[[:blank:]]\{1,\}\([^#*?]*\)\(#.*\)\{0,1\}$/\2/p
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: config
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: prefix
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: user
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
  scopesEnd:
    - meta.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: S
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: suffix
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: hosts
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Add hosts reported by avahi-browse, if desired and it''s available.'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_KNOWN_HOSTS_WITH_AVAHI
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':-'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: type
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: avahi-browse
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '&'
  scopes:
    - punctuation.separator.statement.background
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' The original call to avahi-browse also had "-k", to avoid lookups'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' into avahi''s services DB. We don''t need the name of the service, and'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' if it contains ";", it may mistify the result. But on Gentoo (at'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' least), -k wasn''t available (even if mentioned in the manpage) some'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' time ago, so...'
  scopesEnd:
    - comment.line.number-sign
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: compgen
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: prefix
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: user
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: S
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: suffix
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopesBegin:
    - meta.argument
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: avahi-browse
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: cpr
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: _workstation._tcp
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: awk
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: F
  scopesBegin:
    - constant.other.option
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ;
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.unquoted.argument
    - constant.other.option
    - string.quoted.single
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '/^=/ { print $7 }'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: sort
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: u
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Add results of normal hostname completion, unless'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' `COMP_KNOWN_HOSTS_WITH_HOSTFILE'' is set to an empty value.'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_KNOWN_HOSTS_WITH_HOSTFILE-1
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: A
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: hostname
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: prefix
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: user
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: S
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: suffix
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: __ltrim_colon_completions
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: prefix
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: user
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' _known_hosts_real()'
  scopesEnd:
    - comment.line.number-sign
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: F
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: _known_hosts
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: traceroute
- source: traceroute6
- source: tracepath
- source: tracepath6
- source: ping
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: ping6
  scopesBegin:
    - string.unquoted.argument
- source: fping
- source: fping6
- source: telnet
- source: host
- source: nslookup
- source: rsh
- source: rlogin
- source: ftp
- source: dig
- source: mtr
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: ssh-installkeys
  scopesBegin:
    - string.unquoted.argument
- source: showmount
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This meta-cd function observes the CDPATH variable, so that cd additionally'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' completes on directories under those specified in CDPATH.'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _cd
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: cur
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: IFS=
  scopesEnd:
    - string.unquoted.argument
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single.dollar
- source: i
  scopesBegin:
    - string.unquoted.argument
- source: j
- source: k
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: _get_comp_words_by_ref
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: cur
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' try to allow variable completion'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '?'
  scopes:
    - keyword.operator.glob
- source: (
- source: \\
  scopes:
    - constant.character.escape
- source: )
- source: \$
  scopes:
    - constant.character.escape
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: P
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: $
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cur
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: '?('
- source: \\
  scopes:
    - constant.character.escape
- source: )$
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.expression.assignment
- source: return
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: _compopt_o_filenames
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Use standard dir completion if no CDPATH or parameter starts with /,'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' ./ or ../'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-z'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: CDPATH
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':-'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '||'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '?'
  scopes:
    - keyword.operator.glob
- source: (.)
- source: '?'
  scopes:
    - keyword.operator.glob
- source: (.)/
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: _filedir
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: d
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: r
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: mark_dirs=
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: _rl_enabled
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: mark-directories
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: 'y'
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.argument
    - string.interpolated.dollar
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: r
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: mark_symdirs=
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: _rl_enabled
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: mark-symlinked-directories
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: 'y'
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.interpolated.dollar
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' we have a CDPATH, so loop on its contents'
  scopesEnd:
    - comment.line.number-sign
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: i
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: CDPATH
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: /
- source: ':'
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.parameter-expansion
    - string.quoted.single.dollar
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' create an array of matched subdirs'
  scopesEnd:
    - comment.line.number-sign
- source: k
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMPREPLY
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: j
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: d
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: /
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: ' ( '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: mark_symdirs
  scopes:
    - variable.other.normal
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '-h'
  scopesEnd:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: j
  scopes:
    - variable.other.normal
- source: '||'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: mark_dirs
  scopes:
    - variable.other.normal
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
- source: '-h'
  scopesEnd:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: j
  scopes:
    - variable.other.normal
- source: ' ) '
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
- source: '-d'
  scopesEnd:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: j
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: /
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: j
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: j
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: /
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: 'COMPREPLY[k++]'
  scopesBegin:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
  scopes:
    - entity.name.function.call
    - entity.name.command
- source: '='
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: j
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: /
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: _filedir
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: d
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMPREPLY
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-eq'
  scopes:
    - keyword.operator.logical
- source: '1'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: i
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '*/'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '['
  scopes:
    - punctuation.definition.array.access
- source: '0'
  scopes:
    - variable.other.assignment
- source: ']'
  scopes:
    - punctuation.definition.array.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: i
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: /
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: shopt
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: q
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: cdable_vars
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: F
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: _cd
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: o
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: nospace
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: cd
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: else
  scopes:
    - keyword.control.else
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: F
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: _cd
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: o
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: nospace
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: cd
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' a wrapper method for the next one, when the offset is unknown'
  scopesEnd:
    - comment.line.number-sign
- source: _command
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: offset
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: i
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' find actual offset, as position of the first non-option'
  scopesEnd:
    - comment.line.number-sign
- source: offset
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: for
  scopesBegin:
    - meta.scope.for-loop
  scopes:
    - keyword.control
- source: ((
  scopesBegin:
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: i
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.integer
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: <=
  scopes:
    - keyword.operator.arithmetic
- source: COMP_CWORD
  scopes:
    - variable.other.normal
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_WORDS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: ' -'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: offset
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.expression.assignment
- source: break
  scopes:
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.break
  scopesEnd:
    - meta.statement
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-loop
- source: _command_offset
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: offset
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' A meta-command completion function for commands like sudo(8), which need to'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' first complete on a command, then complete according to that command''s own'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' completion definition - currently not quite foolproof (e.g. mount and umount'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' don''t work properly), but still quite useful.'
- source: '#'
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.number-sign
- source: _command_offset
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: cur
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: func
- source: cline
- source: cspec
- source: noglob
- source: cmd
- source: i
- source: char_offset
- source: word_offset
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: _COMMAND_FUNC
  scopesBegin:
    - string.unquoted.argument
- source: _COMMAND_FUNC_ARGS
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: word_offset
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' rewrite current completion context before invoking'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' actual command completion'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' find new first word position, then'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' rewrite COMP_LINE and adjust COMP_POINT'
  scopesEnd:
    - comment.line.number-sign
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: first_word
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_WORDS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: $word_offset
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: for
  scopesBegin:
    - meta.scope.for-loop
  scopes:
    - keyword.control
- source: ((
  scopesBegin:
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: i
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.arithmetic
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: <=
  scopes:
    - keyword.operator.arithmetic
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMP_LINE
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_LINE
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: first_word
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: first_word
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: char_offset
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.expression.assignment
- source: break
  scopes:
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.break
  scopesEnd:
    - meta.statement
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-loop
- source: COMP_LINE
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_LINE
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: char_offset
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: COMP_POINT
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $((
  scopes:
    - punctuation.definition.evaluation.arithmetic.begin
- source: COMP_POINT
  scopesBegin:
    - string.other.math
  scopes:
    - variable.other.normal
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: char_offset
  scopes:
    - variable.other.normal
  scopesEnd:
    - string.other.math
- source: ))
  scopes:
    - punctuation.definition.evaluation.arithmetic.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' shift COMP_WORDS elements and adjust COMP_CWORD'
  scopesEnd:
    - comment.line.number-sign
- source: for
  scopesBegin:
    - meta.scope.for-loop
  scopes:
    - keyword.control
- source: ((
  scopesBegin:
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: i
  scopes:
    - variable.other.normal
- source: '='
  scopes:
    - keyword.operator.arithmetic
- source: '0'
  scopes:
    - constant.numeric.integer
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: <=
  scopes:
    - keyword.operator.arithmetic
- source: COMP_CWORD
  scopes:
    - variable.other.normal
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: word_offset
  scopes:
    - variable.other.normal
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: COMP_WORDS
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '['
  scopes:
    - punctuation.definition.array.access
- source: i
  scopes:
    - variable.other.assignment
- source: ']'
  scopes:
    - punctuation.definition.array.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_WORDS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: i+$word_offset
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: done
  scopesBegin:
    - keyword.control
- source: for
  scopesEnd:
    - keyword.control
- source: ((
  scopesBegin:
    - meta.arithmetic
  scopes:
    - punctuation.section.arithmetic
- source: i
  scopes:
    - variable.other.normal
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: <=
  scopes:
    - keyword.operator.arithmetic
- source: COMP_CWORD
  scopes:
    - variable.other.normal
- source: '; '
- source: i
  scopes:
    - variable.other.normal
- source: ++
  scopes:
    - keyword.operator.arithmetic
- source: ))
  scopes:
    - punctuation.section.arithmetic
  scopesEnd:
    - meta.arithmetic
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: unset
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: 'COMP_WORDS[i]'
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-loop
- source: COMP_CWORD
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $((
  scopes:
    - punctuation.definition.evaluation.arithmetic.begin
- source: $
  scopesBegin:
    - string.other.math
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: COMP_CWORD
  scopes:
    - variable.other.normal
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: word_offset
  scopes:
    - variable.other.normal
  scopesEnd:
    - string.other.math
- source: ))
  scopes:
    - punctuation.definition.evaluation.arithmetic.end
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - punctuation
- source: )
  scopesEnd:
    - meta.expression.assignment
    - punctuation
- source: _get_comp_words_by_ref
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: cur
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: COMP_CWORD
  scopes:
    - variable.other.normal
- source: '-eq'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: _compopt_o_filenames
  scopesBegin:
    - meta.statement
  scopes:
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: COMPREPLY
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: c
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: else
  scopes:
    - keyword.control.else
- source: cmd
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_WORDS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: p
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cmd
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '##'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
- source: /
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '&'
  scopes:
    - punctuation.separator.statement.background
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: cspec
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: p
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cmd
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '##'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
- source: /
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cspec
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
  scopesEnd:
    - keyword.operator.expansion
- source: '-F'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cspec
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' complete -F <function>'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' get function name'
  scopesEnd:
    - comment.line.number-sign
- source: func
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cspec
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
  scopesEnd:
    - keyword.operator.expansion
- source: '-F'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: func
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: func
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '%%'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMP_WORDS
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-ge'
  scopes:
    - keyword.operator.logical
- source: '2'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: $
  scopesBegin:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: func
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement.command.name
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cmd
  scopes:
    - variable.other.normal
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_WORDS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '${#COMP_WORDS[@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-1]}'
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_WORDS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '${#COMP_WORDS[@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-2]}'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: $
  scopesBegin:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: func
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement.command.name
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cmd
  scopes:
    - variable.other.normal
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMP_WORDS
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '${#COMP_WORDS[@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-1]}'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' remove any \: generated by a command that doesn''t'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' default to filenames or dirnames (e.g. sudo chown)'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' FIXME: I''m pretty sure this does not work!'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cspec
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
  scopesEnd:
    - keyword.operator.expansion
- source: '-o'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cspec
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: cspec
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cspec
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
  scopesEnd:
    - keyword.operator.expansion
- source: '-o'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: cspec
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cspec
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '%%'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cspec
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '@'
  scopesBegin:
    - meta.structure.extglob
  scopes:
    - keyword.operator.extglob
- source: (
  scopes:
    - punctuation.definition.extglob
- source: dir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: file
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.extglob
  scopesEnd:
    - meta.structure.extglob
- source: 'names '
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: COMPREPLY
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
- source: /
  scopesBegin:
    - keyword.operator.expansion
- source: /
  scopesEnd:
    - keyword.operator.expansion
- source: \\
  scopesBegin:
    - constant.character.escape
- source: \\
  scopesEnd:
    - constant.character.escape
- source: ':'
  scopesBegin:
    - keyword.operator.expansion
- source: /
- source: ':'
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: else
  scopes:
    - keyword.control.else
- source: _compopt_o_filenames
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: elif
  scopes:
    - keyword.control.elif
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cspec
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: cspec
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cspec
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: complete
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: cspec
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cspec
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '%%'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: cmd
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '##'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
- source: /
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: compgen
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cspec
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: elif
  scopes:
    - keyword.control.elif
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: COMPREPLY
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-eq'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: _filedir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: F
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: _command
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: aoss
- source: command
- source: do
- source: else
- source: eval
- source: exec
- source: ltrace
- source: nice
- source: nohup
- source: padsp
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: then
  scopesBegin:
    - string.unquoted.argument
- source: time
- source: tsocks
- source: vsound
- source: xargs
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: _root_command
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: PATH
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PATH
  scopes:
    - variable.other.normal
- source: ':/sbin:/usr/sbin:/usr/local/sbin'
  scopes:
    - string.unquoted.argument
- source: local
  scopes:
    - storage.modifier.local
- source: root_command
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.expression.assignment
- source: _command
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '3'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: F
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: _root_command
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: fakeroot
- source: gksu
- source: gksudo
- source: kdesudo
- source: really
- source: sudo
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Return true if the completion should be treated as running as root'
  scopesEnd:
    - comment.line.number-sign
- source: _complete_as_root
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: EUID
  scopes:
    - variable.other.normal
- source: '-eq'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: '||'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: root_command
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':-'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: _longopt
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: cur
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: prev
- source: split=
- source: 'false'
  scopes:
    - constant.language.false
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: _get_comp_words_by_ref
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: 'n'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '='
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: cur
- source: prev
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: _split_longopt
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: split
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - string.unquoted.argument
    - constant.language.true
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: case
  scopesBegin:
    - meta.scope.case-block
  scopes:
    - keyword.control
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: prev
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: in
  scopesBegin:
    - meta.scope.case-body
  scopes:
    - keyword.control
- source: '--'
  scopesBegin:
    - meta.scope.case-clause
    - meta.scope.case-pattern
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '[Dd][Ii][Rr]'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: _filedir
  scopesBegin:
    - meta.scope.case-clause-body
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: d
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.scope.case-clause-body
    - meta.statement
    - meta.statement.command
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: '--'
  scopesBegin:
    - meta.scope.case-pattern
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '[Ff][Ii][Ll][Ee]'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '|'
  scopes:
    - punctuation.separator.pipe-sign
- source: '--'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '[Pp][Aa][Tt][Hh]'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: _filedir
  scopesBegin:
    - meta.scope.case-clause-body
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: return
  scopes:
    - keyword.control.return
  scopesEnd:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.scope.case-clause-body
    - meta.statement
    - meta.statement.command
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
  scopesEnd:
    - meta.scope.case-body
    - meta.scope.case-clause
- source: esac
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.case-block
- source: $
  scopesBegin:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: split
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: ' -'
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: COMPREPLY
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: W
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: $
  scopesBegin:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.statement.command.name
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-help'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '2'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.redirect.stderr
- source: '>&1'
  scopes:
    - keyword.operator.redirect
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: sed
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: ne
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: 's/.*\(--[-A-Za-z0-9]\{1,\}\).*/\1/p'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: sort
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: u
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
  scopesEnd:
    - meta.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: elif
  scopes:
    - keyword.control.elif
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '@'
  scopesBegin:
    - meta.structure.extglob
  scopes:
    - keyword.operator.extglob
- source: (
  scopes:
    - punctuation.definition.extglob
- source: mk
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: rm
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.extglob
  scopesEnd:
    - meta.structure.extglob
- source: 'dir '
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: _filedir
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: d
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: else
  scopes:
    - keyword.control.else
- source: _filedir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' makeinfo and texi2dvi are defined elsewhere.'
  scopesEnd:
    - comment.line.number-sign
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: i
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: ' a2ps awk bash bc bison cat colordiff cp csplit \'
- source: curl
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: cut
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: date
- source: df
- source: diff
- source: dir
- source: du
- source: enscript
- source: env
- source: expand
- source: fmt
- source: fold
- source: gperf
- source: gprof
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: grep
  scopesBegin:
    - string.unquoted.argument
- source: grub
- source: head
- source: indent
- source: irb
- source: ld
- source: ldd
- source: less
- source: ln
- source: ls
- source: m4
- source: md5sum
- source: mkdir
- source: mkfifo
- source: mknod
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: mv
  scopesBegin:
    - string.unquoted.argument
- source: netstat
- source: nl
- source: nm
- source: objcopy
- source: objdump
- source: od
- source: paste
- source: patch
- source: pr
- source: ptx
- source: readelf
- source: rm
- source: rmdir
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: sed
  scopesBegin:
    - string.unquoted.argument
- source: seq
- source: 'sha{,1,224,256,384,512}sum'
- source: shar
- source: sort
- source: split
- source: strip
- source: tac
- source: tail
- source: tee
  scopesEnd:
    - string.unquoted.argument
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: texindex
  scopesBegin:
    - string.unquoted.argument
- source: touch
- source: tr
- source: uname
- source: unexpand
- source: uniq
- source: units
- source: vdir
- source: wc
- source: wget
- source: who
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: have
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: complete
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: F
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: _longopt
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: o
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: default
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: unset
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: i
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: _filedir_xspec
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: IFS
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: cur
- source: xspec
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: IFS
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single.dollar
- source: COMPREPLY
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - punctuation
- source: )
  scopesEnd:
    - meta.expression.assignment
    - punctuation
- source: _get_comp_words_by_ref
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: cur
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: _expand
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' get first exclusion compspec that matches this command'
  scopesEnd:
    - comment.line.number-sign
- source: xspec
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: awk
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '/^complete[ \t]+.*[ \t]'
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.parameter.positional
- source: '##'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
- source: /
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '([ \t]|'
- source: \$
  scopes:
    - constant.character.escape
- source: ')/ { print '
- source: \$
  scopes:
    - constant.character.escape
- source: '0; exit }'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' prune to leave nothing but the -X spec'
  scopesEnd:
    - comment.line.number-sign
- source: xspec
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: xspec
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
  scopesEnd:
    - keyword.operator.expansion
- source: '-X'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: xspec
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: xspec
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '%%'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.expression.assignment
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: a
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: toks
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: tmp
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: toks
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: toks
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
- source: '-'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: compgen
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: d
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: quote_readline
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cur
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: '{'
  scopesBegin:
    - meta.scope.group
  scopes:
    - punctuation.definition.group
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: read
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: r
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: tmp
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' see long TODO comment in _filedir() --David'
  scopesEnd:
    - comment.line.number-sign
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '%s\n'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: tmp
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: '}'
  scopes:
    - punctuation.definition.group
  scopesEnd:
    - meta.scope.group
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Munge xspec to contain uppercase version too'
  scopesEnd:
    - comment.line.number-sign
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: xspec=
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: xspec
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: local
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: matchop
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '!'
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: xspec
  scopes:
    - variable.other.normal
- source: '=='
  scopesBegin:
    - keyword.operator.logical
- source: '!'
  scopesEnd:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: xspec
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: xspec
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopesBegin:
    - keyword.operator.expansion
- source: '!'
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: matchop
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '@'
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: BASH_VERSINFO
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-ge'
  scopes:
    - keyword.operator.logical
- source: '4'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: xspec
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: matchop
  scopes:
    - variable.other.normal
- source: (
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: xspec
  scopes:
    - variable.other.normal
- source: '|'
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: xspec
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ^^
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: )
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: \
  scopesBegin:
    - meta.statement
  scopes:
    - constant.character.escape.line-continuation
- source: xspec
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: matchop
  scopes:
    - variable.other.normal
- source: (
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: xspec
  scopes:
    - variable.other.normal
- source: '|'
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '%s'
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: xspec
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: tr
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '[:lower:]'
- source: ''''
  scopes:
    - punctuation.definition.string.end
- source: ''''
  scopes:
    - punctuation.definition.string.begin
- source: '[:upper:]'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: toks
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: toks
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
- source: '-'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: compgen
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: X
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '!'
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: xspec
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \$
  scopes:
    - constant.character.escape
- source: '(quote_readline '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: \$
  scopes:
    - constant.character.escape
- source: cur
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: )
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: '{'
  scopesBegin:
    - meta.scope.group
  scopes:
    - punctuation.definition.group
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: read
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: r
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: tmp
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: tmp
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '%s\n'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: tmp
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: '}'
  scopes:
    - punctuation.definition.group
  scopesEnd:
    - meta.scope.group
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.expression.assignment
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: toks
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-ne'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: _compopt_o_filenames
  scopesBegin:
    - meta.statement
  scopes:
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: COMPREPLY
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: toks
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: list
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: sed
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: ne
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '/^# START exclude/,/^# FINISH exclude/p'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: \
  scopes:
    - meta.statement
    - constant.character.escape.line-continuation
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' read exclusion compspecs'
  scopesEnd:
    - comment.line.number-sign
- source: (
  scopesBegin:
    - meta.statement
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: read
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: line
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: do
  scopes:
    - keyword.control.do
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' ignore compspecs that are commented out'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: line
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '#'
  scopes:
    - keyword.operator.expansion
- source: \#
  scopes:
    - constant.character.escape
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: line
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: continue
  scopes:
    - keyword.control.continue
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: line
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: line
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '%'
  scopesBegin:
    - keyword.operator.expansion
- source: '#'
  scopesEnd:
    - keyword.operator.expansion
- source: START
  scopesBegin:
    - variable.other.normal
- source: exclude
  scopesEnd:
    - variable.other.normal
- source: '*'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: line
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: line
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '%'
  scopesBegin:
    - keyword.operator.expansion
- source: '#'
  scopesEnd:
    - keyword.operator.expansion
- source: FINISH
  scopesBegin:
    - variable.other.normal
- source: exclude
  scopesEnd:
    - variable.other.normal
- source: '*'
  scopes:
    - keyword.operator.expansion
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: line
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: line
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '##'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
  scopesEnd:
    - keyword.operator.expansion
- source: \'
  scopes:
    - constant.character.escape
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: list
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: list
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: line
  scopes:
    - variable.other.normal
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: printf
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '%s '
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: list
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.subshell
  scopesEnd:
    - meta.statement
    - meta.scope.subshell
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' remove previous compspecs'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '#'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: list
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-gt'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: complete
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: r
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: list
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' install new compspecs'
  scopesEnd:
    - comment.line.number-sign
- source: eval
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: complete
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: F
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: _filedir_xspec
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: list
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: unset
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: list
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' source completion directory definitions'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-d'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_COMPAT_DIR
  scopes:
    - variable.other.normal
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '-r'
  scopesEnd:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_COMPAT_DIR
  scopes:
    - variable.other.normal
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: ' \'
- source: '-x'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_COMPAT_DIR
  scopes:
    - variable.other.normal
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: i
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: LC_ALL
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.expression.assignment
- source: command
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ls
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_COMPAT_DIR
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: i
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_COMPAT_DIR
  scopes:
    - variable.other.normal
- source: /
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.expression.assignment
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: i
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '##'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
- source: /
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '@'
  scopesBegin:
    - meta.structure.extglob
  scopes:
    - keyword.operator.extglob
- source: (
  scopes:
    - punctuation.definition.extglob
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '~'
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: '*'
  scopes:
    - keyword.operator.glob
- source: .bak
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: '*'
  scopes:
    - keyword.operator.glob
- source: .swp
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: \#*\#
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: '*'
  scopes:
    - keyword.operator.glob
- source: .dpkg
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: '*'
  scopes:
    - keyword.operator.glob
- source: .rpm
- source: '@'
  scopesBegin:
    - meta.structure.extglob
  scopes:
    - keyword.operator.extglob
- source: (
  scopes:
    - punctuation.definition.extglob
- source: orig
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: new
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: save
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.extglob
  scopesEnd:
    - meta.structure.extglob
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: Makefile*
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.extglob
  scopesEnd:
    - meta.structure.extglob
- source: ' \'
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '-f'
  scopesEnd:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '-r'
  scopesEnd:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: .
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: fi
  scopesBegin:
    - keyword.control
- source: if
  scopesEnd:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_DIR
  scopes:
    - variable.other.normal
- source: '!='
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_COMPAT_DIR
  scopes:
    - variable.other.normal
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: ' \'
- source: '-d'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_DIR
  scopes:
    - variable.other.normal
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '-r'
  scopesEnd:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_DIR
  scopes:
    - variable.other.normal
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: ' \'
- source: '-x'
  scopes:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_DIR
  scopes:
    - variable.other.normal
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: i
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: LC_ALL
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: C
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.expression.assignment
- source: command
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ls
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_DIR
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: i
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_DIR
  scopes:
    - variable.other.normal
- source: /
  scopes:
    - string.unquoted.argument
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.expression.assignment
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: i
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '##'
  scopesBegin:
    - keyword.operator.expansion
- source: '*'
- source: /
  scopesEnd:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '@'
  scopesBegin:
    - meta.structure.extglob
  scopes:
    - keyword.operator.extglob
- source: (
  scopes:
    - punctuation.definition.extglob
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '~'
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: '*'
  scopes:
    - keyword.operator.glob
- source: .bak
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: '*'
  scopes:
    - keyword.operator.glob
- source: .swp
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: \#*\#
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: '*'
  scopes:
    - keyword.operator.glob
- source: .dpkg
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: '*'
  scopes:
    - keyword.operator.glob
- source: .rpm
- source: '@'
  scopesBegin:
    - meta.structure.extglob
  scopes:
    - keyword.operator.extglob
- source: (
  scopes:
    - punctuation.definition.extglob
- source: orig
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: new
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: save
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.extglob
  scopesEnd:
    - meta.structure.extglob
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: Makefile*
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.extglob
  scopesEnd:
    - meta.structure.extglob
- source: ' \'
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '-f'
  scopesEnd:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '-r'
  scopesEnd:
    - keyword.operator.logical
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: .
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: i
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: unset
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: i
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' source user completion file'
  scopesEnd:
    - comment.line.number-sign
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION
  scopes:
    - variable.other.normal
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '~'
  scopes:
    - keyword.operator.tilde
- source: '/.bash_completion '
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '-r'
  scopesEnd:
    - keyword.operator.logical
- source: '~'
  scopes:
    - keyword.operator.tilde
- source: '/.bash_completion '
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ' \'
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: .
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: ~/.bash_completion
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: unset
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: have
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: unset
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: UNAME
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: USERLAND
- source: have
  scopesEnd:
    - meta.argument
    - string.unquoted.argument
- source: set
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: BASH_COMPLETION_ORIGINAL_V_VALUE
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.argument
- source: unset
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: BASH_COMPLETION_ORIGINAL_V_VALUE
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Local variables:'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' mode: shell-script'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' sh-basic-offset: 4'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' sh-indent-comment: t'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' indent-tabs-mode: nil'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' End:'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' ex: ts=4 sw=4 et filetype=sh'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' We shouldn''t rely on the user''s grep settings to be correct. If we set these'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' here anytime asdf invokes grep it will be invoked with these options'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' shellcheck disable=SC2034'
  scopesEnd:
    - comment.line.number-sign
- source: GREP_OPTIONS
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '--color=never'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' shellcheck disable=SC2034'
  scopesEnd:
    - comment.line.number-sign
- source: GREP_COLORS
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ASDF_DIR
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: ASDF_DIR
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':-'
  scopes:
    - keyword.operator.expansion
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.parameter-expansion
    - string.quoted.single
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: asdf_version
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: version
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: git_rev
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: version
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: cat
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: asdf_dir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: /VERSION
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-d'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: asdf_dir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: /.git
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: git_rev
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: git
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-git-dir'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: asdf_dir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: /.git
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: rev-parse
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-short'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: HEAD
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: echo
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: version
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-'
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: git_rev
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: version
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: asdf_dir
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-z'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: ASDF_DIR
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: current_script_path
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: BASH_SOURCE
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.expression.assignment
- source: export
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.export
- source: ASDF_DIR
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: ASDF_DIR
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: cd
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: dirname
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: dirname
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: current_script_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: exit
  scopesBegin:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: pwd
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: ASDF_DIR
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: asdf_repository_url
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'https://github.com/asdf-vm/asdf-plugins.git'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: asdf_data_dir
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: data_dir
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: ASDF_DATA_DIR
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: data_dir
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: ASDF_DATA_DIR
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: elif
  scopes:
    - keyword.control.elif
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: EUID
  scopes:
    - variable.other.normal
- source: '-ne'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: data_dir
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: HOME
  scopes:
    - variable.other.normal
- source: /.asdf
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: data_dir
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: asdf_dir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: data_dir
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: get_install_path
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: plugin
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: local
  scopes:
    - storage.modifier.local
- source: install_type
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: local
  scopes:
    - storage.modifier.local
- source: version
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '3'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.expression.assignment
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: install_dir
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: install_dir
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: asdf_data_dir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: /installs
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: mkdir
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: p
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: install_dir
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: /
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: plugin
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: install_type
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: version
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: install_dir
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: /
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: plugin
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: /
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: version
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: install_dir
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: /
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: plugin
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: /
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: install_type
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '-'
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: version
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: list_installed_versions
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: plugin_name
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.expression.assignment
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: plugin_path
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: plugin_path
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: get_plugin_path
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.expression.assignment
    - string.interpolated.dollar
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: plugin_installs_path
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: plugin_installs_path
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: asdf_data_dir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: /installs/
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: plugin_name
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-d'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_installs_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: install
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: plugin_installs_path
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: /
- source: '*'
  scopes:
    - keyword.operator.glob
- source: /
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-e'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: install
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: break
  scopesBegin:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
  scopes:
    - keyword.control.break
- source: basename
  scopesEnd:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: install
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: sed
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: 's/^ref-/ref:/'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: check_if_plugin_exists
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: plugin_name
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Check if we have a non-empty argument'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-z'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - meta.parameter-expansion
    - variable.parameter.positional
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: display_error
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: No plugin given
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: exit
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopesBegin:
    - keyword.control
- source: if
  scopesEnd:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '!'
  scopesBegin:
    - keyword.operator.logical
- source: '-d'
  scopesEnd:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: asdf_data_dir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: /plugins/
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: display_error
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'No such plugin: '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: exit
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: check_if_version_exists
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: plugin_name
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: local
  scopes:
    - storage.modifier.local
- source: version
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.expression.assignment
- source: check_if_plugin_exists
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: install_path
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: install_path
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: find_install_path
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: system
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '!'
  scopesBegin:
    - keyword.operator.logical
- source: '-d'
  scopesEnd:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: install_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: display_error
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'version '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version
  scopes:
    - variable.other.normal
- source: ' is not installed for '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: exit
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: get_plugin_path
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: test
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: 'n'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: asdf_data_dir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: /plugins/
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: asdf_data_dir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: /plugins
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: display_error
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '>&2'
  scopesBegin:
    - meta.argument
  scopes:
    - keyword.operator.redirect
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: get_version_in_dir
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: plugin_name
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: local
  scopes:
    - storage.modifier.local
- source: search_path
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: local
  scopes:
    - storage.modifier.local
- source: legacy_filenames
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '3'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.expression.assignment
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: asdf_version
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: asdf_version
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: parse_asdf_version_file
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: search_path
  scopes:
    - variable.other.normal
- source: /.tool-versions
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: asdf_version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: asdf_version
  scopes:
    - variable.other.normal
- source: '|'
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: search_path
  scopes:
    - variable.other.normal
- source: /.tool-versions
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: filename
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: legacy_filenames
  scopes:
    - variable.other.normal
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: legacy_version
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: legacy_version
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: parse_legacy_version_file
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: search_path
  scopes:
    - variable.other.normal
- source: /
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: filename
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: legacy_version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: legacy_version
  scopes:
    - variable.other.normal
- source: '|'
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: search_path
  scopes:
    - variable.other.normal
- source: /
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: filename
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: find_versions
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: plugin_name
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: local
  scopes:
    - storage.modifier.local
- source: search_path
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.expression.assignment
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: version
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: version
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: get_version_from_env
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: upcase_name
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: upcase_name
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: tr
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '[:lower:]-'
- source: ''''
  scopes:
    - punctuation.definition.string.end
- source: ''''
  scopes:
    - punctuation.definition.string.begin
- source: '[:upper:]_'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: local
  scopes:
    - storage.modifier.local
- source: version_env_var
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ASDF_
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: upcase_name
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: _VERSION
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: echo
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version
  scopes:
    - variable.other.normal
- source: '|'
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version_env_var
  scopes:
    - variable.other.normal
- source: ' environment variable'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: plugin_path
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: plugin_path
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: get_plugin_path
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.expression.assignment
    - string.interpolated.dollar
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: legacy_config
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: legacy_config
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: get_asdf_config_value
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: legacy_version_file
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.expression.assignment
    - string.interpolated.dollar
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: legacy_list_filenames_script
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: legacy_list_filenames_script
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: plugin_path
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: /bin/list-legacy-filenames
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: local
  scopes:
    - storage.modifier.local
- source: legacy_filenames
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: legacy_config
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'yes'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-f'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: legacy_list_filenames_script
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: legacy_filenames
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: bash
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: legacy_list_filenames_script
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: search_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: /
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: version
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: get_version_in_dir
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: search_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: legacy_filenames
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: search_path
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: dirname
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: search_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: get_version_in_dir
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: HOME
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: legacy_filenames
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-f'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: ASDF_DEFAULT_TOOL_VERSIONS_FILENAME
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: versions
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: parse_asdf_version_file
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: ASDF_DEFAULT_TOOL_VERSIONS_FILENAME
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: versions
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: versions
  scopes:
    - variable.other.normal
- source: '|'
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: ASDF_DEFAULT_TOOL_VERSIONS_FILENAME
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: display_no_version_set
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: plugin_name
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.expression.assignment
- source: echo
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'No version set for '
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: plugin_name
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '; please run '
- source: \`
  scopes:
    - constant.character.escape
- source: 'asdf <global | local> '
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: plugin_name
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ' <version>'
- source: \`
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: get_version_from_env
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: plugin_name
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.expression.assignment
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: upcase_name
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: upcase_name
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: tr
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '[:lower:]-'
- source: ''''
  scopes:
    - punctuation.definition.string.end
- source: ''''
  scopes:
    - punctuation.definition.string.begin
- source: '[:upper:]_'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: local
  scopes:
    - storage.modifier.local
- source: version_env_var
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ASDF_
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: upcase_name
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: _VERSION
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: local
  scopes:
    - storage.modifier.local
- source: version
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '!'
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - keyword.operator.expansion
- source: version_env_var
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.expression.assignment
- source: echo
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: find_install_path
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: plugin_name
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: local
  scopes:
    - storage.modifier.local
- source: version
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' shellcheck disable=SC2162'
  scopesEnd:
    - comment.line.number-sign
- source: IFS
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ':'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.single
- source: read
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: a
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: version_info
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: <<<
  scopesBegin:
    - meta.herestring
  scopes:
    - keyword.operator.herestring
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - meta.herestring
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: system
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: elif
  scopes:
    - keyword.control.elif
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: version_info
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ref
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: install_type
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: version_info
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: local
  scopes:
    - storage.modifier.local
- source: version
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: version_info
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '1'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: get_install_path
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: install_type
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: elif
  scopes:
    - keyword.control.elif
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: version_info
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: path
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This is for people who have the local source already compiled'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Like those who work on the language, etc'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' We''ll allow specifying path:/foo/bar/project in .tool-versions'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' And then use the binaries there'
  scopesEnd:
    - comment.line.number-sign
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: install_type
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: path
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: local
  scopes:
    - storage.modifier.local
- source: version
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: path
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: echo
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: version_info
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '1'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: install_type
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: version
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: local
  scopes:
    - storage.modifier.local
- source: version
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: version_info
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: get_install_path
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: install_type
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: get_custom_executable_path
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: plugin_path
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: local
  scopes:
    - storage.modifier.local
- source: install_path
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: local
  scopes:
    - storage.modifier.local
- source: executable_path
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '3'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' custom plugin hook for executable path'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-x'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: plugin_path
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: /bin/exec-path
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: cmd
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: basename
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: executable_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.expression.assignment
    - string.interpolated.dollar
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: relative_path
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' shellcheck disable=SC2001'
  scopesEnd:
    - comment.line.number-sign
- source: relative_path
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: executable_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: sed
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: e
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: s|
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: install_path
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: /||
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: relative_path
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: '"'
  scopesBegin:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
  scopes:
    - meta.statement.command.name.quoted
    - string.quoted.double
    - punctuation.definition.string.begin
    - entity.name.function.call
    - entity.name.command
- source: $
  scopesBegin:
    - meta.statement.command.name.continuation
    - string.quoted.double
    - entity.name.function.call
    - entity.name.command
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: plugin_path
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: /bin/exec-path
  scopesEnd:
    - meta.statement.command.name.continuation
    - string.quoted.double
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopes:
    - string.quoted.double
    - punctuation.definition.string.end
    - entity.name.function.call
    - entity.name.command
  scopesEnd:
    - meta.statement.command.name
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: install_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cmd
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: relative_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: executable_path
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: install_path
  scopes:
    - variable.other.normal
- source: /
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: relative_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: executable_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: get_executable_path
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: plugin_name
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: local
  scopes:
    - storage.modifier.local
- source: version
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: local
  scopes:
    - storage.modifier.local
- source: executable_path
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '3'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.expression.assignment
- source: check_if_version_exists
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: system
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: path
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PATH
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: sed
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: e
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: s|
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: asdf_data_dir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '/shims||g; s|::|:|g'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: cmd
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: basename
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: executable_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: cmd_path
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: PATH
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: path
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.expression.assignment
- source: command
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cmd
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>&1'
  scopes:
    - keyword.operator.redirect
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' shellcheck disable=SC2181'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '?'
  scopes:
    - variable.language.special
- source: '-ne'
  scopes:
    - keyword.operator.logical
- source: '0'
  scopes:
    - constant.numeric
    - constant.numeric.integer
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: cmd_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: install_path
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: install_path
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: find_install_path
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.expression.assignment
    - string.interpolated.dollar
- source: echo
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: install_path
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: /
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: executable_path
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: parse_asdf_version_file
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: file_path
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: local
  scopes:
    - storage.modifier.local
- source: plugin_name
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-f'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: file_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: version
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: version
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: strip_tool_version_comments
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: file_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: grep
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ^
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: plugin_name
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: sed
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: e
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: s/^
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: plugin_name
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ' //'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: parse_legacy_version_file
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: file_path
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: local
  scopes:
    - storage.modifier.local
- source: plugin_name
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.expression.assignment
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: plugin_path
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: plugin_path
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: get_plugin_path
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.expression.assignment
    - string.interpolated.dollar
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: parse_legacy_script
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: parse_legacy_script
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: plugin_path
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: /bin/parse-legacy-file
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-f'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: file_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-f'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: parse_legacy_script
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: bash
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: parse_legacy_script
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: file_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: cat
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: file_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: get_preset_version_for
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: plugin_name
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.expression.assignment
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: search_path
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: search_path
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: pwd
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.expression.assignment
    - string.interpolated.dollar
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: version_and_path
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: version_and_path
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: find_versions
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: search_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.expression.assignment
    - string.interpolated.dollar
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: version
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: version
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: cut
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: d
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '|'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '1'
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
- source: <<<
  scopesBegin:
    - meta.herestring
  scopes:
    - keyword.operator.herestring
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version_and_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - meta.herestring
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.expression.assignment
    - string.interpolated.dollar
- source: echo
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: get_asdf_config_value_from_file
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: config_path
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: local
  scopes:
    - storage.modifier.local
- source: key
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '!'
  scopesBegin:
    - keyword.operator.logical
- source: '-f'
  scopesEnd:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: config_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: result
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: result
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: grep
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: E
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ^
- source: \\
  scopes:
    - constant.character.escape
- source: s*
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: key
  scopes:
    - variable.other.normal
- source: \\
  scopes:
    - constant.character.escape
- source: s*=
- source: \\
  scopes:
    - constant.character.escape
- source: s*
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: config_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: head
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: awk
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: F
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '='
- source: ''''
  scopes:
    - punctuation.definition.string.end
- source: ''''
  scopes:
    - punctuation.definition.string.begin
- source: '{print $2}'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: sed
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: e
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: 's/^[[:space:]]*//'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: e
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: 's/[[:space:]]*$//'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: result
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: result
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '2'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: get_asdf_config_value
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: key
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: local
  scopes:
    - storage.modifier.local
- source: config_path
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: ASDF_CONFIG_FILE
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':-'
  scopes:
    - keyword.operator.expansion
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: HOME
  scopes:
    - variable.other.normal
- source: /.asdfrc
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.parameter-expansion
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: local
  scopes:
    - storage.modifier.local
- source: default_config_path
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: ASDF_CONFIG_DEFAULT_FILE
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':-'
  scopes:
    - keyword.operator.expansion
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: asdf_dir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: /defaults
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.parameter-expansion
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.expression.assignment
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: local_config_path
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: local_config_path
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: find_file_upwards
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: .asdfrc
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: get_asdf_config_value_from_file
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: local_config_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: key
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: get_asdf_config_value_from_file
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: config_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: key
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: get_asdf_config_value_from_file
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: default_config_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: key
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: repository_needs_update
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: update_file_dir
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: update_file_dir
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: asdf_data_dir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: /tmp
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: update_file_name
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: update_file_name
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: repo-updated
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' `find` outputs filename if it has not been modified in the last day'
  scopesEnd:
    - comment.line.number-sign
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: find_result
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: find_result
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: find
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: update_file_dir
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: name
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: update_file_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: type
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: f
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: mtime
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '+1'
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: print
  scopes:
    - constant.other.option
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.expression.assignment
    - string.interpolated.dollar
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: find_result
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: initialize_or_update_repository
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: repository_url
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: repository_path
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: repository_url
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: asdf_repository_url
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: repository_path
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: asdf_data_dir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: /repository
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '!'
  scopesBegin:
    - keyword.operator.logical
- source: '-d'
  scopesEnd:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: repository_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: initializing plugin repository...
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: git
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: clone
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: repository_url
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: repository_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: elif
  scopes:
    - keyword.control.elif
- source: repository_needs_update
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: updating plugin repository...
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: (
  scopesBegin:
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell
- source: cd
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: repository_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: git
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: fetch
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: git
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: reset
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: '-hard'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: origin/master
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: )
  scopes:
    - punctuation.definition.subshell
  scopesEnd:
    - meta.statement
    - meta.scope.subshell
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: mkdir
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: p
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: asdf_data_dir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: /tmp
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: touch
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: asdf_data_dir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: /tmp/repo-updated
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: get_plugin_source_url
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: plugin_name
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.expression.assignment
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: plugin_config
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: plugin_config
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: asdf_data_dir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: /repository/plugins/
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-f'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_config
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: grep
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: repository
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_config
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: awk
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: F
  scopesBegin:
    - constant.other.option
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '='
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.unquoted.argument
    - constant.other.option
    - string.quoted.single
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '{print $2}'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: sed
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: s/ //
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: find_tool_versions
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: find_file_upwards
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: .tool-versions
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: find_file_upwards
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: name
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.double
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: search_path
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: search_path
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: pwd
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: search_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '!='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: /
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-f'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: search_path
  scopes:
    - variable.other.normal
- source: /
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: search_path
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: /
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: search_path
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: dirname
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: search_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: resolve_symlink
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: symlink
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: symlink
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' This seems to be the only cross-platform way to resolve symlink paths to'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' the real file path.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' shellcheck disable=SC2012'
  scopesEnd:
    - comment.line.number-sign
- source: resolved_path
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: ls
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: l
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: symlink
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: sed
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: e
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: s|.*-> \(.*\)|\1|
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Check if resolved path is relative or not by looking at the first character.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' If it is a slash we can assume it''s root and absolute. Otherwise we treat it'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' as relative'
  scopesEnd:
    - comment.line.number-sign
- source: case
  scopesBegin:
    - meta.scope.case-block
  scopes:
    - keyword.control
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: resolved_path
  scopes:
    - variable.other.normal
- source: in
  scopesBegin:
    - meta.scope.case-body
  scopes:
    - keyword.control
- source: /
  scopesBegin:
    - meta.scope.case-clause
    - meta.scope.case-pattern
- source: '*'
  scopes:
    - keyword.operator.glob
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: echo
  scopesBegin:
    - meta.scope.case-clause-body
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: resolved_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.scope.case-clause-body
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
- source: '*'
  scopesBegin:
    - meta.scope.case-pattern
  scopes:
    - keyword.operator.glob
- source: )
  scopes:
    - punctuation.definition.case-pattern
  scopesEnd:
    - meta.scope.case-pattern
- source: echo
  scopesBegin:
    - meta.scope.case-clause-body
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PWD
  scopes:
    - variable.other.normal
- source: /
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: resolved_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.scope.case-clause-body
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: ;;
  scopes:
    - punctuation.terminator.case-clause
  scopesEnd:
    - meta.scope.case-body
    - meta.scope.case-clause
- source: esac
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.case-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: list_plugin_bin_paths
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: plugin_name
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: local
  scopes:
    - storage.modifier.local
- source: version
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: local
  scopes:
    - storage.modifier.local
- source: install_type
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '3'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.expression.assignment
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: plugin_path
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: plugin_path
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: get_plugin_path
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.expression.assignment
    - string.interpolated.dollar
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: install_path
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: install_path
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: get_install_path
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: install_type
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-f'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: plugin_path
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: /bin/list-bin-paths
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: space_separated_list_of_bin_paths
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' shellcheck disable=SC2030'
  scopesEnd:
    - comment.line.number-sign
- source: space_separated_list_of_bin_paths
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: export
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.export
- source: ASDF_INSTALL_TYPE
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: install_type
  scopes:
    - variable.other.normal
- source: export
  scopes:
    - storage.modifier.export
- source: ASDF_INSTALL_VERSION
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version
  scopes:
    - variable.other.normal
- source: export
  scopes:
    - storage.modifier.export
- source: ASDF_INSTALL_PATH
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: install_path
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.expression.assignment
- source: bash
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: plugin_path
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: /bin/list-bin-paths
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: else
  scopes:
    - keyword.control.else
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: space_separated_list_of_bin_paths
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: bin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: space_separated_list_of_bin_paths
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: list_plugin_exec_paths
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: plugin_name
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: local
  scopes:
    - storage.modifier.local
- source: full_version
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.expression.assignment
- source: check_if_plugin_exists
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: IFS
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ':'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.single
- source: read
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: r
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: a
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: version_info
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: <<<
  scopesBegin:
    - meta.herestring
  scopes:
    - keyword.operator.herestring
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: full_version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - meta.herestring
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: version_info
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ref
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: install_type
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: version_info
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: local
  scopes:
    - storage.modifier.local
- source: version
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: version_info
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '1'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: install_type
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: version
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: local
  scopes:
    - storage.modifier.local
- source: version
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: version_info
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: plugin_shims_path
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: plugin_shims_path
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: get_plugin_path
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: /shims
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-d'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_shims_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_shims_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: space_separated_list_of_bin_paths
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: list_plugin_bin_paths
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: install_type
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: IFS
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.single
- source: read
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: r
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: a
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: all_bin_paths
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: <<<
  scopesBegin:
    - meta.herestring
  scopes:
    - keyword.operator.herestring
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: space_separated_list_of_bin_paths
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - meta.herestring
    - string.quoted.double
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: install_path
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: install_path
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: get_install_path
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: install_type
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: bin_path
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: all_bin_paths
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: install_path
  scopes:
    - variable.other.normal
- source: /
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: bin_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: with_plugin_env
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: plugin_name
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: local
  scopes:
    - storage.modifier.local
- source: full_version
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
- source: local
  scopes:
    - storage.modifier.local
- source: callback
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '3'
  scopes:
    - variable.parameter.positional
- source: IFS
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ':'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.single
- source: read
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: r
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: a
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: version_info
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: <<<
  scopesBegin:
    - meta.herestring
  scopes:
    - keyword.operator.herestring
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: full_version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - meta.herestring
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: version_info
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ref
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: install_type
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: version_info
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: local
  scopes:
    - storage.modifier.local
- source: version
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: version_info
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '1'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: install_type
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: version
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: local
  scopes:
    - storage.modifier.local
- source: version
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: version_info
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '0'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: fi
  scopesBegin:
    - keyword.control
- source: if
  scopesEnd:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: system
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' execute as is for system'
  scopesEnd:
    - comment.line.number-sign
- source: '"'
  scopesBegin:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
  scopes:
    - meta.statement.command.name.quoted
    - string.quoted.double
    - punctuation.definition.string.begin
    - entity.name.function.call
    - entity.name.command
- source: $
  scopesBegin:
    - meta.statement.command.name.continuation
    - string.quoted.double
    - entity.name.function.call
    - entity.name.command
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: callback
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement.command.name.continuation
    - string.quoted.double
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopes:
    - string.quoted.double
    - punctuation.definition.string.end
    - entity.name.function.call
    - entity.name.command
- source: return
  scopes:
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
  scopesEnd:
    - meta.statement.command.name
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '?'
  scopes:
    - variable.language.special
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: plugin_path
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: plugin_path
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: get_plugin_path
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' add the plugin listed exec paths to PATH'
  scopesEnd:
    - comment.line.number-sign
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: path
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: exec_paths
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.unquoted.argument
- source: exec_paths
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: list_plugin_exec_paths
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: full_version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' exec_paths contains a trailing newline which is converted to a colon, so no'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' colon is needed between the subshell and the PATH variable in this string'
  scopesEnd:
    - comment.line.number-sign
- source: path
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: exec_paths
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: tr
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
- source: ''''
  scopes:
    - punctuation.definition.string.end
- source: ''''
  scopes:
    - punctuation.definition.string.begin
- source: ':'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PATH
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' If no custom exec-env transform, just execute callback'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '!'
  scopesBegin:
    - keyword.operator.logical
- source: '-f'
  scopesEnd:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: plugin_path
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: /bin/exec-env
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: PATH
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: path
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.expression.assignment
- source: '"'
  scopesBegin:
    - meta.statement.command
    - meta.statement.command.name
  scopes:
    - meta.statement.command.name.quoted
    - string.quoted.double
    - punctuation.definition.string.begin
    - entity.name.function.call
    - entity.name.command
- source: $
  scopesBegin:
    - meta.statement.command.name.continuation
    - string.quoted.double
    - entity.name.function.call
    - entity.name.command
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: callback
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement.command.name.continuation
    - string.quoted.double
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopes:
    - string.quoted.double
    - punctuation.definition.string.end
    - entity.name.function.call
    - entity.name.command
- source: return
  scopes:
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
  scopesEnd:
    - meta.statement.command.name
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '?'
  scopes:
    - variable.language.special
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Load the plugin custom environment'
  scopesEnd:
    - comment.line.number-sign
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: install_path
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: install_path
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: find_install_path
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: full_version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' shellcheck source=/dev/null'
  scopesEnd:
    - comment.line.number-sign
- source: ASDF_INSTALL_TYPE
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: install_type
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.expression.assignment
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: ASDF_INSTALL_VERSION
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.expression.assignment
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: ASDF_INSTALL_PATH
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: install_path
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.expression.assignment
- source: \
  scopes:
    - constant.character.escape.line-continuation
- source: source
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: plugin_path
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: /bin/exec-env
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: PATH
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: path
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.expression.assignment
- source: '"'
  scopesBegin:
    - meta.statement.command
    - meta.statement.command.name
  scopes:
    - meta.statement.command.name.quoted
    - string.quoted.double
    - punctuation.definition.string.begin
    - entity.name.function.call
    - entity.name.command
- source: $
  scopesBegin:
    - meta.statement.command.name.continuation
    - string.quoted.double
    - entity.name.function.call
    - entity.name.command
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: callback
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement.command.name.continuation
    - string.quoted.double
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopes:
    - string.quoted.double
    - punctuation.definition.string.end
    - entity.name.function.call
    - entity.name.command
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: plugin_executables
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: plugin_name
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: local
  scopes:
    - storage.modifier.local
- source: full_version
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: bin_path
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: list_plugin_exec_paths
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: full_version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: executable_file
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: bin_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: /
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: is_executable
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: executable_file
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: executable_file
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: is_executable
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: executable_path
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: ' (-f '
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: executable_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ') '
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: ' (-x '
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: executable_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ') '
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '0'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: return
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: plugin_shims
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: plugin_name
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: local
  scopes:
    - storage.modifier.local
- source: full_version
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.expression.assignment
- source: grep
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: lx
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '# asdf-plugin: '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: full_version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: asdf_data_dir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: /shims
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: /
  scopesBegin:
    - string.unquoted.argument
- source: '*'
  scopes:
    - variable.language.special.wildcard
  scopesEnd:
    - string.unquoted.argument
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: shim_plugin_versions
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: executable_name
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: executable_name
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: basename
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.expression.assignment
    - string.interpolated.dollar
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: shim_path
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: shim_path
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: asdf_data_dir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: /shims/
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: executable_name
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-x'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: shim_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: grep
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '# asdf-plugin: '
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: shim_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '2'
  scopes:
    - keyword.operator.redirect.stderr
- source: '>'
  scopes:
    - keyword.operator.redirect
- source: /dev/null
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: sed
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: e
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 's/# asdf-plugin: //'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: uniq
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: else
  scopes:
    - keyword.control.else
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'asdf: unknown shim '
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: executable_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: strip_tool_version_comments
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: tool_version_path
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: while
  scopesBegin:
    - meta.scope.while-loop
  scopes:
    - keyword.control
- source: IFS
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.expression.assignment
- source: read
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: r
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: tool_line
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '|'
  scopesBegin:
    - keyword.operator.pipe
- source: '|'
  scopesEnd:
    - keyword.operator.pipe
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: tool_line
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Remove whitespace before pound sign, the pound sign, and everything after it'
  scopesEnd:
    - comment.line.number-sign
- source: new_line
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: tool_line
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: cut
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f1
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: d
  scopesBegin:
    - constant.other.option
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '#'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - string.unquoted.argument
    - constant.other.option
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: sed
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: e
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: 's/[[:space:]]*$//'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' Only print the line if it is not empty'
  scopesEnd:
    - comment.line.number-sign
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: new_line
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: new_line
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.while-loop
- source: <
  scopes:
    - keyword.operator.redirect
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: tool_version_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: asdf_run_hook
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: hook_name
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
  scopesEnd:
    - meta.expression.assignment
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: hook_cmd
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: hook_cmd
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: get_asdf_config_value
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: hook_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: hook_cmd
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: asdf_hook_fun
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: unset
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: asdf_hook_fun
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: ev
  scopesBegin:
    - meta.statement.command.name
  scopes:
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopes:
    - meta.statement.command.name.quoted
    - string.quoted.single
    - punctuation.definition.string.begin
    - entity.name.function.call
    - entity.name.command
- source: al
  scopes:
    - meta.statement.command.name.continuation
    - string.quoted.single
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopes:
    - string.quoted.single
    - punctuation.definition.string.end
    - entity.name.function.call
    - entity.name.command
  scopesEnd:
    - meta.statement.command.name
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: hook_cmd
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' ignore banned command just here'
  scopesEnd:
    - comment.line.number-sign
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: asdf_hook_fun
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: '@'
  scopesBegin:
    - meta.parameter-expansion
    - keyword.operator.expansion
- source: ':'
  scopesEnd:
    - keyword.operator.expansion
- source: '2'
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: with_shim_executable
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: get_shim_versions
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: shim_plugin_versions
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: shim_name
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: shim_plugin_versions
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: shim_name
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: cut
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: d
  scopesBegin:
    - constant.other.option
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - constant.other.option
    - string.quoted.single
- source: '-'
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: awk
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '{print$1" system"}'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.single
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: preset_versions
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: shim_plugin_versions
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: shim_name
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: cut
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: d
  scopesBegin:
    - constant.other.option
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - constant.other.option
    - string.quoted.single
- source: '-'
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: uniq
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: xargs
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: IPLUGIN
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: bash
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: c
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'source '
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: asdf_dir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '/lib/utils.sh; echo PLUGIN '
- source: \$
  scopes:
    - constant.character.escape
- source: (get_preset_version_for PLUGIN)
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: select_from_preset_version
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: grep
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: f
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: <(
  scopesBegin:
    - meta.argument
    - string.interpolated.process-substitution
  scopes:
    - punctuation.definition.string.begin
- source: get_shim_versions
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.string.end
- source: <(
  scopes:
    - punctuation.definition.string.begin
- source: preset_versions
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.interpolated.process-substitution
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: head
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: 'n'
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: xargs
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: echo
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function.body
- source: select_version
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: '#'
  scopesBegin:
    - comment.line.number-sign
  scopes:
    - punctuation.definition.comment
- source: ' First, we get the all the plugins where the'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' current shim is available.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Then, we iterate on all versions set for each plugin'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' Note that multiple plugin versions can be set for a single plugin.'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' These are separated by a space. e.g. python 3.7.2 2.7.15'
- source: '#'
  scopes:
    - punctuation.definition.comment
- source: ' For each plugin/version pair, we check if it is present in the shim'
  scopesEnd:
    - comment.line.number-sign
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: search_path
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: search_path
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: pwd
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.expression.assignment
    - string.interpolated.dollar
- source: local
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: shim_versions
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: IFS
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $'
  scopesBegin:
    - string.quoted.single.dollar
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape.ansi-c
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.single.dollar
- source: read
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: rd
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: ''''
  scopesBegin:
    - meta.argument
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.single
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: a
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: shim_versions
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: <<<
  scopesBegin:
    - meta.herestring
  scopes:
    - keyword.operator.herestring
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: get_shim_versions
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - meta.herestring
    - string.quoted.double
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: plugins
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: plugins
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - punctuation
- source: )
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - punctuation
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: plugin_and_version
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: shim_versions
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: plugin_name
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: plugin_shim_version
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: IFS
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.single
- source: read
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: r
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: plugin_name
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: _plugin_shim_version
  scopesEnd:
    - string.unquoted.argument
- source: <<<
  scopesBegin:
    - meta.herestring
  scopes:
    - keyword.operator.herestring
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_and_version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - meta.herestring
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '!'
  scopes:
    - keyword.operator.pipe
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: plugins
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '*'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.glob
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '*'
  scopes:
    - keyword.operator.glob
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: plugins
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: (
  scopes:
    - punctuation
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: done
  scopesBegin:
    - keyword.control
- source: for
  scopesEnd:
    - keyword.control
- source: plugin_name
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: plugins
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: version_and_path
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: version_string
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: usable_plugin_versions
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: _path
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: version_and_path
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: find_versions
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: search_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: IFS
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '|'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.single
- source: read
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: r
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: version_string
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: _path
  scopesEnd:
    - string.unquoted.argument
- source: <<<
  scopesBegin:
    - meta.herestring
  scopes:
    - keyword.operator.herestring
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version_and_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - meta.herestring
    - string.quoted.double
- source: IFS
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.single
- source: read
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: r
  scopes:
    - constant.other.option
- source: '-'
  scopes:
    - constant.other.option.dash
- source: a
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: usable_plugin_versions
  scopesBegin:
    - meta.argument
  scopes:
    - string.unquoted.argument
- source: <<<
  scopesBegin:
    - meta.herestring
  scopes:
    - keyword.operator.herestring
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: version_string
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - meta.herestring
    - string.quoted.double
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: plugin_version
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: usable_plugin_versions
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: for
  scopesBegin:
    - meta.scope.for-in-loop
  scopes:
    - keyword.control
- source: plugin_and_version
  scopes:
    - variable.other.loop
- source: in
  scopes:
    - keyword.control
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: shim_versions
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: '['
  scopes:
    - punctuation.section.array
- source: '@'
- source: ']'
  scopes:
    - punctuation.section.array
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: do
  scopes:
    - keyword.control.do
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: plugin_shim_name
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: plugin_shim_version
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: IFS
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.single
- source: read
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: r
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: plugin_shim_name
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: plugin_shim_version
  scopesEnd:
    - string.unquoted.argument
- source: <<<
  scopesBegin:
    - meta.herestring
  scopes:
    - keyword.operator.herestring
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_and_version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - meta.herestring
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '[['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_shim_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']]'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: '&&'
  scopes:
    - punctuation.separator.statement.and
- source: '['
  scopesBegin:
    - meta.statement
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_shim_version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.statement
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: done
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.for-in-loop
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: shim_name
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: shim_name
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: basename
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '1'
  scopes:
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: local
  scopes:
    - storage.modifier.local
- source: shim_exec
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '2'
  scopes:
    - meta.parameter-expansion
    - variable.parameter.positional
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
    - variable.parameter.positional
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '!'
  scopesBegin:
    - keyword.operator.logical
- source: '-f'
  scopesEnd:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: asdf_data_dir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: /shims/
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: shim_name
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'unknown command: '
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: shim_name
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: . Perhaps you have to reshim?
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '>&2'
  scopes:
    - keyword.operator.redirect
  scopesEnd:
    - meta.argument
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '1'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: selected_version
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: selected_version
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: select_version
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.quoted.double
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-z'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: selected_version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: selected_version
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: select_from_preset_version
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: fi
  scopesBegin:
    - keyword.control
- source: if
  scopesEnd:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: selected_version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: plugin_name
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: full_version
  scopes:
    - meta.argument
    - string.unquoted.argument
- source: local
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: plugin_path
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: IFS
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.expression.assignment
    - string.quoted.single
- source: read
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: r
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: plugin_name
  scopesBegin:
    - meta.argument
    - string.unquoted.argument
- source: full_version
  scopesEnd:
    - string.unquoted.argument
- source: <<<
  scopesBegin:
    - meta.herestring
  scopes:
    - keyword.operator.herestring
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: selected_version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement.command
    - meta.argument
    - meta.herestring
    - string.quoted.double
- source: plugin_path
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: get_plugin_path
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: run_within_env
  scopesBegin:
    - meta.function
  scopes:
    - entity.name.function
- source: (
  scopesBegin:
    - punctuation.definition.arguments
- source: )
  scopesEnd:
    - punctuation.definition.arguments
- source: '{'
  scopesBegin:
    - meta.function.body
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
- source: local
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - storage.modifier.local
- source: path
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PATH
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: system
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '=='
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: full_version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: path
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: PATH
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '|'
  scopes:
    - keyword.operator.pipe
- source: sed
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: e
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: s|
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: asdf_data_dir
  scopes:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: '/shims||g; s|::|:|g'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: executable_path
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: PATH
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: path
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.expression.assignment
- source: command
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '-'
  scopesBegin:
    - string.unquoted.argument
  scopes:
    - constant.other.option.dash
- source: v
  scopes:
    - constant.other.option
  scopesEnd:
    - string.unquoted.argument
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: shim_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-x'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: plugin_path
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: /bin/exec-path
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: install_path
  scopesBegin:
    - meta.statement
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: find_install_path
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: full_version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - string.interpolated.dollar
- source: executable_path
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: get_custom_executable_path
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: plugin_path
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: install_path
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: executable_path
  scopesBegin:
    - meta.parameter-expansion
  scopes:
    - variable.other.normal
- source: ':-'
  scopes:
    - keyword.operator.expansion
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: shim_name
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
  scopesEnd:
    - meta.parameter-expansion
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: '"'
  scopesBegin:
    - meta.statement
    - meta.statement.command
    - meta.statement.command.name
  scopes:
    - meta.statement.command.name.quoted
    - string.quoted.double
    - punctuation.definition.string.begin
    - entity.name.function.call
    - entity.name.command
- source: $
  scopesBegin:
    - meta.statement.command.name.continuation
    - string.quoted.double
    - entity.name.function.call
    - entity.name.command
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: shim_exec
  scopes:
    - variable.other.normal
  scopesEnd:
    - meta.statement.command.name.continuation
    - string.quoted.double
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopes:
    - string.quoted.double
    - punctuation.definition.string.end
    - entity.name.function.call
    - entity.name.command
  scopesEnd:
    - meta.statement.command.name
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: full_version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: executable_path
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
  scopesEnd:
    - meta.function
    - meta.function.body
- source: with_plugin_env
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: plugin_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: full_version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: run_within_env
  scopes:
    - string.unquoted.argument
  scopesEnd:
    - meta.argument
- source: return
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: $
  scopesBegin:
    - meta.argument
  scopes:
    - punctuation.definition.variable
    - variable.language.special
- source: '?'
  scopes:
    - variable.language.special
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: (
  scopesBegin:
    - meta.statement
    - meta.scope.subshell
  scopes:
    - punctuation.definition.subshell
- source: local
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - storage.modifier.local
- source: preset_version
  scopes:
    - meta.argument
    - string.unquoted.argument
  scopesEnd:
    - meta.statement.command
- source: preset_version
  scopesBegin:
    - meta.expression.assignment
  scopes:
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: $(
  scopesBegin:
    - string.interpolated.dollar
  scopes:
    - punctuation.definition.evaluation.parens.begin
- source: get_preset_version_for
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: shim_name
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.evaluation.parens.end
  scopesEnd:
    - meta.statement
    - meta.expression.assignment
    - string.interpolated.dollar
- source: if
  scopesBegin:
    - meta.scope.if-block
  scopes:
    - keyword.control
- source: '['
  scopesBegin:
    - meta.scope.logical-expression
  scopes:
    - punctuation.definition.logical-expression
- source: '-n'
  scopes:
    - keyword.operator.logical
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
    - variable.other.normal
- source: preset_version
  scopes:
    - variable.other.normal
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.logical-expression
  scopesEnd:
    - meta.scope.logical-expression
- source: ;
  scopes:
    - punctuation.terminator.statement.semicolon
- source: then
  scopes:
    - keyword.control.then
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'asdf: No version '
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: preset_version
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: ' installed for command '
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: shim_name
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: echo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Please install the missing version by running
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: echo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: echo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'asdf install '
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: shim_name
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: preset_version
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: echo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: echo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'or add one of the following in your .tool-versions file:'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: else
  scopes:
    - keyword.control.else
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'asdf: No version set for command '
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: shim_name
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: echo
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'you might want to add one of the following in your .tool-versions file:'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: fi
  scopes:
    - keyword.control
  scopesEnd:
    - meta.scope.if-block
- source: echo
  scopesBegin:
    - meta.statement
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - support.function.builtin
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.argument
    - string.quoted.double
- source: shim_plugin_versions
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
- source: '"'
  scopesBegin:
    - meta.argument
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: $
  scopes:
    - punctuation.definition.variable
- source: '{'
  scopes:
    - punctuation.section.bracket.curly.variable.begin
    - punctuation.definition.variable
- source: shim_name
  scopes:
    - meta.parameter-expansion
    - variable.other.normal
- source: '}'
  scopes:
    - punctuation.section.bracket.curly.variable.end
    - punctuation.definition.variable
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.statement
    - meta.statement.command
    - meta.argument
    - string.quoted.double
- source: )
  scopes:
    - punctuation.definition.subshell
  scopesEnd:
    - meta.scope.subshell
- source: '>&2'
  scopes:
    - keyword.operator.redirect
- source: return
  scopesBegin:
    - meta.statement.command
  scopes:
    - meta.statement.command.name
    - entity.name.function.call
    - entity.name.command
    - keyword.control.return
- source: '126'
  scopes:
    - meta.argument
    - string.unquoted.argument
    - constant.numeric
    - constant.numeric.integer
  scopesEnd:
    - meta.statement
    - meta.statement.command
- source: '}'
  scopes:
    - punctuation.definition.group
    - punctuation.section.function.definition
